#    -*- mode: org -*-


Archived entries from file /Users/erker/projects/energy/code/energy.org


* make regions around each building  10m distances
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-09-18 Mon 14:28
  :ARCHIVE_FILE: ~/projects/energy/code/energy.org
  :ARCHIVE_OLPATH: Reset [2017-02-14 Tue]/Load and join datasets
  :ARCHIVE_CATEGORY: energy
  :ARCHIVE_ITAGS: work
  :END:
#+begin_src R
  build.res.primary.parcels <- readOGR(dsn = "../DD/", layer = "buildings.w.parcels.energy.propinfo")
  colnames(build.res.primary.parcels@data) <- readRDS("../DD/colnames.buildings.w.parcels.energy.propinfo.rds")
  build.res.primary.parcels@data$Parcel <- readRDS("../DD/parcelID.buildings.w.parcels.energy.propinfo.rds")
  build.res.primary.parcels@data$BUILDINGINFO <- readRDS("../DD/BUILDINGINFO.buildings.w.parcels.energy.propinfo.rds")
#+end_src

#+RESULTS:
: OGR data source with driver: ESRI Shapefile
: Source: "../DD/", layer: "buildings.w.parcels.energy.propinfo"
: with 31172 features
: It has 56 fields


#+begin_src R
  cores <- 40
        widths <- c(0,10,20,30,40,50,60)

    chunks <- 80
        a <- 1:length(build.res.primary.parcels)
        a.s <- split(a, rep(1:chunks,each = ceiling(length(a)/chunks)))

        dir.create("../DD/buildings.regions")

        cl <- makeCluster(cores)
        registerDoParallel(cl)

        foreach(i = a.s, .packages = c("plyr","sp","raster","rgeos"), .combine = "rbind") %dopar% {
            o <- lapply(i, function(j) {
                op <- makeRegionsAroundPolygon(build.res.primary.parcels[j,], widths)
            })
            o <- do.call(bind, o)
            shapefile(o, paste0("../DD/buildings.regions/",i[1],".shp"), overwrite = T)
        }

        closeAllConnections()


      shp.files <- list.files("../DD/buildings.regions", pattern = ".*shp", full.names = T)

        cl <- makeCluster(cores)
        registerDoParallel(cl)

      out <- foreach(shp.file = shp.files, .packages = c("sp","raster","rgeos")) %dopar% {
          shapefile(shp.file)
          }

      out <- do.call(bind, out)

    unlink("../DD/buildings.regions", recursive = T)

#+end_src

#+RESULTS:


* drop buildings with too complex geometry (for which assumptions about direction to centroid are not valid).
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-09-18 Mon 15:53
  :ARCHIVE_FILE: ~/projects/energy/code/energy.org
  :ARCHIVE_OLPATH: Reset [2017-02-14 Tue]/Load and join datasets
  :ARCHIVE_CATEGORY: energy
  :ARCHIVE_ITAGS: work
  :END:
and so there are more than one chunk of building in a given
direction.  There are more than 56 building sections.

#+begin_src R
  too.complex.buildings <- out@data %>% group_by(BUILDINGFO) %>% dplyr::summarize(n = n()) %>% filter(n > 56) %>% .$BUILDINGFO

  out <- out[!out@data$BUILDINGFO %in% too.complex.buildings,]
#+end_src

#+RESULTS:


* Explore relationship between energy and covariates  DO this locally (copy from krusty back to local)
:PROPERTIES:
:header-args:R: :eval yes :session *R:energy* :results output :exports both
:ARCHIVE_TIME: 2018-03-16 Fri 12:38
:ARCHIVE_FILE: ~/projects/energy/code/energy.org
:ARCHIVE_OLPATH: Building Energy and Trees[2017-02-14 Tue] [2018-03-16 Fri]
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
** libraries
#+begin_src R :tangle yes
    library(plyr)
    library(ascii)
    library(broom)
    library(tidyr)
    library(stringr)
    library(raster)
    library(rgeos)
    library(rgdal)
    library(foreach)
    library(doParallel)
    library(ggplot2)
    library(dplyr)
    library(lme4)
  library(GGally)
#+end_src

#+RESULTS:
#+begin_example

Attaching package: ‘tidyr’

The following object is masked from ‘package:ascii’:

    expand
Loading required package: sp

Attaching package: ‘raster’

The following object is masked from ‘package:tidyr’:

    extract
rgeos version: 0.3-26, (SVN revision 560)
 GEOS runtime version: 3.6.1-CAPI-1.10.1 r0
 Linking to sp version: 1.2-5
 Polygon checking: TRUE
rgdal: version: 1.2-15, (SVN revision 691)
 Geospatial Data Abstraction Library extensions to R successfully loaded
 Loaded GDAL runtime: GDAL 2.1.3, released 2017/20/01
 Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgdal/gdal
 GDAL binary built with GEOS: FALSE
 Loaded PROJ.4 runtime: Rel. 4.9.3, 15 August 2016, [PJ_VERSION: 493]
 Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgdal/proj
 Linking to sp version: 1.2-5
foreach: simple, scalable parallel programming from Revolution Analytics
Use Revolution R for scalability, fault tolerance and more.
http://www.revolutionanalytics.com
Error in library(doParallel) : there is no package called ‘doParallel’

Attaching package: ‘ggplot2’

The following object is masked from ‘package:raster’:

    calc

Attaching package: ‘dplyr’

The following objects are masked from ‘package:rgeos’:

    intersect, setdiff, union

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:tidyr’:

    expand

The following object is masked from ‘package:ascii’:

    expand
#+end_example

** functions
**** Convert kWh to Carbon kg
https://www.epa.gov/sites/production/files/2015-10/documents/egrid2012_ghgoutputrates_0.pdf
https://www.epa.gov/energy/emissions-generation-resource-integrated-database-egrid
https://www.epa.gov/sites/production/files/2017-02/documents/egrid2014_technicalsupportdocument_v2.pdf

for electricity made in region MRO East
1267.5 lbs/MWh * 1kg /2.20462 lb * 1 MWh / 1000 kWh * 12 /44

#+begin_src R
1267.5 / 2.20462 / 1000 *12 /44
#+end_src

#+RESULTS:
: [1] 0.1567988

#+begin_src R
  kWh2kgC <- function(kWh) {
    kWh * .1567988
}
#+end_src

#+RESULTS:

**** Convert Therm to Carbon kg
see https://www.epa.gov/energy/greenhouse-gases-equivalencies-calculator-calculations-and-references
0.1 mmbtu/1 therm × 14.46 kg C/mmbtu

#+begin_src R
.1*14.46
#+end_src

#+RESULTS:
: [1] 1.446

#+begin_src R
  therm2kgC <- function(therms) {
    therms * 1.446
}
#+end_src

#+RESULTS:

#+RESULTS:

#+RESULTS:
**** other

#+begin_src R

  options(asciiType = "org")
  ascii.nowarn.print <- function(x,...) {
                                          #op <- options(warn = -1)
                                          #      on.exit(options(op))

      suppressWarnings(print(ascii(x,...)))

  }


#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(-67.5,-22.5,22.5,67.5)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)



      dist <- round(gDistance(poly, o, byid = T),-1)[,1]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
      })

      angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
      direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }
#+end_src

#+RESULTS:



#+begin_src R
  makeRegionsAroundPolygon_poolSandN <- function(poly, buffer.widths, theta = c(-22.5,22.5)) {
        bc <- gCentroid(poly)
        bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
        bcbd <- sapply(length(bcb):1, function(i) {
            if(i >1) {
                gDifference(bcb[[i]], bcb[[(i-1)]])
            } else {
                bcb[[i]]
            }
        })
        bcb <- do.call(bind, bcbd)

        theta.radians <- theta*pi/180
        r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

        y <- r*sin(theta.radians)
        x <- r*cos(theta.radians)

        x1 <- coordinates(bc)[,1 ] + x
        y1 <- coordinates(bc)[,2] + y

        x2 <- coordinates(bc)[,1 ] - x
        y2 <- coordinates(bc)[,2] - y

        line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

        line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
        proj4string(line) <- crs(poly)


        o <- lapply(1:length(bcb), function(i) {
            lpi <- gIntersection(bcb[i,], line)
            blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
            dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
            disaggregate(dpi)
        })

        o <- do.call(bind, o)


        dist <- round(gDistance(poly, o, byid = T),-1)[,1]
        over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

        direction <- sapply(1:length(o), function(i) {
            diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
            round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
        })

        angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
        closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
        direction <- angles[closest.angles]
        direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
        o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                           distance.from.building = dist,
                                                           over.building = over.building,
                                                           direction = direction))
        o
    }
#+end_src

#+RESULTS:

#+begin_src R
  makeNESWRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(45,-45)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)


      dist <- gDistance(poly, o, byid = T)[,1]
      closest.dist <- sapply(dist, function(d) which(abs(buffer.widths - d) == min(abs(buffer.widths - d))))
      dist <- buffer.widths[closest.dist]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          atan2(diff.coords[1], diff.coords[2]) * 180/pi
      })

      angles <- c(0, 90, 180, -180, -90)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
                                          #    direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
          direction <- mapvalues(direction, from = angles, to = c("s","w","n","n","e"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }

#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygonCentroid <- function(polygon, buffer.widths, theta) {

      bc <- gCentroid(polygon)
      bcb <- sapply(buffer.widths, function(w) gBuffer(bc, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(widths)

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(polygon)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.000001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)
      o
  }
#+end_src


#+RESULTS:
**** poly
#+begin_src R
poly <- readWKT("POLYGON ((300278.6608440399868414 4770541.7102104201912880, 300291.3229938599979505 4770541.7700617099180818, 300291.3943529999814928 4770526.6698510395362973, 300278.7322129899985157 4770526.6100080702453852, 300278.6608440399868414 4770541.7102104201912880))")
poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

  poly <- as(poly, "SpatialPolygonsDataFrame")
poly@data$BUILDINGFO = 0
#+end_src

#+RESULTS:

** Format Dataframes
*** full df
#+begin_src R :session *R:energy*
  build.res.primary.parcels.tree.building <- shapefile("../DD/buildings.w.parcels.energy.propinfo.tree.building.shp")
  colnames(build.res.primary.parcels.tree.building@data) <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.colnames.rds")
  build.res.primary.parcels.tree.building@data <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.data.rds")
#+end_src

#+RESULTS:

#+begin_src R
a <- readRDS("/Users/erker/g/projects/energy/DD/colnames.buildings.w.parcels.energy.propinfo.rds")
colnames(build.res.primary.parcels.tree.building@data)[1:56] <- a
#+end_src

#+RESULTS:

CHange "NA" Garage.1 to "none"
#+begin_src R
build.res.primary.parcels.tree.building@data$Garage.1[is.na(build.res.primary.parcels.tree.building@data$Garage.1)] <- "none"
#+end_src

#+RESULTS:
: Warning message:
: In `[<-.factor`(`*tmp*`, is.na(build.res.primary.parcels.tree.building@data$Garage.1),  :
:   invalid factor level, NA generated

#+begin_src R
  df <- build.res.primary.parcels.tree.building@data

#+end_src

#+RESULTS:

#+begin_src R
      df <- mutate(df,
                   kWh_High_C = kWh2kgC(kWh_High),
                   kWh_Avg_C = kWh2kgC(kWh_Mon_Avg_last12mo),
                   Therms_High_C = therm2kgC(Therms_High),
                   Therms_Avg_C = therm2kgC(Therms_Mon_Avg_last12mo),
                   C_gas_and_elec_avg = kWh_Avg_C + Therms_Avg_C,
                   log_C_gas_and_elec_avg = log(C_gas_and_elec_avg),
                   log_C_elec_high = log(kWh_High_C),
                   log_C_gas_high = log(Therms_High_C),
                   log_C_elec_avg = log(kWh_Avg_C),
                   log_C_gas_avg = log(Therms_Avg_C),
                   log_kWh_High = log(kWh_High),
                   log_Therms_High = log(Therms_High),
                   log_kWh_Avg = log(kWh_Mon_Avg_last12mo),
                   log_Therms_Avg = log(Therms_Mon_Avg_last12mo),
                   log_Cost_gas_and_elec_avg = log(Cost_Therms_Avg + Cost_kWh_Avg))

    build.res.primary.parcels.tree.building@data <- df

    df <-  build.res.primary.parcels.tree.building@data %>% dplyr::filter(Therms_Mon_Avg_last12mo > 10, kWh_Mon_Avg_last12mo > 20, kWh_High > 20, Therms_High > 10)

#+end_src

#+RESULTS:

*** PCA of building covariates

#+begin_src R
  library(dplyr)

  pca.building.covariates <- c("Lot.Size.Sq.Ft",
                                 "Water.Frontage",  "Year.Built",
                               "Stories", "Bedrooms", "Full.Baths", "Half.Baths", "Fireplaces",
                                "First.Floor.Living.Area", "Second.Floor.Living.Area",
                               "Third.Floor.Living.Area", "Finished.Attic",
                               "Finished.Basement", "Total.Basement", "Crawl.Space",
                               "Roof.Replaced.Year",
                               "Garage.Stalls.1", "Garage.Stalls.2",
                                "Current.Year.Improvement.Value.th", "Current.Year.Land.Value.th")

    bc <- df[,pca.building.covariates]
    bc[is.na(bc)] <- "None"
    bc <- bc %>% mutate_if(is.character,as.factor)
    bc <- bc %>% mutate_if(is.factor,as.numeric)

    to.log.transform <- c("Lot.Size.Sq.Ft","First.Floor.Living.Area", "Second.Floor.Living.Area",
                          "Third.Floor.Living.Area", "Finished.Attic", "Finished.Basement",
                          "Total.Basement", "Crawl.Space",
                          "Current.Year.Improvement.Value.th", "Current.Year.Land.Value.th")

    bc[to.log.transform] <- log(df[to.log.transform] + 1)

    outliers <- c(4283, 68, 73)

                                            # make NA's a level in factor
    bc.o <- bc[-outliers,]

    pca <- prcomp(bc.o, scale. = T)

    #plot(pca)
  #biplot(pca)
#+end_src

#+RESULTS:

#+begin_src R
  df <- df[-outliers,]
  df <- df[, -which(names(df) %in% pca.building.covariates)]
  building.pca <- data.frame(pca$x[,1:7])
  colnames(building.pca) <- paste0("building.pca_",1:7)
  df <- bind_cols(df, building.pca)
#+end_src

#+RESULTS:

*** remove useless variables
#+begin_src R
df <- df %>% select(-BUILDINGFO, -SOURCE, -FootprintT, -BuildingUs, -BuildingCl, -Name, -Shape_area, -Shape_len, -Parcel, -Address, -Dwelling.Units, -Above.Third.Floor.Living.Area, -Total.Living.Area)
#+end_src

#+RESULTS:

*** remove a few more not useful covariates
#+begin_src R

  covariates.to.remove <- c("Ward","State.Assembly.District","Home.Style","Above.Third.Floor.Living.Area",
                            "Exterior.Wall.1",  "Exterior.Wall.2",
                            "Foundation","Roof", "Garage.1",
                            "Garage2","Driveway", "Middle.School","High.School")
  df <- df[, -which(names(df) %in% covariates.to.remove)]


#+end_src

#+RESULTS:

*** scale area of trees and builings to be 100m^2 (a 10m x 10m area, say)

#+begin_src R
  df[,grepl(".*_building$",names(df))] <-   df[,grepl(".*_building$",names(df))] / 100
  df[,grepl(".*_tree$",names(df))] <-   df[,grepl(".*_tree$",names(df))] / 100
#+end_src

#+RESULTS:

*** Combine over the building with within 10m of building
#+begin_src R
    df <-  df %>% mutate(ne_0_tree = ne_0_0_tree + ne_0_1_tree,
                            e_0_tree = e_0_0_tree + e_0_1_tree,
                            se_0_tree = se_0_0_tree + se_0_1_tree,
                            s_0_tree = s_0_0_tree + s_0_1_tree,
                            sw_0_tree = sw_0_0_tree + sw_0_1_tree,
                            w_0_tree = w_0_0_tree + w_0_1_tree,
                            nw_0_tree = nw_0_0_tree + nw_0_1_tree,
                         n_0_tree = n_0_0_tree + n_0_1_tree)

    df <- df[, !grepl(".*_0_[01]_tree$",names(df))]
#+end_src

#+RESULTS:

*** rename covariates so I don't have the over building indicator anymore
#+begin_src R
names(df)[1:100] <- str_replace(names(df)[1:100], "(_0_)","_")
#+end_src

#+RESULTS:

*** COMMENT What is a resonable way to combine regions, and then select a single combination?  COME BACK TO THIS MAYBE

#+begin_src R
df.tb <- df[,grep("_[0-9]+_", names(df))]
#+end_src

#+RESULTS:

#+begin_src R
  df.tb<- df.tb %>%
    mutate(row = rownames(df.tb)) %>%
      gather(key, value, -row) %>%
      mutate(direction = str_match(key, "([a-z]+)_.*")[,2],
             distance =  str_match(key, "[a-z]+_([0-9]+)_.*")[,2],
             cover =   str_match(key, "[a-z]+_[0-9]+_([a-z]+)")[,2])
#+end_src

#+RESULTS:

**** Tree PCA
#+begin_src R
df.t <- df[,grep("_[0-9]+_tree", names(df))]
#+end_src

#+RESULTS:

#+begin_src R
pca <-  prcomp(df.t, scale. = T)
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/tree_pca.png
plot(pca)
#+end_src

#+RESULTS:
[[file:../figs/tree_pca.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca1.png
  widths <- c(0,10,20,30,40,50,60)
  out <- makeRegionsAroundPolygon(poly, widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,1])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       unite(dir.dist, direction,distance.from.building) %>%
       mutate(term = paste0(dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC1") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca1.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca2.png
  widths <- c(0,10,20,30,40,50,60)
  out <- makeRegionsAroundPolygon(poly, widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,2])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       unite(dir.dist, direction,distance.from.building) %>%
       mutate(term = paste0(dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC2") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca2.png]]

I just had a thought too that the axis between positive and negative values for pc2 and pc3 is angled off of NS / EW.  I wonder if this is due to the isthmus grid.

#+begin_src R :exports results :results graphics :file ../figs/tree_pca3.png
  widths <- c(0,10,20,30,40,50,60)
  out <- makeRegionsAroundPolygon(poly, widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,3])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       unite(dir.dist, direction,distance.from.building) %>%
       mutate(term = paste0(dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC3") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca3.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca4.png
  widths <- c(0,10,20,30,40,50,60)
  out <- makeRegionsAroundPolygon(poly, widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,4])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       unite(dir.dist, direction,distance.from.building) %>%
       mutate(term = paste0(dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC4") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca4.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca5.png
  widths <- c(0,10,20,30,40,50,60)
  out <- makeRegionsAroundPolygon(poly, widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,5])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       unite(dir.dist, direction,distance.from.building) %>%
       mutate(term = paste0(dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC5") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca5.png]]


#+begin_src R :exports results :results graphics :file ../figs/tree_pca6.png
  widths <- c(0,10,20,30,40,50,60)
  out <- makeRegionsAroundPolygon(poly, widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,6])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       unite(dir.dist, direction,distance.from.building) %>%
       mutate(term = paste0(dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC6") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca6.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca7.png
  widths <- c(0,10,20,30,40,50,60)
  out <- makeRegionsAroundPolygon(poly, widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,7])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       unite(dir.dist, direction,distance.from.building) %>%
       mutate(term = paste0(dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC7") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca7.png]]

*** How to aggregate.

What about a constraint that those out any models for which adjacent
regions have opposite and statistically significant results.
Basically those for which multicollinearity is messing up things and
which reasonable laws of nature (that things next to one another are
similar) are being broken.

*** create the aggregate of all south regions, all north regions, then east and west

ne, nw, and n get pooled into north.  se, sw, and s get pooled into south.

#+begin_src R

  df$e_near_tree <- rowSums(df[,grepl("^e_(0|10)_tree", names(df))])
  df$s_near_tree <- rowSums(df[,grepl("^s[ew]*_(0|10)_tree", names(df))])
  df$w_near_tree <- rowSums(df[,grepl("^w_(0|10)_tree", names(df))])
  df$n_near_tree <- rowSums(df[,grepl("^n[ew]*_(0|10)_tree", names(df))])

  df$e_near_building <- rowSums(df[,grepl("^e_(0|10)_building", names(df))])
  df$s_near_building <- rowSums(df[,grepl("^s[ew]*_(0|10)_building", names(df))])
  df$w_near_building <- rowSums(df[,grepl("^w_(0|10)_building", names(df))])
  df$n_near_building <- rowSums(df[,grepl("^n[ew]*_(0|10)_building", names(df))])

  df$e_far_tree <- rowSums(df[,grepl("^e_(20|30|40|50)_tree", names(df))])
  df$s_far_tree <- rowSums(df[,grepl("^s[ew]*_(20|30|40|50)_tree", names(df))])
  df$w_far_tree <- rowSums(df[,grepl("^w_(20|30|40|50)_tree", names(df))])
  df$n_far_tree <- rowSums(df[,grepl("^n[ew]*_(20|30|40|50)_tree", names(df))])

  df$e_far_building <- rowSums(df[,grepl("^e_(20|30|40|50)_building", names(df))])
  df$s_far_building <- rowSums(df[,grepl("^s[ew]*_(20|30|40|50)_building", names(df))])
  df$w_far_building <- rowSums(df[,grepl("^w_(20|30|40|50)_building", names(df))])
  df$n_far_building <- rowSums(df[,grepl("^n[ew]*_(20|30|40|50)_building", names(df))])

#+end_src

#+RESULTS:

*** Covariates
#+begin_src R

        covariates.30less <- c("Electric_for_Heating", "Elementary.School",
        "Central.Air", "e_0_tree","n_0_tree","ne_0_tree","nw_0_tree","s_0_tree",
        "se_0_tree", "sw_0_tree",  "w_0_tree", "e_10_tree", "n_10_tree", "ne_10_tree",
        "nw_10_tree", "s_10_tree", "se_10_tree", "sw_10_tree",
        "w_10_tree", "e_20_tree", "n_20_tree", "ne_20_tree",
        "nw_20_tree", "s_20_tree", "se_20_tree", "sw_20_tree",
        "w_20_tree", "e_0_building", "n_0_building", "ne_0_building", "nw_0_building",
        "s_0_building","se_0_building", "sw_0_building", "w_0_building",
        "e_10_building", "n_10_building", "ne_10_building",
        "nw_10_building", "s_10_building", "se_10_building", "sw_10_building",
        "w_10_building", "e_20_building", "n_20_building", "ne_20_building",
        "nw_20_building", "s_20_building", "se_20_building", "sw_20_building",
        "w_20_building","building.pca_1", "building.pca_2", "building.pca_3",
        "building.pca_4", "building.pca_5", "building.pca_6", "building.pca_7")

      covariates.less20 <- c("Electric_for_Heating", "Elementary.School",
        "Central.Air", "e_0_tree","n_0_tree","ne_0_tree","nw_0_tree","s_0_tree",
        "se_0_tree", "sw_0_tree",  "w_0_tree", "e_10_tree", "n_10_tree", "ne_10_tree",
        "nw_10_tree", "s_10_tree", "se_10_tree", "sw_10_tree",
        "w_10_tree", "e_0_building", "n_0_building", "ne_0_building", "nw_0_building",
        "s_0_building","se_0_building", "sw_0_building", "w_0_building",
        "e_10_building", "n_10_building", "ne_10_building",
        "nw_10_building", "s_10_building", "se_10_building", "sw_10_building",
        "w_10_building", "building.pca_1", "building.pca_2", "building.pca_3",
        "building.pca_4", "building.pca_5", "building.pca_6", "building.pca_7")

    covariates.20andmore <- c("Electric_for_Heating", "Elementary.School",
                              "Central.Air", "e_20_tree", "e_30_tree",
                              "e_40_tree", "e_50_tree","n_20_tree",
                              "n_30_tree", "n_40_tree", "n_50_tree",
                              "ne_20_tree", "ne_30_tree", "ne_40_tree",
                              "ne_50_tree",  "nw_20_tree", "nw_30_tree",
                              "nw_40_tree", "nw_50_tree", "s_20_tree",
                              "s_30_tree", "s_40_tree", "s_50_tree",
                              "se_20_tree", "se_30_tree", "se_40_tree",
                              "se_50_tree", "sw_20_tree", "sw_30_tree",
                              "sw_40_tree", "sw_50_tree", "w_20_tree",
                              "w_30_tree", "w_40_tree", "w_50_tree",
                              "e_20_building", "e_30_building",
                              "e_40_building", "e_50_building",
                              "n_20_building", "n_30_building",
                              "n_40_building", "n_50_building",
                              "ne_20_building", "ne_30_building",
                              "ne_40_building", "ne_50_building",
                              "nw_20_building", "nw_30_building",
                              "nw_40_building", "nw_50_building",
                              "s_20_building", "s_30_building",
                              "s_40_building", "s_50_building",
                              "se_20_building", "se_30_building",
                              "se_40_building", "se_50_building",
                              "sw_20_building", "sw_30_building",
                              "sw_40_building", "sw_50_building",
                              "w_20_building", "w_30_building",
                              "w_40_building", "w_50_building",
                              "building.pca_1", "building.pca_2",
                              "building.pca_3", "building.pca_4",
                              "building.pca_5", "building.pca_6",
                              "building.pca_7")

  aggregated.covariates <- c("Electric_for_Heating",
                      "Elementary.School", "Central.Air", "e_near_tree",
                      "s_near_tree", "w_near_tree", "n_near_tree",
                      "e_near_building", "s_near_building",
                      "w_near_building", "n_near_building",
                      "e_far_tree", "s_far_tree", "w_far_tree",
                      "n_far_tree", "e_far_building", "s_far_building",
                      "w_far_building", "n_far_building",
                      "building.pca_1", "building.pca_2",
                      "building.pca_3", "building.pca_4",
                      "building.pca_5", "building.pca_6",
                      "building.pca_7")

      covariates <- c("Electric_for_Heating", "Elementary.School",
                      "Central.Air", "e_10_tree", "e_20_tree", "e_30_tree",
                      "e_40_tree", "e_50_tree", "n_10_tree", "n_20_tree",
                      "n_30_tree", "n_40_tree", "n_50_tree", "ne_10_tree",
                      "ne_20_tree", "ne_30_tree", "ne_40_tree",
                      "ne_50_tree", "nw_10_tree", "nw_20_tree",
                      "nw_30_tree", "nw_40_tree", "nw_50_tree", "s_10_tree",
                      "s_20_tree", "s_30_tree", "s_40_tree", "s_50_tree",
                      "se_10_tree", "se_20_tree", "se_30_tree",
                      "se_40_tree", "se_50_tree", "sw_10_tree",
                      "sw_20_tree", "sw_30_tree", "sw_40_tree",
                      "sw_50_tree", "w_10_tree", "w_20_tree", "w_30_tree",
                      "w_40_tree", "w_50_tree", "e_0_building",
                      "e_10_building", "e_20_building", "e_30_building",
                      "e_40_building", "e_50_building", "n_0_building",
                      "n_10_building", "n_20_building", "n_30_building",
                      "n_40_building", "n_50_building", "ne_0_building",
                      "ne_10_building", "ne_20_building", "ne_30_building",
                      "ne_40_building", "ne_50_building", "nw_0_building",
                      "nw_10_building", "nw_20_building", "nw_30_building",
                      "nw_40_building", "nw_50_building", "s_0_building",
                      "s_10_building", "s_20_building", "s_30_building",
                      "s_40_building", "s_50_building", "se_0_building",
                      "se_10_building", "se_20_building", "se_30_building",
                      "se_40_building", "se_50_building", "sw_0_building",
                      "sw_10_building", "sw_20_building", "sw_30_building",
                      "sw_40_building", "sw_50_building", "w_0_building",
                      "w_10_building", "w_20_building", "w_30_building",
                      "w_40_building", "w_50_building", "building.pca_1",
                      "building.pca_2", "building.pca_3", "building.pca_4",
                      "building.pca_5", "building.pca_6", "building.pca_7",
                      "ne_0_tree", "e_0_tree", "se_0_tree", "s_0_tree",
                      "sw_0_tree", "w_0_tree", "nw_0_tree", "n_0_tree")
#+end_src

#+RESULTS:


*** kwh high
#+begin_src R
  to.select <- c("log_kWh_High", aggregated.covariates)

  df.f.kWh_High <-  dplyr::select(df, to.select) %>%
      filter(Electric_for_Heating == "No") %>%
      select(-Electric_for_Heating) %>%
      filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
      unclass %>%
      as.data.frame

#+end_src

#+RESULTS:

*** kwh avg
#+begin_src R
to.select <- c("log_kWh_Avg", aggregated.covariates)

  df.f.kWh_Avg <-  select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame
#+end_src

#+RESULTS:
*** therms high

#+begin_src R
to.select <- c("log_Therms_High", aggregated.covariates)

  df.f.Therms_High <-  select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:
*** therms avg

#+begin_src R
to.select <- c("log_Therms_Avg", aggregated.covariates)

  df.f.Therms_Avg <-  select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:

*** C Average Log
#+begin_src R
  to.select <- c("log_C_gas_and_elec_avg", aggregated.covariates)

  df.C.avg <- select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:

*** Gas Avg C Log
#+begin_src R
to.select <- c("log_C_gas_avg", aggregated.covariates)

  df.C.gas.avg <-  select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:

*** Elec Avg C Log
#+begin_src R

  to.select <- c("log_C_elec_avg", aggregated.covariates)

  df.C.elec.avg <- select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:

*** Cost Avg Log
#+begin_src R

  to.select <- c("log_Cost_gas_and_elec_avg", aggregated.covariates)

  df.cost.avg <- select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:



** Plots
#+begin_src R
library(GGally)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/histograms.png
  log.resp <- select(df, log_C_gas_and_elec_avg, log_C_elec_high, log_C_gas_high, log_C_elec_avg, log_C_gas_avg)
  log.resp <- gather(log.resp)
  ggplot(log.resp, aes(x = value)) + geom_histogram(binwidth = .1) + facet_wrap(~key, scales = "free")
#+end_src

#+RESULTS:
[[file:../figs/histograms.png]]



#+begin_src R :exports results :results graphics :file ../figs/duo.png :width 8000 :height 600
  df.s <- sample_n(df, 28000)
  ggduo(df.s, 57:112, c(174,175,176),  types = list(
       continuous = wrap("smooth_lm", alpha = 0.05,colour = "blue"))) +
      ggplot2::theme(text = ggplot2::element_text(size = 14),
                     axis.text.x = ggplot2::element_blank())

#+end_src

#+RESULTS:
[[file:../figs/duo.png]]

#+begin_src R :exports results :results graphics :file ../figs/figure_problem_with_nw_0_1.png
ggplot(df.s, aes(x = nw_0_1_tree, y = log_C_elec_high)) + geom_point() + geom_smooth()
#+end_src

#+RESULTS:
[[file:../figs/figure_problem_with_nw_0_1.png]]

#+begin_src R :exports results :results graphics :file ../figs/duo2.png :width 8000 :height 600
  ggduo(df.s, 57:112, c(177,178),  types = list(
       continuous = wrap("smooth_lm", alpha = 0.1, colour = "blue"))) +
      ggplot2::theme(text = ggplot2::element_text(size = 14),
                     axis.text.x = ggplot2::element_blank())

#+end_src

#+RESULTS:
[[file:../figs/duo2.png]]


#+begin_src R :exports results :results graphics :file ../figs/canopy_pairs.png
    ggscatmat(df.s, columns = 54:65)
#+end_src

#+begin_src R :exports results :results graphics :file ../figs/canopy_pairs.png
#  ggpairs(df.s, columns = 54:65, lower = list(continuous = wrap("points",alpha = .1)))
#+end_src

#+RESULTS:
[[file:../figs/canopy_pairs.png]]

** Fit Models
*** kwh high
#+begin_src R
  kwh.high.lmer.log <- lmer(log_kWh_High ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.f.kWh_High)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(kwh.high.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.46 | -18073.33 | 36198.65 | 36412.92 | 35896.62 |    28010.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.high.lmer.log), digits = 4)
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |   6.8030 |    0.0160 |  426.3432 | fixed             |
|  2 | building.pca_1                   |   0.0937 |    0.0016 |   57.1601 | fixed             |
|  3 | building.pca_2                   |  -0.0117 |    0.0023 |   -5.1603 | fixed             |
|  4 | building.pca_3                   |  -0.0056 |    0.0027 |   -2.1062 | fixed             |
|  5 | building.pca_4                   |  -0.0224 |    0.0030 |   -7.5064 | fixed             |
|  6 | building.pca_5                   |   0.0062 |    0.0028 |    2.2010 | fixed             |
|  7 | building.pca_6                   |  -0.0048 |    0.0028 |   -1.7431 | fixed             |
|  8 | building.pca_7                   |   0.0085 |    0.0028 |    3.0724 | fixed             |
|  9 | e_near_tree                      |  -0.0081 |    0.0039 |   -2.0766 | fixed             |
| 10 | s_near_tree                      |  -0.0046 |    0.0017 |   -2.6915 | fixed             |
| 11 | w_near_tree                      |  -0.0125 |    0.0040 |   -3.1618 | fixed             |
| 12 | n_near_tree                      |  -0.0002 |    0.0017 |   -0.1210 | fixed             |
| 13 | e_far_tree                       |   0.0013 |    0.0011 |    1.2050 | fixed             |
| 14 | s_far_tree                       |   0.0003 |    0.0005 |    0.6539 | fixed             |
| 15 | w_far_tree                       |   0.0002 |    0.0011 |    0.1491 | fixed             |
| 16 | n_far_tree                       |  -0.0005 |    0.0005 |   -1.0798 | fixed             |
| 17 | e_near_building                  |  -0.0055 |    0.0064 |   -0.8653 | fixed             |
| 18 | s_near_building                  |  -0.0076 |    0.0049 |   -1.5560 | fixed             |
| 19 | w_near_building                  |  -0.0037 |    0.0064 |   -0.5783 | fixed             |
| 20 | n_near_building                  |   0.0045 |    0.0049 |    0.9162 | fixed             |
| 21 | e_far_building                   |  -0.0005 |    0.0024 |   -0.2070 | fixed             |
| 22 | s_far_building                   |  -0.0026 |    0.0012 |   -2.1973 | fixed             |
| 23 | w_far_building                   |  -0.0026 |    0.0023 |   -1.1243 | fixed             |
| 24 | n_far_building                   |  -0.0025 |    0.0012 |   -2.1348 | fixed             |
| 25 | sd_(Intercept).Elementary.School |   0.0441 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |   0.4587 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/kwh_high_resid.png
  dt <- broomify(kwh.high.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/kwh_high_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/kwh_high_coef_circle.png
    widths <- c(0,20,60)

    out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

    dt <- tidy(kwh.high.lmer.log)

    dt <- filter(dt, grepl("_tree",term)) %>%
        select(-group)

  dsig <- dt %>%
      mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .05, "*", NA),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
             lat = c(31, 20, 31, 65, 31, -20, 31, 80),
             long = c(105, 85, 65, 85, 135, 85, 75, 85),
             group = NA)

            #Unite and join the coefficients to the sp, then fortify
    out <- as(out, "SpatialPolygonsDataFrame")

    ## o.df <- out@data %>%
    ##     unite(dir.dist, direction,distance.from.building) %>%
    ##     mutate(term = paste0(dir.dist,"_tree"),
    ##            id = 1:nrow(out@data))

    o.df <- out@data %>%
        mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
               id = 1:nrow(out@data))


    o.df <- left_join(o.df, dt)

    out@data <- o.df

    o.df <- ggplot2::fortify(out)

    o.df <- join(o.df,out@data)

kwh.high.df <- o.df

  ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
      geom_polygon() +
      geom_path() +
            coord_equal() +
      ggtitle("Coefficients for effect of canopy cover on log of high kWh use") +
      geom_text(data = dsig, aes(label = sig), size = 9) +
            theme(axis.text.y = element_blank(),
                  axis.text.x = element_blank(),
                  axis.ticks.y = element_blank(),
                  axis.ticks.x = element_blank(),
                  axis.title = element_blank()) +
            scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
          theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/kwh_high_coef_circle.png]]

*** kWh avg
#+begin_src R
  kwh.avg.lmer.log <- lmer(log_kWh_Avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.f.kWh_Avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(kwh.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.45 | -17554.89 | 35161.78 | 35376.12 | 34859.03 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     6.37 |      0.02 |    386.74 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     58.30 | fixed             |
|  3 | building.pca_2                   |    -0.02 |      0.00 |     -6.83 | fixed             |
|  4 | building.pca_3                   |    -0.01 |      0.00 |     -4.13 | fixed             |
|  5 | building.pca_4                   |    -0.02 |      0.00 |     -6.82 | fixed             |
|  6 | building.pca_5                   |     0.01 |      0.00 |      2.59 | fixed             |
|  7 | building.pca_6                   |    -0.01 |      0.00 |     -2.49 | fixed             |
|  8 | building.pca_7                   |     0.01 |      0.00 |      3.38 | fixed             |
|  9 | e_near_tree                      |    -0.00 |      0.00 |     -0.48 | fixed             |
| 10 | s_near_tree                      |    -0.00 |      0.00 |     -1.46 | fixed             |
| 11 | w_near_tree                      |    -0.01 |      0.00 |     -1.85 | fixed             |
| 12 | n_near_tree                      |    -0.00 |      0.00 |     -0.30 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      0.15 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      0.33 | fixed             |
| 15 | w_far_tree                       |    -0.00 |      0.00 |     -0.03 | fixed             |
| 16 | n_far_tree                       |    -0.00 |      0.00 |     -0.18 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.01 |     -0.55 | fixed             |
| 18 | s_near_building                  |    -0.01 |      0.00 |     -1.42 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.01 |     -0.56 | fixed             |
| 20 | n_near_building                  |     0.01 |      0.00 |      1.37 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -0.88 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -1.99 | fixed             |
| 23 | w_far_building                   |    -0.00 |      0.00 |     -0.83 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -1.68 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.45 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/kwh_avg_resid.png
  dt <- broomify(kwh.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/kwh_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/kwh_avg_coef_circle.png
    widths <- c(0,20,60)

    out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

    dt <- tidy(kwh.avg.lmer.log)

    dt <- filter(dt, grepl("_tree",term)) %>%
        select(-group)

  dsig <- dt %>%
      mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
             lat = c(31, 20, 31, 65, 31, -20, 31, 80),
             long = c(105, 85, 65, 85, 135, 85, 75, 85),
             group = NA)

            #Unite and join the coefficients to the sp, then fortify
    out <- as(out, "SpatialPolygonsDataFrame")

    ## o.df <- out@data %>%
    ##     unite(dir.dist, direction,distance.from.building) %>%
    ##     mutate(term = paste0(dir.dist,"_tree"),
    ##            id = 1:nrow(out@data))

    o.df <- out@data %>%
        mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
               id = 1:nrow(out@data))


    o.df <- left_join(o.df, dt)

    out@data <- o.df

    o.df <- ggplot2::fortify(out)

    o.df <- join(o.df,out@data)

kwh.avg.df <- o.df

  ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
      geom_polygon() +
      geom_path() +
            coord_equal() +
      ggtitle("Coefficients for effect of canopy cover on log of avg kWh use") +
      geom_text(data = dsig, aes(label = sig), size = 9) +
            theme(axis.text.y = element_blank(),
                  axis.text.x = element_blank(),
                  axis.ticks.y = element_blank(),
                  axis.ticks.x = element_blank(),
                  axis.title = element_blank()) +
            scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
          theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/kwh_avg_coef_circle.png]]
*** therms high
#+begin_src R
  therms.high.lmer.log <- lmer(log_Therms_High ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.f.Therms_High)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(therms.high.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.29 | -5064.06 | 10180.12 | 10394.47 |  9857.33 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(therms.high.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     4.81 |      0.01 |    324.88 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     85.04 | fixed             |
|  3 | building.pca_2                   |     0.04 |      0.00 |     24.91 | fixed             |
|  4 | building.pca_3                   |     0.04 |      0.00 |     25.86 | fixed             |
|  5 | building.pca_4                   |    -0.05 |      0.00 |    -28.13 | fixed             |
|  6 | building.pca_5                   |    -0.01 |      0.00 |     -7.35 | fixed             |
|  7 | building.pca_6                   |    -0.02 |      0.00 |    -11.20 | fixed             |
|  8 | building.pca_7                   |    -0.00 |      0.00 |     -0.02 | fixed             |
|  9 | e_near_tree                      |     0.01 |      0.00 |      2.29 | fixed             |
| 10 | s_near_tree                      |     0.01 |      0.00 |      6.70 | fixed             |
| 11 | w_near_tree                      |     0.00 |      0.00 |      1.35 | fixed             |
| 12 | n_near_tree                      |     0.01 |      0.00 |      6.07 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      2.99 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      4.64 | fixed             |
| 15 | w_far_tree                       |     0.00 |      0.00 |      0.56 | fixed             |
| 16 | n_far_tree                       |     0.00 |      0.00 |      2.01 | fixed             |
| 17 | e_near_building                  |    -0.01 |      0.00 |     -1.99 | fixed             |
| 18 | s_near_building                  |    -0.00 |      0.00 |     -0.10 | fixed             |
| 19 | w_near_building                  |    -0.01 |      0.00 |     -1.82 | fixed             |
| 20 | n_near_building                  |    -0.01 |      0.00 |     -4.29 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -1.53 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -0.90 | fixed             |
| 23 | w_far_building                   |     0.00 |      0.00 |      2.64 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -2.46 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.06 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.29 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/therms_high_resid.png
  dt <- broomify(therms.high.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/therms_high_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/therms_high_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(therms.high.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

therms.high.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of high Therms use") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/therms_high_coef_circle.png]]

*** therms avg
#+begin_src R
  therms.avg.lmer.log <- lmer(log_Therms_Avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.f.Therms_Avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(therms.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.30 | -6048.47 | 12148.94 | 12363.29 | 11827.53 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(therms.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     3.91 |      0.01 |    280.52 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     83.08 | fixed             |
|  3 | building.pca_2                   |     0.03 |      0.00 |     17.85 | fixed             |
|  4 | building.pca_3                   |     0.04 |      0.00 |     21.88 | fixed             |
|  5 | building.pca_4                   |    -0.05 |      0.00 |    -25.78 | fixed             |
|  6 | building.pca_5                   |    -0.01 |      0.00 |     -6.73 | fixed             |
|  7 | building.pca_6                   |    -0.02 |      0.00 |     -9.93 | fixed             |
|  8 | building.pca_7                   |    -0.00 |      0.00 |     -0.69 | fixed             |
|  9 | e_near_tree                      |     0.01 |      0.00 |      2.52 | fixed             |
| 10 | s_near_tree                      |     0.01 |      0.00 |      7.04 | fixed             |
| 11 | w_near_tree                      |     0.01 |      0.00 |      1.96 | fixed             |
| 12 | n_near_tree                      |     0.00 |      0.00 |      3.75 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      1.93 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      2.72 | fixed             |
| 15 | w_far_tree                       |     0.00 |      0.00 |      0.36 | fixed             |
| 16 | n_far_tree                       |     0.00 |      0.00 |      1.12 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.00 |     -0.78 | fixed             |
| 18 | s_near_building                  |     0.00 |      0.00 |      0.25 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.00 |     -0.90 | fixed             |
| 20 | n_near_building                  |    -0.01 |      0.00 |     -3.52 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -1.49 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -0.01 | fixed             |
| 23 | w_far_building                   |     0.00 |      0.00 |      2.78 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -0.90 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.30 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/therms_avg_resid.png
  dt <- broomify(therms.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/therms_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/therms_avg_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(therms.avg.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

therms.avg.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg Therms use") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/therms_avg_coef_circle.png]]

*** kg C
**** log avg kg C from gas and elec combined
#+begin_src R
  notree.C.avg.lmer.log <- lmer(log_C_gas_and_elec_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.C.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(notree.C.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.29 | -5138.16 | 10312.32 | 10460.71 | 10103.42 |    28098.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(notree.C.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     5.17 |      0.01 |    688.75 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     91.89 | fixed             |
|  3 | building.pca_2                   |     0.01 |      0.00 |      4.11 | fixed             |
|  4 | building.pca_3                   |     0.02 |      0.00 |     10.81 | fixed             |
|  5 | building.pca_4                   |    -0.04 |      0.00 |    -20.81 | fixed             |
|  6 | building.pca_5                   |    -0.00 |      0.00 |     -2.03 | fixed             |
|  7 | building.pca_6                   |    -0.01 |      0.00 |     -6.66 | fixed             |
|  8 | building.pca_7                   |     0.00 |      0.00 |      2.04 | fixed             |
|  9 | e_near_building                  |    -0.00 |      0.00 |     -0.98 | fixed             |
| 10 | s_near_building                  |    -0.00 |      0.00 |     -1.46 | fixed             |
| 11 | w_near_building                  |    -0.00 |      0.00 |     -0.99 | fixed             |
| 12 | n_near_building                  |    -0.00 |      0.00 |     -0.98 | fixed             |
| 13 | e_far_building                   |    -0.00 |      0.00 |     -1.50 | fixed             |
| 14 | s_far_building                   |    -0.00 |      0.00 |     -1.97 | fixed             |
| 15 | w_far_building                   |     0.00 |      0.00 |      0.50 | fixed             |
| 16 | n_far_building                   |    -0.00 |      0.00 |     -1.61 | fixed             |
| 17 | sd_(Intercept).Elementary.School |     0.03 |           |           | Elementary.School |
| 18 | sd_Observation.Residual          |     0.29 |           |           | Residual          |
#+END_SRC

#+begin_src R
  C.avg.lmer.log <- lmer(log_C_gas_and_elec_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.C.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.29 | -5169.30 | 10390.59 | 10604.94 | 10066.23 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.avg.lmer.log), digits = 6)
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             |  estimate | std.error |  statistic | group             |
|----+----------------------------------+-----------+-----------+------------+-------------------|
|  1 | (Intercept)                      |  5.135819 |  0.009866 | 520.569015 | fixed             |
|  2 | building.pca_1                   |  0.090132 |  0.001030 |  87.530057 | fixed             |
|  3 | building.pca_2                   |  0.006403 |  0.001415 |   4.525660 | fixed             |
|  4 | building.pca_3                   |  0.015362 |  0.001676 |   9.165896 | fixed             |
|  5 | building.pca_4                   | -0.036487 |  0.001877 | -19.434928 | fixed             |
|  6 | building.pca_5                   | -0.002291 |  0.001766 |  -1.297510 | fixed             |
|  7 | building.pca_6                   | -0.010718 |  0.001746 |  -6.139388 | fixed             |
|  8 | building.pca_7                   |  0.003912 |  0.001740 |   2.248161 | fixed             |
|  9 | e_near_tree                      |  0.001725 |  0.002463 |   0.700469 | fixed             |
| 10 | s_near_tree                      |  0.002494 |  0.001081 |   2.307301 | fixed             |
| 11 | w_near_tree                      | -0.000792 |  0.002497 |  -0.317044 | fixed             |
| 12 | n_near_tree                      |  0.001885 |  0.001092 |   1.725603 | fixed             |
| 13 | e_far_tree                       |  0.000778 |  0.000670 |   1.161266 | fixed             |
| 14 | s_far_tree                       |  0.000450 |  0.000293 |   1.535271 | fixed             |
| 15 | w_far_tree                       |  0.000111 |  0.000668 |   0.165876 | fixed             |
| 16 | n_far_tree                       | -0.000087 |  0.000300 |  -0.289242 | fixed             |
| 17 | e_near_building                  | -0.003562 |  0.004026 |  -0.884701 | fixed             |
| 18 | s_near_building                  | -0.003338 |  0.003078 |  -1.084541 | fixed             |
| 19 | w_near_building                  | -0.004145 |  0.004009 |  -1.033823 | fixed             |
| 20 | n_near_building                  | -0.001865 |  0.003073 |  -0.606894 | fixed             |
| 21 | e_far_building                   | -0.002256 |  0.001484 |  -1.519637 | fixed             |
| 22 | s_far_building                   | -0.001485 |  0.000732 |  -2.027760 | fixed             |
| 23 | w_far_building                   |  0.000580 |  0.001478 |   0.392357 | fixed             |
| 24 | n_far_building                   | -0.001328 |  0.000739 |  -1.797066 | fixed             |
| 25 | sd_(Intercept).Elementary.School |  0.026152 |           |            | Elementary.School |
| 26 | sd_Observation.Residual          |  0.289242 |           |            | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/C_avg_resid.png
  dt <- broomify(C.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/C_avg_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(C.avg.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

carbon.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg C from gas and elec") +
        geom_text(data = dsig, aes(label = sig), size = 14) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/C_avg_coef_circle.png]]

**** log avg kg C from gas
#+begin_src R
  C.gas.lmer.log <- lmer(log_C_gas_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.C.gas.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.gas.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.30 | -6048.47 | 12148.94 | 12363.29 | 11827.53 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.gas.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     4.28 |      0.01 |    306.99 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     83.08 | fixed             |
|  3 | building.pca_2                   |     0.03 |      0.00 |     17.85 | fixed             |
|  4 | building.pca_3                   |     0.04 |      0.00 |     21.88 | fixed             |
|  5 | building.pca_4                   |    -0.05 |      0.00 |    -25.78 | fixed             |
|  6 | building.pca_5                   |    -0.01 |      0.00 |     -6.73 | fixed             |
|  7 | building.pca_6                   |    -0.02 |      0.00 |     -9.93 | fixed             |
|  8 | building.pca_7                   |    -0.00 |      0.00 |     -0.69 | fixed             |
|  9 | e_near_tree                      |     0.01 |      0.00 |      2.52 | fixed             |
| 10 | s_near_tree                      |     0.01 |      0.00 |      7.04 | fixed             |
| 11 | w_near_tree                      |     0.01 |      0.00 |      1.96 | fixed             |
| 12 | n_near_tree                      |     0.00 |      0.00 |      3.75 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      1.93 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      2.72 | fixed             |
| 15 | w_far_tree                       |     0.00 |      0.00 |      0.36 | fixed             |
| 16 | n_far_tree                       |     0.00 |      0.00 |      1.12 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.00 |     -0.78 | fixed             |
| 18 | s_near_building                  |     0.00 |      0.00 |      0.25 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.00 |     -0.90 | fixed             |
| 20 | n_near_building                  |    -0.01 |      0.00 |     -3.52 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -1.49 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -0.01 | fixed             |
| 23 | w_far_building                   |     0.00 |      0.00 |      2.78 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -0.90 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.30 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/C_gas_resid.png
  dt <- broomify(C.gas.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_gas_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/C_gas_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(C.gas.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)


    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg C from gas") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/C_gas_coef_circle.png]]

**** log avg kg C from elec
#+begin_src R
  C.elec.lmer.log <- lmer(log_C_elec_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.C.elec.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.elec.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.45 | -17554.89 | 35161.78 | 35376.12 | 34859.03 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.elec.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     4.52 |      0.02 |    274.32 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     58.30 | fixed             |
|  3 | building.pca_2                   |    -0.02 |      0.00 |     -6.83 | fixed             |
|  4 | building.pca_3                   |    -0.01 |      0.00 |     -4.13 | fixed             |
|  5 | building.pca_4                   |    -0.02 |      0.00 |     -6.82 | fixed             |
|  6 | building.pca_5                   |     0.01 |      0.00 |      2.59 | fixed             |
|  7 | building.pca_6                   |    -0.01 |      0.00 |     -2.49 | fixed             |
|  8 | building.pca_7                   |     0.01 |      0.00 |      3.38 | fixed             |
|  9 | e_near_tree                      |    -0.00 |      0.00 |     -0.48 | fixed             |
| 10 | s_near_tree                      |    -0.00 |      0.00 |     -1.46 | fixed             |
| 11 | w_near_tree                      |    -0.01 |      0.00 |     -1.85 | fixed             |
| 12 | n_near_tree                      |    -0.00 |      0.00 |     -0.30 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      0.15 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      0.33 | fixed             |
| 15 | w_far_tree                       |    -0.00 |      0.00 |     -0.03 | fixed             |
| 16 | n_far_tree                       |    -0.00 |      0.00 |     -0.18 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.01 |     -0.55 | fixed             |
| 18 | s_near_building                  |    -0.01 |      0.00 |     -1.42 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.01 |     -0.56 | fixed             |
| 20 | n_near_building                  |     0.01 |      0.00 |      1.37 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -0.88 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -1.99 | fixed             |
| 23 | w_far_building                   |    -0.00 |      0.00 |     -0.83 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -1.68 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.45 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/C_elec_resid.png
  dt <- broomify(C.elec.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_elec_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/C_elec_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(C.elec.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)


    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg C from elec") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/C_elec_coef_circle.png]]

*** Cost dollars
#+begin_src R
  cost.lmer.log <- lmer(log_Cost_gas_and_elec_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.cost.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(cost.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma | logLik |   AIC |    BIC | deviance | df.residual |
|---+-------+--------+-------+--------+----------+-------------|
| 1 |  0.24 |  10.81 | 30.38 | 244.72 |  -302.98 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(cost.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     5.02 |      0.01 |    623.04 | fixed             |
|  2 | building.pca_1                   |     0.06 |      0.00 |     75.89 | fixed             |
|  3 | building.pca_2                   |    -0.00 |      0.00 |     -0.45 | fixed             |
|  4 | building.pca_3                   |     0.00 |      0.00 |      3.35 | fixed             |
|  5 | building.pca_4                   |    -0.02 |      0.00 |    -13.53 | fixed             |
|  6 | building.pca_5                   |     0.00 |      0.00 |      0.87 | fixed             |
|  7 | building.pca_6                   |    -0.01 |      0.00 |     -4.26 | fixed             |
|  8 | building.pca_7                   |     0.00 |      0.00 |      2.85 | fixed             |
|  9 | e_near_tree                      |     0.00 |      0.00 |      0.18 | fixed             |
| 10 | s_near_tree                      |    -0.00 |      0.00 |     -0.05 | fixed             |
| 11 | w_near_tree                      |    -0.00 |      0.00 |     -1.07 | fixed             |
| 12 | n_near_tree                      |     0.00 |      0.00 |      0.74 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      0.70 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      1.60 | fixed             |
| 15 | w_far_tree                       |     0.00 |      0.00 |      0.07 | fixed             |
| 16 | n_far_tree                       |    -0.00 |      0.00 |     -0.01 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.00 |     -1.06 | fixed             |
| 18 | s_near_building                  |    -0.00 |      0.00 |     -1.78 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.00 |     -0.97 | fixed             |
| 20 | n_near_building                  |     0.00 |      0.00 |      0.20 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -1.44 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -2.07 | fixed             |
| 23 | w_far_building                   |    -0.00 |      0.00 |     -0.38 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -1.80 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.02 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.24 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/cost_avg_resid.png
  dt <- broomify(cost.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/cost_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/cost_avg_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(cost.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

cost.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on average cost") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/cost_avg_coef_circle.png]]

** Plot Coefficients from all models

because I don't want to have "significance" on my plots.

on y axis are the different tree coeffienets, grouped by near and far

on x axis is effect.

poits with the standard error for error bars

panels:
2x2
kwh high
kwh avg
gas high
gas avg

#+begin_src R
  a <- tidy(kwh.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")
  b <- tidy(kwh.high.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.high")
  c <- tidy(therms.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "therms.avg")
  d <- tidy(therms.high.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "therms.high")

  tree.coef <- bind_rows(a,b,c,d)

  tree.coef <- tree.coef %>% mutate(term = mapvalues(term, from = c("e_near_tree",
    "s_near_tree", "w_near_tree", "n_near_tree", "e_far_tree",
    "s_far_tree", "w_far_tree", "n_far_tree"), to = c("near_east",
    "near_south", "near_west", "near_north", "far_east", "far_south", "far_west", "far_north")))


tree.coef$facet = factor(tree.coef$response, levels = c("kwh.avg", "therms.avg", "kwh.high", "therms.high"))
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/tree_coefs.png :height 350

  ggplot(tree.coef, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    facet_wrap(~facet) +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_coefs.png]]


I should make a similar 4 panel that shows the regions around a building.

#+begin_src R
kwh.high.df <- mutate(kwh.high.df, response = "kwh.high")
kwh.avg.df <- mutate(kwh.avg.df, response = "kwh.avg")
therms.high.df <- mutate(therms.high.df, response = "therms.high")
therms.avg.df <- mutate(therms.avg.df, response = "therms.avg")
cost.df <- mutate(cost.df, response = "Cost")
carbon.df <- mutate(carbon.df, response = "Carbon")

all.responses <- bind_rows(kwh.high.df, kwh.avg.df, therms.high.df, therms.avg.df, cost.df, carbon.df)
energy.responses <- bind_rows(kwh.high.df, kwh.avg.df, therms.high.df, therms.avg.df)

energy.responses$facet = factor(energy.responses$response, levels = c("kwh.avg", "therms.avg", "kwh.high", "therms.high"))

summary.responses <- bind_rows(cost.df, carbon.df)
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/panel_energyresponses.png
    ggplot(energy.responses, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
              theme_base() +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank(),
                    text = element_text(size = 20)) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.title = element_blank()) +
                facet_wrap(~facet, ncol = 2)


#+end_src

#+RESULTS:
[[file:../figs/panel_energyresponses.png]]

#+begin_src R :exports results :results graphics :file ../figs/panel_summary_responses.png :height 200
    ggplot(summary.responses, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
              theme_base() +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank(),
                    text = element_text(size = 20)) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.title = element_blank()) +
                facet_wrap(~response, ncol = 2)


#+end_src

#+RESULTS:
[[file:../figs/panel_summary_responses.png]]




#+begin_src R
  a <- tidy(C.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "Carbon")
  b <- tidy(cost.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "Cost")
  cc.coef <- bind_rows(a,b)


  cc.coef <- cc.coef %>% mutate(term = mapvalues(term, from = c("e_near_tree",
      "s_near_tree", "w_near_tree", "n_near_tree", "e_far_tree",
      "s_far_tree", "w_far_tree", "n_far_tree"), to = c("near_east",
      "near_south", "near_west", "near_north", "far_east", "far_south", "far_west", "far_north")))

#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/carbon_cost_coef.png :height 200
  ggplot(cc.coef, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    facet_wrap(~response) +
    theme_base()

#+end_src

#+RESULTS:
[[file:../figs/carbon_cost_coef.png]]

explain the coeffients can be interpreted roughtly like a percentage
(but calcualte it exactly).
Then give the median of each response. and what the coefficients mean
for a house like that.  For example, for the median house that uses:
XX kwh, XX therms, at coefficient of .01 means a change of

bigger houses have more effect, smaller houses less effect.


Consider a house that goes from no cover to complete canopy cover,
what would the change be?


** Consider a green ash tree that grows at .61 cm per year.

that growth rate is from : http://www.sciencedirect.com/science/article/pii/S0269749101002147

equations are from https://www.fs.usda.gov/rds/archive/Product/RDS-2016-0005



The coefficients of models are for 100m^2 of tree canopy cover.


#+begin_src R
    eqn <- read.csv("../RD/RDS-2016-0005/Data/TS6_Growth_coefficients.csv", stringsAsFactors = F) %>%
        mutate(a = as.numeric(a))

#  uni <- eqn %>% select(Region, Scientific.Name) %>% unique

  # fix the coefficents in rows 143, 150, 213.  see email with natalie
  eqn[is.na(as.numeric(eqn$a)),9:11] <- eqn[is.na(as.numeric(eqn$a)),10:12]

    eqn <- eqn %>%
        filter(Region %in% c("MidWst"), Scientific.Name == "Fraxinus pennsylvanica", Independent.variable == "cdia")
eqn
#+end_src

#+RESULTS:
#+begin_example
Warning message:
In evalq(as.numeric(a), <environment>) : NAs introduced by coercion
  Region        Scientific.Name SpCode Independent.variable Predicts.component
1 MidWst Fraxinus pennsylvanica   FRPE                 cdia                dbh
  Units.of.predicted.components Model.weight EqName       a        b       c
1                        meters     1/cdia^2    cub 5.37282 -0.59669 0.69285
         d  e Apps.min Apps.max   Sigma  n adj.R2 Data.min..from.raw.data.
1 -0.02238 NA     1.99       88 0.99473 46  0.912                      5.8
  Data.max..from.raw.data. DF
1                    107.2 42
#+end_example

A tree that has a circular crown with an area of 100m^2 would have a
diameter of
#+begin_src R
cdia <- 2 * sqrt(100/pi)
cdia
#+end_src

#+RESULTS:
: [1] 11.28379

Estimate dbh of such a tree
#+begin_src R
  attach(eqn)
  dbh <- a + b * cdia + c * cdia^2 + d * cdia^3
  detach(eqn)
  dbh
#+end_src

#+RESULTS:
#+begin_example
The following objects are masked _by_ .GlobalEnv:

    a, b, c, d

The following objects are masked from eqn (pos = 3):

    a, adj.R2, Apps.max, Apps.min, b, c, d, Data.max..from.raw.data.,
    Data.min..from.raw.data., DF, e, EqName, Independent.variable,
    Model.weight, n, Predicts.component, Region, Scientific.Name,
    Sigma, SpCode, Units.of.predicted.components
Error in FUN(left, right) : non-numeric argument to binary operator
[1] 54.70302
#+end_example


Now to calculate Volume

Equation Species,DBH lower (cm),DBH upper (cm),Equation,Predicts,DW Density,Equation Source
Fraxinus pennsylvanica,15,123, = 0.0005885*dbhcm^2.206,Volume,530,McHale 2007

units are m^3
vol_y1 = volume this year
vol_y2 = volume after a year of growth.
#+begin_src R
vol_y1 <- 0.0005885*dbh^2.206
vol_y2 <- 0.0005885*(dbh+.61)^2.206

vol_y1
vol_y2
#+end_src

#+RESULTS:
: [1] 4.016052
: [1] 4.11551

Calculate above ground Dry Weight 530 kg / m^3
#+begin_src R
dw1 <- vol_y1 * 530
dw2 <- vol_y2 * 530
dw1
dw2
#+end_src

#+RESULTS:
: [1] 2128.508
: [1] 2181.22

pg 79 of
https://www.fs.fed.us/psw/publications/documents/psw_gtr253/psw_gtr_253.pdf,
shows the below ground correction to get total dry weight is to
multiply above ground by 1.28

Then divide by 2 to convert dry weight into carbon.

#+begin_src R
C1 <- dw1 * 1.28 / 2
C2 <- dw2 * 1.28 /2
C1
C2
Cseq <- C2-C1
Cseq
#+end_src

#+RESULTS:
: [1] 1362.245
: [1] 1395.981
: [1] 33.73587

so almost 34 kg carbon are sequestered in a year by a ash tree with a
canopy of 100m^2.

divide that by 12 and the value is 33.735/12 = 2.811 kg / mo

** Determine effect on carbon of a median household

#+begin_src R
medC <- median(df$C_gas_and_elec_avg)
medC
#+end_src

#+RESULTS:
: [1] 172.5813

coefficient for S near building
| 10 | s_near_tree                      |  0.002494 |  0.001081 |   2.307301 | fixed             |

#+begin_src R
est <- .002494
se <- .001081

lb <-exp(est - se)
cb <- exp(est)
ub <- exp(est + se)


lb - 1
cb - 1
ub - 1
#+end_src

#+RESULTS:
: [1] 0.001413999
: [1] 0.002497113
: [1] 0.003581398

#+begin_src R
medC * (lb-1)
medC * (cb-1)
medC * (ub-1)
#+end_src

#+RESULTS:
: [1] 0.2440298
: [1] 0.430955
: [1] 0.6180823

about .43 kg C / mo emissions associated with 100m^2 canopy cover to
south of a building.

#+begin_src R
  max.df <- apply(df, 2, max) %>% t %>% as.data.frame() %>%
    select(s_near_tree)
max.df
#+end_src

#+RESULTS:
:
:  s_near_tree
: 1       12.26

about 12 100m^2 units of tree cover can fit in the near south region.
Therefore that region can increase carbon emissions by as much as:
#+begin_src R
exp(12.26*0.00249) - 1
#+end_src

#+RESULTS:
: [1] 0.03099814

about 3.1%

But let's say it is half filled with tree cover:
#+begin_src R
exp(6*0.00249) - 1
#+end_src

#+RESULTS:
: [1] 0.01505216


#+begin_src R
gArea(out, byid = T)
#+end_src

#+RESULTS:
:          1          2          3          4          5          6          7
: 1477.73645 4576.57312 1477.73836 4576.47235  268.81195  904.47937  268.80556
:          8          9         10         11         12
:  903.96030   78.97521   16.56968   78.89484   16.56980

** Determine kwh reduction potential
#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.high.lmer.log), digits = 4)
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |   6.8030 |    0.0160 |  426.3432 | fixed             |
|  2 | building.pca_1                   |   0.0937 |    0.0016 |   57.1601 | fixed             |
|  3 | building.pca_2                   |  -0.0117 |    0.0023 |   -5.1603 | fixed             |
|  4 | building.pca_3                   |  -0.0056 |    0.0027 |   -2.1062 | fixed             |
|  5 | building.pca_4                   |  -0.0224 |    0.0030 |   -7.5064 | fixed             |
|  6 | building.pca_5                   |   0.0062 |    0.0028 |    2.2010 | fixed             |
|  7 | building.pca_6                   |  -0.0048 |    0.0028 |   -1.7431 | fixed             |
|  8 | building.pca_7                   |   0.0085 |    0.0028 |    3.0724 | fixed             |
|  9 | e_near_tree                      |  -0.0081 |    0.0039 |   -2.0766 | fixed             |
| 10 | s_near_tree                      |  -0.0046 |    0.0017 |   -2.6915 | fixed             |
| 11 | w_near_tree                      |  -0.0125 |    0.0040 |   -3.1618 | fixed             |
| 12 | n_near_tree                      |  -0.0002 |    0.0017 |   -0.1210 | fixed             |
| 13 | e_far_tree                       |   0.0013 |    0.0011 |    1.2050 | fixed             |
| 14 | s_far_tree                       |   0.0003 |    0.0005 |    0.6539 | fixed             |
| 15 | w_far_tree                       |   0.0002 |    0.0011 |    0.1491 | fixed             |
| 16 | n_far_tree                       |  -0.0005 |    0.0005 |   -1.0798 | fixed             |
| 17 | e_near_building                  |  -0.0055 |    0.0064 |   -0.8653 | fixed             |
| 18 | s_near_building                  |  -0.0076 |    0.0049 |   -1.5560 | fixed             |
| 19 | w_near_building                  |  -0.0037 |    0.0064 |   -0.5783 | fixed             |
| 20 | n_near_building                  |   0.0045 |    0.0049 |    0.9162 | fixed             |
| 21 | e_far_building                   |  -0.0005 |    0.0024 |   -0.2070 | fixed             |
| 22 | s_far_building                   |  -0.0026 |    0.0012 |   -2.1973 | fixed             |
| 23 | w_far_building                   |  -0.0026 |    0.0023 |   -1.1243 | fixed             |
| 24 | n_far_building                   |  -0.0025 |    0.0012 |   -2.1348 | fixed             |
| 25 | sd_(Intercept).Elementary.School |   0.0441 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |   0.4587 |           |           | Residual          |
#+END_SRC

|  9 | e_near_tree                      |  -0.0081 |    0.0039 |   -2.0766 | fixed             |
| 10 | s_near_tree                      |  -0.0046 |    0.0017 |   -2.6915 | fixed             |
| 11 | w_near_tree                      |  -0.0125 |    0.0040 |   -3.1618 | fixed             |


#+begin_src R
  median.df <- apply(df, 2, median)
  max.df <- apply(df, 2, max) %>% t %>% as.data.frame() %>%
    select(s_near_tree, e_near_tree, w_near_tree)
#+end_src

#+RESULTS:

#+begin_src R
max.df
#+end_src

#+RESULTS:
:   s_near_tree e_near_tree w_near_tree
: 1       12.26        5.41        5.20

#+begin_src R
  med.df <- as.data.frame(t(median.df)) %>%
    select(aggregated.covariates) %>%
      mutate_if(is.factor, as.character) %>%
      mutate_if(is.character, as.numeric) %>%
    mutate(Elementary.School = "Crestwood") %>%
      select(-Electric_for_Heating,
             -Central.Air)
#+end_src

#+RESULTS:
: Warning message:
: In evalq(as.numeric(Electric_for_Heating), <environment>) :
:   NAs introduced by coercion

#+begin_src R
    min.df <- med.df %>%
      mutate(s_near_tree = 0,
             e_near_tree = 0,
             w_near_tree = 0)

  max.df <- med.df %>%
      mutate(s_near_tree = 12.26,
             e_near_tree = 5.41,
             w_near_tree = 5.20)

#+end_src

#+RESULTS:

#+begin_src R
no.tree <- exp(predict(kwh.high.lmer.log, newdata = min.df))
high.tree <- exp(predict(kwh.high.lmer.log, newdata = max.df))
no.tree
high.tree
#+end_src

#+RESULTS:
:
:       1
: 777.9622
:
:      1
: 659.084

#+begin_src R
no.tree - high.tree
#+end_src

#+RESULTS:
:        1
: 118.8782

That aint small beans.  May not be possible for all houses because
other buildings, and roads prevent planting.  But it gives an idea.  A
thorough analysis would consider available planting area.

I did constrain it to the max observed tree cover, rather than
assuming a completely filled region.

#+begin_src R
1- 659/778
#+end_src

#+RESULTS:
: [1] 0.1529563


* Building Energy and Trees[2017-02-14 Tue] [2018-03-16 Fri] [2018-07-13 Fri]
:PROPERTIES:
:header-args: :eval yes
:ARCHIVE_TIME: 2018-07-13 Fri 12:41
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
** Motivation

How do trees modify human behavior and influence climate change?

Trees reduce atmospheric CO_2 by growing and sequestering carbon in
their wood.  They also affect atmospheric CO_2 by altering the amount
of energy needed to heat and cool buildings.

Do urban trees influence the carbon cycle more by modifying human
behavior than they do by growth and sequestration?

The magnitude of both effects is important.  The effect on energy use
is more important, however, because it is a permanent transfer of carbon under
the ground into the active carbon cycle. The carbon sequestered by
trees is only a temporary removal of C from the atmosphere.


| [[/Users/erker/projects/energy/figs/powerplant.jpg]] | [[/Users/erker/projects/energy/figs/TreeSequestrationImage.gif]] |


[[/Users/erker/projects/energy/figs/RightTreeRightPlace.png]]


[[/Users/erker/projects/energy/figs/sumwin_tree_sun.jpg]]

** Primary Questions
1) What is the effect of tree canopy cover on residential building energy
   use and the associated cost in dollars and cost in carbon emissions?
   1) Is the effect stronger for electric or gas use?
   2) What is the effect of canopy during months of greatest energy demand?
2) What would be the effect if all trees were lost in the city?  What
   if we had 100% canopy cover?
3) Is there an arrangement of trees around houses that would minimize
   carbon emissions?

** libraries

#+begin_src R :tangle yes
library(plyr)
library(ascii)
library(broom)
library(tidyr)
library(stringr)
library(raster)
library(rgeos)
library(rgdal)
library(foreach)
library(doParallel)
library(ggplot2)
library(dplyr)
library(GGally)
#+end_src

#+RESULTS:
#+begin_example

Attaching package: ‘tidyr’

The following object is masked from ‘package:ascii’:

    expand
Loading required package: sp

Attaching package: ‘raster’

The following object is masked from ‘package:tidyr’:

    extract
rgeos version: 0.3-26, (SVN revision 560)
 GEOS runtime version: 3.6.1-CAPI-1.10.1 r0
 Linking to sp version: 1.2-5
 Polygon checking: TRUE
rgdal: version: 1.2-15, (SVN revision 691)
 Geospatial Data Abstraction Library extensions to R successfully loaded
 Loaded GDAL runtime: GDAL 2.1.3, released 2017/20/01
 Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgdal/gdal
 GDAL binary built with GEOS: FALSE
 Loaded PROJ.4 runtime: Rel. 4.9.3, 15 August 2016, [PJ_VERSION: 493]
 Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgdal/proj
 Linking to sp version: 1.2-5
foreach: simple, scalable parallel programming from Revolution Analytics
Use Revolution R for scalability, fault tolerance and more.
http://www.revolutionanalytics.com
Loading required package: iterators
Loading required package: parallel

Attaching package: ‘ggplot2’

The following object is masked from ‘package:raster’:

    calc

Attaching package: ‘dplyr’

The following objects are masked from ‘package:rgeos’:

    intersect, setdiff, union

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Attaching package: ‘GGally’

The following object is masked from ‘package:dplyr’:

    nasa
#+end_example

** functions
**** Convert kWh to Carbon kg
https://www.epa.gov/sites/production/files/2015-10/documents/egrid2012_ghgoutputrates_0.pdf
https://www.epa.gov/energy/emissions-generation-resource-integrated-database-egrid
https://www.epa.gov/sites/production/files/2017-02/documents/egrid2014_technicalsupportdocument_v2.pdf

for electricity made in region MRO East
1267.5 lbs/MWh * 1kg /2.20462 lb * 1 MWh / 1000 kWh * 12 /44

#+begin_src R
1267.5 / 2.20462 / 1000 *12 /44
#+end_src

#+RESULTS:
: [1] 0.1567988

#+begin_src R
  kWh2kgC <- function(kWh) {
    kWh * .1567988
}
#+end_src

#+RESULTS:

**** Convert Therm to Carbon kg
see https://www.epa.gov/energy/greenhouse-gases-equivalencies-calculator-calculations-and-references
0.1 mmbtu/1 therm × 14.46 kg C/mmbtu

#+begin_src R
.1*14.46
#+end_src

#+RESULTS:
: [1] 1.446

#+begin_src R
  therm2kgC <- function(therms) {
    therms * 1.446
}
#+end_src

#+RESULTS:

#+RESULTS:

#+RESULTS:
**** define extract polygons parallel function
#+begin_src R
      extract.polygons.parallel <- function(x, sp.polygons, cores) {

      n <- ceiling(length(sp.polygons) / cores)
      v <- 1:length(sp.polygons)
      l <- split(v, ceiling(seq_along(v)/n))

            cl <- makeCluster(cores)
            registerDoParallel(cl)

    out <- foreach(i = seq_along(l), .packages = "raster") %dopar% {
          sp.sub <- sp.polygons[l[[i]],]
          raster::extract(x, sp.sub)
      }
          closeAllConnections()

  return(out)
    }

#+end_src

#+RESULTS:

**** other and make regions around polygons

#+begin_src R

  options(asciiType = "org")
  ascii.nowarn.print <- function(x,...) {
                                          #op <- options(warn = -1)
                                          #      on.exit(options(op))

      suppressWarnings(print(ascii(x,...)))

  }


#+end_src

#+RESULTS:

#+begin_src R

    makeRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(-67.5,-22.5,22.5,67.5)) {
        bc <- gCentroid(poly)
        bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
        bcbd <- sapply(length(bcb):1, function(i) {
            if(i >1) {
                gDifference(bcb[[i]], bcb[[(i-1)]])
            } else {
                bcb[[i]]
            }
        })
        bcb <- do.call(bind, bcbd)

        theta.radians <- theta*pi/180
        r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

        y <- r*sin(theta.radians)
        x <- r*cos(theta.radians)

        x1 <- coordinates(bc)[,1 ] + x
        y1 <- coordinates(bc)[,2] + y

        x2 <- coordinates(bc)[,1 ] - x
        y2 <- coordinates(bc)[,2] - y

        line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

        line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
        proj4string(line) <- crs(poly)


        o <- lapply(1:length(bcb), function(i) {
            lpi <- gIntersection(bcb[i,], line)
            blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
            dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
            disaggregate(dpi)
        })

        o <- do.call(bind, o)



        dist <- gDistance(poly, o, byid = T)
        dist <- sapply(dist, function(d) buffer.widths[which(abs(buffer.widths - d) == min(abs(buffer.widths - d)))])


        over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

        direction <- sapply(1:length(o), function(i) {
            diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
            round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
        })

        angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
        closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
        direction <- angles[closest.angles] + 180
        direction[direction > 360] <-         direction[direction > 360] - 360

  #      direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
        o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                           distance.from.building = dist,
                                                           over.building = over.building,
                                                           direction = direction))
        o
    }
#+end_src

#+RESULTS:


#+begin_src R :eval no

  poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

    poly <- as(poly, "SpatialPolygonsDataFrame")
  poly@data$BUILDINGFO = 0


  poly <- build.res.primary.parcels[27940,]
  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)
#+end_src

#+RESULTS:


#+begin_src R
    buffer.widths <- seq(0,51,3)
    theta = seq(0,157.5,22.5)

        makeRegionsAroundPolygonManyAngles <- function(poly, buffer.widths, theta = seq(0,157.5,22.5)) {

        bc <- gCentroid(poly)
        bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
        bcbd <- sapply(length(bcb):1, function(i) {
            if(i >1) {
                gDifference(bcb[[i]], bcb[[(i-1)]])
            } else {
                bcb[[i]]
            }
        })
        bcb <- do.call(bind, bcbd)

        theta.radians <- theta*pi/180
        r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

        y <- r*sin(theta.radians)
        x <- r*cos(theta.radians)

        x1 <- coordinates(bc)[,1 ] + x
        y1 <- coordinates(bc)[,2] + y

        x2 <- coordinates(bc)[,1 ] - x
        y2 <- coordinates(bc)[,2] - y

        line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

        line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
        proj4string(line) <- crs(poly)


        o <- lapply(1:length(bcb), function(i) {
            lpi <- gIntersection(bcb[i,], line)
            blpi <- gBuffer(lpi, width = 0.001)  # create a very thin polygon buffer of the intersected line
            dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
            disaggregate(dpi)
        })

        o <- do.call(bind, o)

        dist <- gDistance(poly, o, byid = T)
            dist <- sapply(dist, function(d) buffer.widths[which(abs(buffer.widths - d) == min(abs(buffer.widths - d)))])

 add to the distance the difference between widths so that the distance is the cover less than a certain distance away.
It will make things make more sense later on.  something like dist +3.  or dist + .. something like: buffer.widths - lag(buffer.widths)


  #This over.building code also seems to make errors because some of the regions are quite close.
        over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

        direction <- sapply(1:length(o), function(i) {
            diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
            atan2(diff.coords[1], diff.coords[2]) * 180/pi
        })

    direction[direction < 0] <- 360 + direction[direction < 0]  # get rid of negative angles, but on 0-360 scale

    angles <- seq(11.25, 348.75, 22.5)

        closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))

            # shifting so that angles originate in north, grow in a clockwise direction
            direction <- angles[closest.angles] + 180
            direction[direction > 360] <-         direction[direction > 360] - 360

    direction <- as.character(direction)

        o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                           distance.from.building = dist,
                                                           over.building = over.building,
                                                           direction = direction))
        o
    }
#+end_src

#+RESULTS:


#+begin_src R
  makeNESWRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(45,-45)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)


      dist <- gDistance(poly, o, byid = T)[,1]
      closest.dist <- sapply(dist, function(d) which(abs(buffer.widths - d) == min(abs(buffer.widths - d))))
      dist <- buffer.widths[closest.dist]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          atan2(diff.coords[1], diff.coords[2]) * 180/pi
      })

      angles <- c(0, 90, 180, -180, -90)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
                                          #    direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
          direction <- mapvalues(direction, from = angles, to = c("s","w","n","n","e"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }

#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygonCentroid <- function(polygon, buffer.widths, theta) {

      bc <- gCentroid(polygon)
      bcb <- sapply(buffer.widths, function(w) gBuffer(bc, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(widths)

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(polygon)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.000001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)
      o
  }
#+end_src


#+RESULTS:
** inputs
#+begin_src R :tangle yes
build.shapefile.path <- "../RD/dane_cty_building_footprint_2010/BuildingFootprint.shp"
parcels.shapefile.path <- "../RD/dane_cty_parcels_2014/Dane_Parcels_2014.shp"
energy.data.frame.path <- "../RD/energy.dataframe-2016-04-12-15-40-59.rds"
assessors.property.path <- "../RD/Assessor_Property_Information.csv"
mad.utc.path <- "../RD/madison_utc/3_ClassifiedUrbanArea.tif"
#+end_src

#+RESULTS:

** Load and join datasets
*** MGE energy use

[[/Users/erker/projects/energy/figs/MGE_screenshot_ChancellorsHouse.png]]

https://www.mge.com/customer-service/home/average-use-cost/results.htm?hn=130&sd=N&sn=Prospect&ss=Av&au=2&c=Madison
#+begin_src R :tangle yes
    energy <- readRDS(energy.data.frame.path)
#+end_src

#+RESULTS:
*** Assessors Property

#+ATTR_HTML: :width 900
[[/Users/erker/projects/energy/figs/AssessorsPropertyDataScreenShot.png]]

#+begin_src R :tangle yes
ass.prop <- read.csv(assessors.property.path, stringsAsFactors = F)
#+end_src

#+RESULTS:

*** Join Energy with Assessors Property Info
#+begin_src R
  ass.prop.energy <- left_join(energy, ass.prop) %>%
    mutate(PropertyAd = toupper(Address))
#+end_src

#+RESULTS:
: Joining, by = "Parcel"

*** parcels
#+ATTR_HTML: :width 900
[[../figs/Screenshot 2017-10-10 12.56.46.png]]
#+begin_src R
  parcels <- shapefile(parcels.shapefile.path)
#+end_src

#+RESULTS:

#+begin_src R
    parcels.energy <- subset(parcels, PropertyAd %in% ass.prop.energy$PropertyAd)

  parcels.energy@data <- left_join(parcels.energy@data, ass.prop.energy, by = c("PropertyAd"))

#+end_src

#+RESULTS:


#+begin_src R
  parcels.energy <- subset(parcels.energy, complete.cases(kWh_High) & kWh_High >0)


  parcels.energy@data <- parcels.energy@data %>%
            dplyr::select(Parcel,
                        Address,
                   kWh_High,
                   kWh_Mon_Avg_last12mo,
                   Cost_kWh_High,
                   Cost_kWh_Avg,
                   Therms_High,
                   Therms_Mon_Avg_last12mo,
                   Cost_Therms_High,
                   Cost_Therms_Avg,
                   Electric_for_Heating,
                   Current.Year.Land.Value,
                   Current.Year.Improvement.Value,
                   Lot.Size.Sq.Ft,
                   Water.Frontage,
                   Elementary.School,
                   Middle.School,
                   High.School,
                   Ward,
                   State.Assembly.District,
                   Home.Style,
                   Year.Built,
                   Stories,
                   Dwelling.Units,
                   Bedrooms,
                   Full.Baths,
                   Half.Baths,
                   Fireplaces,
                   Central.Air,
                   First.Floor.Living.Area,
                   Second.Floor.Living.Area,
                   Third.Floor.Living.Area,
                   Above.Third.Floor.Living.Area,
                   Total.Living.Area,
                   Finished.Attic,
                   Finished.Basement,
                   Total.Basement,
                   Crawl.Space,
                   Exterior.Wall.1,
                   Exterior.Wall.2,
                   Foundation,
                   Roof,
                   Roof.Replaced.Year,
                   Garage.1,
                   Garage.Stalls.1,
                   Garage2,
                   Garage.Stalls.2,
                   Driveway) %>%
            mutate(Electric_for_Heating = factor(Electric_for_Heating),
                   Water.Frontage = factor(Water.Frontage),
                   Elementary.School = factor(Elementary.School),
                   Middle.School = factor(Middle.School),
                   High.School = factor(High.School),
                   Ward = factor(Ward),
                   State.Assembly.District = factor(State.Assembly.District),
                   Home.Style = factor(Home.Style),
                   Central.Air = factor(Central.Air),
                   Exterior.Wall.1 = factor(Exterior.Wall.1),
                   Exterior.Wall.2 = factor(Exterior.Wall.2),
                   Foundation = factor(Foundation),
                   Roof = factor(Roof),
                   Garage.1 = factor(Garage.1),
                   Garage2 = factor(Garage2),
                   Driveway = factor(Driveway)) %>%
            mutate(Current.Year.Improvement.Value.th = as.numeric(str_replace(Current.Year.Improvement.Value,"\\$",""))/1000,
                   Current.Year.Land.Value.th = as.numeric(str_replace(Current.Year.Land.Value,"\\$",""))/1000) %>%
            dplyr::select(-Current.Year.Improvement.Value, -Current.Year.Land.Value)

#+end_src

#+RESULTS:


#+begin_src R
  writeOGR(parcels.energy, dsn = "../DD/", layer = "parcels.energy.propinfo", driver = "ESRI Shapefile", overwrite = T)
  saveRDS(colnames(parcels.energy@data), "../DD/colnames.parcels.energy.propinfo.rds")
  saveRDS(parcels.energy$Parcel, "../DD/parcelID.parcels.energy.propinfo.rds")
#+end_src

#+RESULTS:
: Warning message:
: In writeOGR(parcels.energy, dsn = "../DD/", layer = "parcels.energy.propinfo",  :
:   Field names abbreviated for ESRI Shapefile driver

#+begin_src R :tangle yes
  parcels.energy <- shapefile("../DD/parcels.energy.propinfo.shp")
  parcels.energy$Parcel <- readRDS("../DD/parcelID.parcels.energy.propinfo.rds")
  colnames(parcels.energy@data) <- readRDS("../DD/colnames.parcels.energy.propinfo.rds")
    parcels.energy <- spTransform(parcels.energy, crs("+init=epsg:32616"))
#+end_src

#+RESULTS:

*** Building Footprints
#+ATTR_HTML: :width 900
[[../figs/Screenshot 2017-10-10 13.08.15.png]]

#+begin_src R :tangle yes :eval no
      build <- shapefile(build.shapefile.path)
      build.res <- subset(build, BuildingUs == "Residential")
      build.res.primary <- subset(build.res, BuildingCl == "Primary")
    build.res.primary <- spTransform(build.res.primary, crs("+init=epsg:32616"))
  writeOGR(build.res.primary, dsn = "../DD/", layer = "buildings_residential_primary", driver = "ESRI Shapefile")
#+end_src

#+RESULTS:

#+begin_src R
build.res.primary <- shapefile("../DD/buildings_residential_primary.shp")
#+end_src

#+RESULTS:

*** Mask Building Footprints to the area for which I have parcel information (city of Madison)
currently footprints cover dane county
#+begin_src R


    e <- new("Extent"
           , xmin = 294022.535226926
           , xmax = 317479.19202743
           , ymin = 4763205.41481759
           , ymax = 4781697.04891745
             )

    e.parcels.energy <- crop(parcels.energy, e)

    library(alphahull)
    library(igraph)

    g <- geom(e.parcels.energy)
    i <- sample(1:nrow(g), 20000)

    a <- ashape(unique(g[i,5:6]), alpha = 2000)

    ag = graph.edgelist(cbind(as.character(a$edges[, "ind1"]), as.character(a$edges[,
        "ind2"])), directed = FALSE)
    plot(ag)

    if (!is.connected(ag)) {
        stop("Graph not connected")
    }
    if (any(degree(ag) != 2)) {
        stop("Graph not circular")
    }
    if (clusters(ag)$no > 1) {
        stop("Graph composed of more than one circle")
    }

    cutg = ag - E(ag)[1]
    # find chain end points
    ends = names(which(degree(cutg) == 1))
    path = get.shortest.paths(cutg, ends[1], ends[2])[[1]]
    # this is an index into the points
    pathX = as.numeric(V(ag)[path[[1]]]$name)
    # join the ends
    pathX = c(pathX, pathX[1])
    # now show the alpha shape plot with our poly on top
    plot(a, lwd = 10, col = "gray")
    # get the points from the ashape object
    lines(a$x[pathX, ], lwd = 2)


    a.sp <- SpatialPolygonsDataFrame(SpatialPolygons(list(Polygons(list(Polygon(a$x[pathX,])),1))), data = data.frame(d = 1))

    a.sp.buf <- gBuffer(a.sp, width = 100)

  build.res.primary.crp <- crop(build.res.primary, a.sp.buf)

  writeOGR(build.res.primary.crp, dsn = "../DD/", layer = "buildings_residential_primary_crp2Mad", driver = "ESRI Shapefile")
#+end_src

#+begin_src R
build.res.primary.crp <- shapefile("../DD/buildings_residential_primary_crp2Mad.shp")
#+end_src

#+RESULTS:

*** crop building footprints to those inside parcels
#+begin_src R
  parallel.crop <- function(sp1,sp2, cores) {
      a <- 1:length(sp1)
      a.s <- split(a, rep(1:cores,each = ceiling(length(a)/cores)))

      cl <- makeCluster(cores)
      registerDoParallel(cl)

      out <- foreach(i = a.s, .packages = c("sp","raster")) %dopar% {
          o <- crop(sp1[i,], sp2)
      }
      closeAllConnections()
      return(out)
  }

  out <- parallel.crop(build.res.primary.crp, parcels.energy, 40)

  build.res.primary.parcels <- do.call("rbind",out[sapply(out, FUN = function(o) !is.null(o))])

  build.res.primary.parcels <- spTransform(build.res.primary.parcels, crs("+init=epsg:32616"))

                                          #remove the fragments of buildings
  o.area <- data.frame(id = build.res.primary.crp@data$BUILDINGFO, o.area = gArea(build.res.primary.crp, byid = T))
  n.area <- data.frame(id = build.res.primary.parcels@data$BUILDINGFO, n.area =gArea(build.res.primary.parcels, byid = T))

  compare.area <- left_join(n.area, o.area) %>%
      mutate(area.ratio = n.area / o.area,
             keep = area.ratio > .6)

  build.res.primary.parcels <- build.res.primary.parcels[compare.area$keep,]





  df  <- over(build.res.primary.parcels, parcels.energy)
  build.res.primary.parcels@data <- cbind(build.res.primary.parcels@data, df)


                                          # If there are two buildings in a parcel, remove the smaller of the two

  parcels.w2buidings <- build.res.primary.parcels@data %>%
      group_by(Parcel) %>%
      summarize(n = n()) %>%
      filter(n > 1) %>%
      pull(Parcel)

  build.to.remove <- build.res.primary.parcels@data %>%
      filter(Parcel %in% parcels.w2buidings) %>%
      group_by(Parcel) %>%
      dplyr::select(BUILDINGFO, Shape_area) %>%
      arrange(Parcel) %>%
      filter(Shape_area == min(Shape_area)) %>%
      pull(BUILDINGFO)


  build.res.primary.parcels <- build.res.primary.parcels[ ! build.res.primary.parcels@data$BUILDINGFO %in% build.to.remove,]

                                          # If there are buildings that are in multiple parcels??


#+end_src

#+RESULTS:
: Warning message:
: In split.default(a, rep(1:cores, each = ceiling(length(a)/cores))) :
:   data length is not a multiple of split variable
: Joining, by = "id"
: Adding missing grouping variables: `Parcel`


#+begin_src R
  writeOGR(build.res.primary.parcels, dsn = "../DD/", layer = "buildings.w.parcels.energy.propinfo", driver = "ESRI Shapefile", overwrite = T)

  saveRDS(colnames(build.res.primary.parcels@data), "../DD/colnames.buildings.w.parcels.energy.propinfo.rds")
  saveRDS(build.res.primary.parcels@data$Parcel, "../DD/parcelID.buildings.w.parcels.energy.propinfo.rds")
  saveRDS(build.res.primary.parcels@data$BUILDINGINFO, "../DD/BUILDINGINFO.buildings.w.parcels.energy.propinfo.rds")
  saveRDS(build.res.primary.parcels@data, "../DD/data.buildings.w.parcels.energy.propinfo.rds")

#+end_src

*** (If I redo this) make regions around each building  Don't make one massive shapefile.....TOO Big.
#+ATTR_HTML: :width 900
[[/Users/erker/projects/energy/figs/Screenshot 2017-10-10 13.12.32.png]]



#+begin_src R
  build.res.primary.parcels <- readOGR(dsn = "../DD/", layer = "buildings.w.parcels.energy.propinfo")
  colnames(build.res.primary.parcels@data) <- readRDS("../DD/colnames.buildings.w.parcels.energy.propinfo.rds")
  build.res.primary.parcels@data$Parcel <- readRDS("../DD/parcelID.buildings.w.parcels.energy.propinfo.rds")
  build.res.primary.parcels@data$BUILDINGINFO <- readRDS("../DD/BUILDINGINFO.buildings.w.parcels.energy.propinfo.rds")
#+end_src

#+RESULTS:
: OGR data source with driver: ESRI Shapefile
: Source: "../DD/", layer: "buildings.w.parcels.energy.propinfo"
: with 31172 features
: It has 56 fields
: Integer64 fields read as strings:  BUILDIN Yer_Blt Dwlln_U Bedroms Fll_Bth Hlf_Bth Firplcs F_F_L_A S_F_L_A T_F_L_A A_T_F_L Ttl_L_A Fnshd_A Fnshd_B Ttl_Bsm Crwl_Sp Rf_Rp_Y
: Error in gzfile(file, "rb") : cannot open the connection
: In addition: Warning message:
: In gzfile(file, "rb") :
:   cannot open compressed file '../DD/colnames.buildings.w.parcels.energy.propinfo.rds', probable reason 'No such file or directory'

fix poly 27940.  It has bad topology
#+begin_src R
  build.res.primary.parcels <- bind(build.res.primary.parcels, gBuffer(build.res.primary.parcels[27940,], width = .001))

  build.res.primary.parcels <- build.res.primary.parcels[-27940,]
#+end_src

#+RESULTS:

#+begin_src R
    cores <- 45
          widths <- seq(0,51,3)

      chunks <- 80
    a <- 1:length(build.res.primary.parcels)
    a.s <- split(a, rep(1:chunks,each = ceiling(length(a)/chunks)))

          dir.create("../DD/buildings.regions")

          cl <- makeCluster(cores)
          registerDoParallel(cl)


          foreach(i = a.s, .packages = c("plyr","sp","raster","rgeos"), .combine = "rbind") %dopar% {
              o <- lapply(i, function(j) {
                  print(j)
                  op <- makeRegionsAroundPolygonManyAngles(build.res.primary.parcels[j,], widths)
              })
              o <- do.call(bind, o)
              shapefile(o, paste0("../DD/buildings.regions/",i[1],".shp"), overwrite = T)
          }

          closeAllConnections()


        shp.files <- list.files("../DD/buildings.regions", pattern = ".*shp", full.names = T)

          cl <- makeCluster(cores)
          registerDoParallel(cl)

        out <- foreach(shp.file = shp.files, .packages = c("sp","raster","rgeos")) %dopar% {
            shapefile(shp.file)
            }

        out <- do.call(bind, out)




#+end_src

*** fix colnames
#+begin_src R
colnames(out@data) <- c("BUILDINGFO","distance.from.building","over.building","direction")
#+end_src

#+RESULTS:

*** save regions around buildings
#+begin_src R
  writeOGR(out, dsn = "../DD/", layer = "building.regions.3m16angles", driver = "ESRI Shapefile", overwrite = T)

#  unlink("../DD/buildings.regions.15mNESW", recursive = T)
#+end_src

#+RESULTS:
: Warning message:
: In writeOGR(out, dsn = "../DD/", layer = "building.regions", driver = "ESRI Shapefile",  :
:   Field names abbreviated for ESRI Shapefile driver

** read in regions around buildings

#+begin_src R :eval no
  out <- shapefile("../DD/building.regions.3m16angles.shp")
  colnames(out@data) <- c("BUILDINGFO","distance.from.building","over.building","direction")
#+end_src

#+RESULTS:
** Urban Tree Canopy Map
#+ATTR_HTML: :width 1400
[[/Users/erker/projects/energy/figs/Screenshot 2017-10-10 12.45.21.png]]
#+begin_src R
  utc <- raster(mad.utc.path)
#+end_src

#+RESULTS:
** Calculate Tree Cover within regions around each residential building
#+ATTR_HTML: :width 900
[[../figs/Screenshot 2017-10-10 12.54.31.png]]

Reproject the building regions shapefile and save this transformation
#+begin_src R :eval no
  out2 <- spTransform(out, proj4string(utc))
  shapefile(out2,"../DD/building.regions.3m16angles_utcProj.shp")
#+end_src

#+RESULTS:

#+begin_src R
  out2 <- shapefile("../DD/building.regions.3m16angles_utcProj.shp")
  colnames(out2@data) <- c("BUILDINGFO","distance.from.building","over.building","direction")
#+end_src

load a subset
#+begin_src R
#out2 <- shapefile("../DD/building.regions.3m16angles_utcProj_shps/1.shp")
#  colnames(out2@data) <- c("BUILDINGFO","distance.from.building","over.building","direction")
#out2 <- out2[1:1000,]
#+end_src

#+RESULTS:


extract the cover (I turned eval off)
#+begin_src R :eval no

cores <- 42


  dir.create("../DD/extracted.cover3m16angles")

  chunks <- 100
  a.s <- split(1:length(out2), f = rep(1:chunks, each = ceiling(length(out)/chunks)))

  o <-      lapply(a.s, function(i) {
      res.set <- extract.polygons.parallel(utc, out2[i,], cores = cores)
      res.u <- unlist(res.set, recursive = F)
      saveRDS(res.u, paste0("../DD/extracted.cover3m16angles/eachRegionAroundBuilding_set",i[1],".rds"))
  })


#+end_src

summarize the cover
#+begin_src R
  res.u.list <- list.files("../DD/extracted.cover3m16angles", full.names = T)

                                          #put them in the correct order for reconstruction
  i <- as.numeric(str_extract(res.u.list, "[0-9]+"))
  res.u.list <- res.u.list[order(i)]


  res.u <- lapply(res.u.list, readRDS)
  res.u.u <- unlist(res.u, recursive = F)

  sum.tree.per.region <- sapply(res.u.u, function(x) sum(x == 1))
  n.pixels.per.region <- sapply(res.u.u, function(x) length(x))

    out2@data <- cbind(out2@data, sum.tree.per.region, n.pixels.per.region)
#+end_src

#+RESULTS:


*** spread to make a row for each building, rather than a row for each region
#+begin_src R
              #fix distances  I should only have to do this once, I need to fix the code above, but I didn't re run because it takes 3 days.
    buffer.widths <- seq(0,51,3)
    out2@data$distance.from.building <- sapply(out2@data$distance.from.building, function(d) buffer.widths[which(abs(buffer.widths - d) == min(abs(buffer.widths - d)))])


                o <- out2@data %>% unite_("direction.dist.overbuilding", c("direction","distance.from.building", "over.building"))





                # some regions, say south 10m from a house are made or more than one polygon.  This combines them.
                o <- o %>% group_by(BUILDINGFO, direction.dist.overbuilding) %>%
                    summarize(sum.tree.per.region = sum(sum.tree.per.region),
                              n.pixels.per.region = sum(n.pixels.per.region))

          saveRDS(o, "../DD/sum.tree_npixels_byregion_atbuildings_3m16angles.rds")


          o <- select(o,  -n.pixels.per.region)

          o <- spread(o, key = direction.dist.overbuilding, value = sum.tree.per.region)
#+end_src

#+RESULTS:

** Join Tree cover to buildings

#+begin_src R
    build.res.primary.parcels <- shapefile("../DD/buildings.w.parcels.energy.propinfo", stringsAsFactors = F)

    colnames(build.res.primary.parcels@data) <- readRDS("../DD/colnames.buildings.w.parcels.energy.propinfo.rds")
  build.res.primary.parcels@data$BUILDINGFO <- as.numeric(build.res.primary.parcels@data$BUILDINGFO)
#+end_src

#+RESULTS:

#+begin_src R
  build.res.primary.parcels.tree <- build.res.primary.parcels[build.res.primary.parcels@data$BUILDINGFO %in% o$BUILDINGFO, ]
  build.res.primary.parcels.tree@data <- left_join(build.res.primary.parcels.tree@data, o)
#+end_src

#+RESULTS:
: Joining, by = "BUILDINGFO"

#+begin_src R
colnames(build.res.primary.parcels.tree@data)[57:344] <- paste0("d",colnames(build.res.primary.parcels.tree@data)[57:344],"_tree")
#+end_src

#+RESULTS:

#+begin_src R
  shapefile(as(build.res.primary.parcels.tree, "SpatialPolygons"), "../DD/buildings.w.parcels.energy.propinfo_3m16angles", overwrite = T)
  saveRDS(colnames(build.res.primary.parcels.tree@data), "../DD/colnames.buildings.w.parcels.energy.propinfo_3m16angles.rds")
  saveRDS(build.res.primary.parcels.tree$Parcel, "../DD/Parcel.buildings.w.parcels.energy.propinfo_3m16angles.rds")
  saveRDS(build.res.primary.parcels.tree@data, "../DD/data_buildings.w.parcels.energy.propinfo_3m16angles.rds")
#+end_src

#+RESULTS:
: Error in writeOGR(as(build.res.primary.parcels.tree, "SpatialPolygons"),  :
:   obj must be a SpatialPointsDataFrame, SpatialLinesDataFrame or
:     SpatialPolygonsDataFrame

** Calculate Building Cover within regions around each residential building  There could be an error here which is causing me to lose some houses
There could be an error here which is causing me to lose some houses
#+ATTR_HTML: :width 900
[[../figs/Screenshot 2017-10-10 12.53.59.png]]

*** load shapefiles


#+begin_src R :tangle task_4702.R
  library(dplyr)
  library(rgeos)
  library(rgdal)
   library(raster)
    library(doParallel)
    library(foreach)


      build.res.primary.parcels <- readOGR(dsn = "../DD/", layer = "buildings.w.parcels.energy.propinfo")
      colnames(build.res.primary.parcels@data) <- readRDS("../DD/colnames.buildings.w.parcels.energy.propinfo.rds")
      build.res.primary.parcels@data$Parcel <- readRDS("../DD/parcelID.buildings.w.parcels.energy.propinfo.rds")
      build.res.primary.parcels@data$BUILDINGINFO <- readRDS("../DD/BUILDINGINFO.buildings.w.parcels.energy.propinfo.rds")

    build.res.primary.parcels.reduced.data <- build.res.primary.parcels
    build.res.primary.parcels.reduced.data@data <-   build.res.primary.parcels.reduced.data@data %>% dplyr::select(BUILDINGFO)


#      build.regions <- shapefile("../DD/building.regions.3m16angles.shp")

#+end_src



*** split building regions into 5000 chuncks (sent to krusty)
#+begin_src R :tangle split_buildingregions.R :eval no

  library(raster)
  library(doParallel)
  library(foreach)

  build.regions <- shapefile("../DD/building.regions.3m16angles.shp")

#  build.regions <- shapefile("/Users/erker/g/projects/energy/DD/building.regions.3m16angles_utcProj_shps/1.shp")

  dir.create("../DD/building.regions.3m16angles.sections")
  chunks <- 5000
  a.s <- split(1:length(build.regions), f = rep(1:chunks, each = ceiling(length(build.regions)/chunks)))

  build.regions.list <- lapply(a.s, function(i) build.regions[i,])

  cl <- makeCluster(20)
  registerDoParallel(cl)

  foreach(build.region = build.regions.list, .packages = c("sp","raster")) %dopar% {
      shapefile(build.region, paste0("../DD/building.regions.3m16angles.sections/building.regions_subset",build.region@data$BUILDIN[1]), overwrite = T)
      }

#+end_src
*** get area of poiygons within another polygon  this did not complete.?
#+begin_src R :tangle task_4702.R


  ##  cores <- 44

    dir.create("../DD/building.around.building.3m16angles/")


  build.regions.list <- list.files("/Users/erker/projects/energy/DD/building.regions.3m16angles.sections", pattern = "*.shp", full.names = T)

    ##cl <- makeCluster(cores)
    ##registerDoParallel(cl)


    out <- foreach(build.region.name = build.regions.list[4702], .packages = c("plyr","dplyr","magrittr","sp","raster","rgeos"), .combine = "rbind") %dopar% {

        build.region <- shapefile(build.region.name)
        build.region@data$region.area <- round(gArea(build.region, byid = T),2)

        ## in order to get build.regions.list[4702] to work...
         br <- gBuffer(build.region,width = .0001, byid = T)
         d <- build.region@data
         build.region <- as(br, "SpatialPolygonsDataFrame")
         build.region@data <- d

        o <- raster::intersect(build.region, build.res.primary.parcels.reduced.data)
        o@data$area <- round(gArea(o, byid = T),2)

        df <- left_join(build.region@data, o@data) %>%
            dplyr::mutate(area = ifelse(is.na(area), 0, area)) %>%
            ungroup() %>%
            group_by(BUILDIN, dstnc__, ovr_bld, directn, region.area) %>%
            dplyr::summarize(area = sum(area))

        saveRDS(df, paste0("../DD/building.around.building.3m16angles/",build.region@data$BUILDIN[1],".rds"))
    df



    }

    closeAllConnections()



#+end_src

***  save out
#+begin_src R

  res.u.list <- list.files("../DD/building.around.building.3m16angles", full.names = T, pattern = )

  res.u <- lapply(res.u.list, readRDS)

  res.u.u <- bind_rows(res.u)

                                          #fix distances  I should only have to do this once, I need to fix the code above, but I didn't re run because it takes 3 days.
    buffer.widths <- seq(0,51,3)
    res.u.u$dstnc__ <- sapply(res.u.u$dstnc__, function(d) buffer.widths[which(abs(buffer.widths - d) == min(abs(buffer.widths - d)))])


  saveRDS(res.u.u, "../DD/building.around.building.3m16angles.rds")
#+end_src

#+RESULTS:

** Join Building Cover to Buildings
buildings in regions around buildings
#+begin_src R
    buildings.in.regions <- readRDS("../DD/building.around.building.3m16angles.rds")

                                          # remove over building because it is meaningless

  buildings.in.regions <- buildings.in.regions %>% dplyr::filter(ovr_bld == 0)

  abuildings.in.regions <- buildings.in.regions %>% unite_("direction.dist.overbuilding", c("directn", "dstnc__", "ovr_bld"))

  buildings.in.regions <- abuildings.in.regions %>% mutate(direction.dist.overbuilding = paste0("d",direction.dist.overbuilding, "_building"))

  #remove trouble buildings
  buildings.in.regions <- filter(buildings.in.regions, BUILDIN != 190246)

  b <- buildings.in.regions %>% select(-region.area)

              # some regions, say south 10m from a house are made or more than one polygon.  This combines them.
              b <- b %>% group_by(BUILDIN, direction.dist.overbuilding) %>%
                  summarize(area = sum(area))


  bs <- spread(b, key = direction.dist.overbuilding, value = area)

#+end_src

prop info and tree cover in regions around buildings
#+begin_src R
  buildings.propinfo.energy.tree <- shapefile("../DD/buildings.w.parcels.energy.propinfo_3m16angles")

  buildings.propinfo.energy.tree@data <- readRDS("../DD/data_buildings.w.parcels.energy.propinfo_3m16angles.rds")

                                            #remove trouble buildings
    buildings.propinfo.energy.tree <- buildings.propinfo.energy.tree[which(buildings.propinfo.energy.tree@data$BUILDIN != 190246),]

#+end_src

#+RESULTS:
: OGR data source with driver: ESRI Shapefile
: Source: "../DD/", layer: "buildings.w.parcels.energy.propinfo_3m16angles"
: with 31171 features
: It has 344 fields

Join
#+begin_src R
d <- left_join(buildings.propinfo.energy.tree@data, bs, c("BUILDINGFO" = "BUILDIN"))
   buildings.propinfo.energy.tree@data <- d
#+end_src

#+RESULTS:

save
#+begin_src R
  buildings.propinfo.energy.tree.building <- buildings.propinfo.energy.tree
  shapefile(buildings.propinfo.energy.tree.building, "../DD/buildings.w.parcels.energy.propinfo.tree.building.shp", overwrite = T)
  saveRDS(colnames(buildings.propinfo.energy.tree.building@data), "../DD/buildings.w.parcels.energy.propinfo.tree.building.colnames.rds")
  saveRDS(buildings.propinfo.energy.tree.building@data, "../DD/buildings.w.parcels.energy.propinfo.tree.building.data.rds")
#+end_src

** Explore relationship between energy and covariates, locally.  again [2018-07-12 Thu]
*** libraries
#+begin_src R :tangle yes
    library(plyr)
    library(ascii)
    library(broom)
    library(tidyr)
    library(stringr)
    library(raster)
    library(rgeos)
    library(rgdal)
    library(foreach)
    library(doParallel)
    library(ggplot2)
    library(dplyr)
    library(lme4)
  library(GGally)
#+end_src

#+RESULTS:

*** functions
**** Convert kWh to Carbon kg
https://www.epa.gov/sites/production/files/2015-10/documents/egrid2012_ghgoutputrates_0.pdf
https://www.epa.gov/energy/emissions-generation-resource-integrated-database-egrid
https://www.epa.gov/sites/production/files/2017-02/documents/egrid2014_technicalsupportdocument_v2.pdf

for electricity made in region MRO East
1267.5 lbs/MWh * 1kg /2.20462 lb * 1 MWh / 1000 kWh * 12 /44

#+begin_src R
1267.5 / 2.20462 / 1000 *12 /44
#+end_src

#+RESULTS:
: [1] 0.1567988

#+begin_src R
  kWh2kgC <- function(kWh) {
    kWh * .1567988
}
#+end_src

#+RESULTS:

**** Convert Therm to Carbon kg
see https://www.epa.gov/energy/greenhouse-gases-equivalencies-calculator-calculations-and-references
0.1 mmbtu/1 therm × 14.46 kg C/mmbtu

#+begin_src R
.1*14.46
#+end_src

#+RESULTS:
: [1] 1.446

#+begin_src R
  therm2kgC <- function(therms) {
    therms * 1.446
}
#+end_src

#+RESULTS:

#+RESULTS:

#+RESULTS:
**** other

#+begin_src R

  options(asciiType = "org")
  ascii.nowarn.print <- function(x,...) {
                                          #op <- options(warn = -1)
                                          #      on.exit(options(op))

      suppressWarnings(print(ascii(x,...)))

  }


#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(-67.5,-22.5,22.5,67.5)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)



      dist <- round(gDistance(poly, o, byid = T),-1)[,1]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
      })

      angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
      direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }
#+end_src

#+RESULTS:



#+begin_src R
  makeRegionsAroundPolygon_poolSandN <- function(poly, buffer.widths, theta = c(-22.5,22.5)) {
        bc <- gCentroid(poly)
        bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
        bcbd <- sapply(length(bcb):1, function(i) {
            if(i >1) {
                gDifference(bcb[[i]], bcb[[(i-1)]])
            } else {
                bcb[[i]]
            }
        })
        bcb <- do.call(bind, bcbd)

        theta.radians <- theta*pi/180
        r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

        y <- r*sin(theta.radians)
        x <- r*cos(theta.radians)

        x1 <- coordinates(bc)[,1 ] + x
        y1 <- coordinates(bc)[,2] + y

        x2 <- coordinates(bc)[,1 ] - x
        y2 <- coordinates(bc)[,2] - y

        line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

        line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
        proj4string(line) <- crs(poly)


        o <- lapply(1:length(bcb), function(i) {
            lpi <- gIntersection(bcb[i,], line)
            blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
            dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
            disaggregate(dpi)
        })

        o <- do.call(bind, o)


        dist <- round(gDistance(poly, o, byid = T),-1)[,1]
        over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

        direction <- sapply(1:length(o), function(i) {
            diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
            round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
        })

        angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
        closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
        direction <- angles[closest.angles]
        direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
        o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                           distance.from.building = dist,
                                                           over.building = over.building,
                                                           direction = direction))
        o
    }
#+end_src

#+RESULTS:

#+begin_src R
  makeNESWRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(45,-45)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)


      dist <- gDistance(poly, o, byid = T)[,1]
      closest.dist <- sapply(dist, function(d) which(abs(buffer.widths - d) == min(abs(buffer.widths - d))))
      dist <- buffer.widths[closest.dist]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          atan2(diff.coords[1], diff.coords[2]) * 180/pi
      })

      angles <- c(0, 90, 180, -180, -90)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
                                          #    direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
          direction <- mapvalues(direction, from = angles, to = c("s","w","n","n","e"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }

#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygonCentroid <- function(polygon, buffer.widths, theta) {

      bc <- gCentroid(polygon)
      bcb <- sapply(buffer.widths, function(w) gBuffer(bc, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(widths)

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(polygon)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.000001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)
      o
  }
#+end_src


#+RESULTS:
**** poly
#+begin_src R
poly <- readWKT("POLYGON ((300278.6608440399868414 4770541.7102104201912880, 300291.3229938599979505 4770541.7700617099180818, 300291.3943529999814928 4770526.6698510395362973, 300278.7322129899985157 4770526.6100080702453852, 300278.6608440399868414 4770541.7102104201912880))")
poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

  poly <- as(poly, "SpatialPolygonsDataFrame")
poly@data$BUILDINGFO = 0
#+end_src

#+RESULTS:

*** full df
#+begin_src R :session *R:energy*
  ## build.res.primary.parcels.tree.building <- shapefile("../DD/buildings.w.parcels.energy.propinfo.tree.building.shp")
  ## colnames(build.res.primary.parcels.tree.building@data) <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.colnames.rds")
  ## build.res.primary.parcels.tree.building@data <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.data.rds")
#+end_src

#+RESULTS:

#+begin_src R
df <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.data.rds")
#df <- readRDS("/Users/erker/git/energy/DD/buildings.w.parcels.energy.propinfo.tree.building.data (1).rds")
#df <- readRDS("/Users/erker/git/energy/DD/data_buildings.w.parcels.energy.propinfo_3m16angles.rds")
#+end_src

#+RESULTS:

prepend "d" to the building cover column names
#+begin_src R
colnames(df)[345:616] <- paste0("d",colnames(df)[345:616])
#+end_src

#+RESULTS:


CHange "NA" Garage.1 to "none"
#+begin_src R
df$Garage.1 <- as.character(df$Garage.1)
df$Garage.1[is.na(df$Garage.1)] <- "none"
#+end_src

#+RESULTS:

#+begin_src R
    df <- mutate(df,
                 kWh_High_C = kWh2kgC(kWh_High),
                 kWh_Avg_C = kWh2kgC(kWh_Mon_Avg_last12mo),
                 Therms_High_C = therm2kgC(Therms_High),
                 Therms_Avg_C = therm2kgC(Therms_Mon_Avg_last12mo),
                 C_gas_and_elec_avg = kWh_Avg_C + Therms_Avg_C,
                 log_C_gas_and_elec_avg = log(C_gas_and_elec_avg),
                 log_C_elec_high = log(kWh_High_C),
                 log_C_gas_high = log(Therms_High_C),
                 log_C_elec_avg = log(kWh_Avg_C),
                 log_C_gas_avg = log(Therms_Avg_C),
                 log_kWh_High = log(kWh_High),
                 log_Therms_High = log(Therms_High),
                 log_kWh_Avg = log(kWh_Mon_Avg_last12mo),
                 log_Therms_Avg = log(Therms_Mon_Avg_last12mo),
                 log_Cost_gas_and_elec_avg = log(Cost_Therms_Avg + Cost_kWh_Avg))

  df <-  df %>% dplyr::filter(Therms_Mon_Avg_last12mo > 10, kWh_Mon_Avg_last12mo > 20, kWh_High > 20, Therms_High > 10)

#+end_src

#+RESULTS:

*** PCA of building covariates

#+begin_src R
  library(dplyr)

  pca.building.covariates <- c("Lot.Size.Sq.Ft",
                                 "Water.Frontage",  "Year.Built",
                               "Stories", "Bedrooms", "Full.Baths", "Half.Baths", "Fireplaces",
                                "First.Floor.Living.Area", "Second.Floor.Living.Area",
                               "Third.Floor.Living.Area", "Finished.Attic",
                               "Finished.Basement", "Total.Basement", "Crawl.Space",
                               "Roof.Replaced.Year",
                               "Garage.Stalls.1", "Garage.Stalls.2",
                                "Current.Year.Improvement.Value.th", "Current.Year.Land.Value.th")

    bc <- df[,pca.building.covariates]
    bc[is.na(bc)] <- "None"
    bc <- bc %>% mutate_if(is.character,as.factor)
    bc <- bc %>% mutate_if(is.factor,as.numeric)

    to.log.transform <- c("Lot.Size.Sq.Ft","First.Floor.Living.Area", "Second.Floor.Living.Area",
                          "Third.Floor.Living.Area", "Finished.Attic", "Finished.Basement",
                          "Total.Basement", "Crawl.Space",
                          "Current.Year.Improvement.Value.th", "Current.Year.Land.Value.th")

    df[to.log.transform] <- data.frame(lapply(df[to.log.transform], as.numeric))
    bc[to.log.transform] <- log(df[to.log.transform] + 1)

    outliers <- c(4283, 68, 73)

                                            # make NA's a level in factor
    bc.o <- bc[-outliers,]

    pca <- prcomp(bc.o, scale. = T)

    #plot(pca)
  #biplot(pca)
#+end_src

#+RESULTS:

#+begin_src R
  df <- df[-outliers,]
  df <- df[, -which(names(df) %in% pca.building.covariates)]
  building.pca <- data.frame(pca$x[,1:7])
  colnames(building.pca) <- paste0("building.pca_",1:7)
  df <- bind_cols(df, building.pca)
#+end_src

#+RESULTS:

*** remove useless variables
#+begin_src R
df <- df %>% select(-BUILDINGFO, -SOURCE, -FootprintT, -BuildingUs, -BuildingCl, -Name, -Shape_area, -Shape_len, -Parcel, -Address, -Dwelling.Units, -Above.Third.Floor.Living.Area, -Total.Living.Area)
#+end_src

#+RESULTS:
*** remove a few more not useful covariates
#+begin_src R

  covariates.to.remove <- c("Ward","State.Assembly.District","Home.Style","Above.Third.Floor.Living.Area",
                            "Exterior.Wall.1",  "Exterior.Wall.2",
                            "Foundation","Roof", "Garage.1",
                            "Garage2","Driveway", "Middle.School","High.School")
  df <- df[, -which(names(df) %in% covariates.to.remove)]

#+end_src

#+RESULTS:

*** Aggregate regions
**** copy df
#+begin_src R
dfc <- df
#+end_src

#+RESULTS:

**** tree cover

Just near and far

angle thresholds used to get the correct aggregation are (and these
aren't exact):
60,115,240,300

#+begin_src R
    near <- 21
    far <- 48

  a1 <- 60
  a2 <- 115
  a3 <- 240
  a4 <- 300

  ## a1 <- 45
  ## a2 <- 135
  ## a3 <- 225
  ## a4 <- 315


          df.t <- dfc[,grep("_[0-9]+_tree", names(dfc))] %>% mutate(id = row.names(.))

          dg <- gather(df.t, region, tree, -id)
          dg <- dg %>%
              mutate(dir = str_split(region, "_",simplify = T)[,1] %>% str_sub(., 2, -1) %>% as.numeric) %>%
              mutate(dist = str_split(region, "_",simplify = T)[,2] %>% as.numeric) %>%
              mutate(dist = ifelse(dist <= near, "near",
                               ifelse(dist > near & dist <= far, "far",NA))) %>%
              mutate(dir =  ifelse(dir > 0 & dir <= a1, "north",
                               ifelse(dir > a1 & dir <=a2, "east",
                               ifelse(dir > a2 & dir <= a3, "south",
                               ifelse(dir > a3 & dir <=a4, "west",
                               ifelse(dir > a4 & dir <=360, "north",NA)))))) %>%
              mutate(region = paste0(dist,"_",dir,"_tree")) %>%
              group_by(id, region) %>%
              summarize(tree = sum(tree)) %>%
              ungroup()

        df.t.n <- spread(dg, region, tree) %>%
            arrange(as.numeric(id)) %>%
            select(-id)


        #rowSums(select(df.t, -id))
        #rowSums(select(df.t.n)

      #remove old tree
      dfc <- dfc[,!grepl("_[0-9]+_tree", names(dfc))]

                                              # add new tree
      dfc <- cbind(dfc, df.t.n)
#+end_src

#+RESULTS:
: Error in mutate_impl(.data, dots) :
:   Evaluation error: object 'region' not found.
: Error in eval_tidy(enquo(var), var_env) : object 'region' not found

**** building cover
#+begin_src R

      df.b <- dfc[,grep("_[0-9]+_building", names(dfc))] %>% mutate(id = row.names(.))

      dg <- gather(df.b, region, building, -id)
      dg <- dg %>%
          mutate(dir = str_split(region, "_",simplify = T)[,1] %>% str_sub(., 2, -1) %>% as.numeric) %>%
          mutate(dist = str_split(region, "_",simplify = T)[,2] %>% as.numeric) %>%
            mutate(dist = ifelse(dist <= near, "near",
                             ifelse(dist > near & dist <= far, "far",NA))) %>%
            mutate(dir =  ifelse(dir > 0 & dir <= a1, "north",
                             ifelse(dir > a1 & dir <=a2, "east",
                             ifelse(dir > a2 & dir <= a3, "south",
                             ifelse(dir > a3 & dir <=a4, "west",
                             ifelse(dir > a4 & dir <=360, "north",NA)))))) %>%
          mutate(region = paste0(dist,"_",dir,"_building")) %>%
          group_by(id, region) %>%
          summarize(building = sum(building)) %>%
          ungroup()

    df.b.n <- spread(dg, region, building) %>%
        arrange(as.numeric(id)) %>%
        select(-id)


    #rowSums(select(df.b, -id))
    #rowSums(select(df.b.n)

  #remove old building
  dfc <- dfc[,!grepl("_[0-9]+_building", names(dfc))]

                                          # add new building
  dfc <- cbind(dfc, df.b.n)
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/dira.png

          poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

            poly <- as(poly, "SpatialPolygonsDataFrame")
          poly@data$BUILDINGFO = 0

          buffer.widths <- c(0,9,48)
  out <- makeRegionsAroundPolygon(poly, buffer.widths = c(d1,d2,d3,dmax), theta = c(0,90))

        out <- as(out, "SpatialPolygonsDataFrame")

        o.df <- out@data %>%
             mutate(over.building = as.numeric(over.building)) %>%
             unite(dir.dist, direction,distance.from.building) %>%
             mutate(term = paste0("d",dir.dist,"_tree"),
                    id = 1:nrow(out@data))

        o.df <- left_join(o.df, dg)

        out@data <- o.df

        o.df <- ggplot2::fortify(out)

        o.df <- join(o.df,out@data)

            ggplot(o.df, aes(x = long, y = lat, fill = tree, group = group)) + geom_polygon() +
                coord_equal() +
                theme(axis.text.y = element_blank(),
                      axis.text.x = element_blank()) +
    #            scale_fill_distiller(palette="greens") +
              theme(legend.text = element_text(size = 14))

#+end_src

*** Fit Models
**** kWh avg
#+begin_src R
         to.remove <- c("kWh_High", "kWh_Mon_Avg_last12mo", "Cost_kWh_High", "Cost_kWh_Avg",
                        "Therms_High", "Therms_Mon_Avg_last12mo", "Cost_Therms_High",
                        "Cost_Therms_Avg", "kWh_High_C", "kWh_Avg_C", "Therms_High_C", "Therms_Avg_C",
                        "C_gas_and_elec_avg", "log_C_gas_and_elec_avg", "log_C_elec_high",
                        "log_C_gas_high", "log_C_elec_avg", "log_C_gas_avg", "log_kWh_High",
                        "log_Therms_High",  "log_Therms_Avg", "log_Cost_gas_and_elec_avg", "Electric_for_Heating")


         df.kwh <- dfc %>% filter(Electric_for_Heating == "No")


         kwh.avg.lmer.log <- lmer(log_kWh_Avg ~ building.pca_1 +
                                      building.pca_2 +
                                      building.pca_3 +
                                      building.pca_4 +
                                      building.pca_5 +
                                      building.pca_6 +
                                      building.pca_7 +
                                      near_west_tree +
                                      near_east_tree +
                                      near_north_tree +
                                      near_south_tree +
    #                                  far_west_tree +
     #                                 far_east_tree +
      #                                far_north_tree +
       #                               far_south_tree +
                                      near_west_building +
                                      near_east_building +
                                      near_north_building +
                                      near_south_building +
     #                                 far_west_building +
      #                                far_east_building +
       #                               far_north_building +
        #                              far_south_building +
                                      Central.Air +
                                      (1|Elementary.School)
                                , data = df.kwh)

#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(kwh.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.45 | -18769.45 | 37576.89 | 37734.94 | 37293.42 |    30259.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.avg.lmer.log), digits = 4)
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |   6.2595 |    0.0145 |  432.3227 | fixed             |
|  2 | building.pca_1                   |   0.0906 |    0.0015 |   59.0879 | fixed             |
|  3 | building.pca_2                   |  -0.0104 |    0.0021 |   -4.8971 | fixed             |
|  4 | building.pca_3                   |   0.0085 |    0.0024 |    3.5976 | fixed             |
|  5 | building.pca_4                   |  -0.0215 |    0.0026 |   -8.3219 | fixed             |
|  6 | building.pca_5                   |  -0.0118 |    0.0026 |   -4.5674 | fixed             |
|  7 | building.pca_6                   |  -0.0007 |    0.0026 |   -0.2716 | fixed             |
|  8 | building.pca_7                   |  -0.0037 |    0.0026 |   -1.4304 | fixed             |
|  9 | near_west_tree                   |   0.0000 |    0.0000 |    1.5916 | fixed             |
| 10 | near_east_tree                   |   0.0000 |    0.0000 |    0.0490 | fixed             |
| 11 | near_north_tree                  |   0.0000 |    0.0000 |    0.4090 | fixed             |
| 12 | near_south_tree                  |  -0.0000 |    0.0000 |   -0.0561 | fixed             |
| 13 | near_west_building               |  -0.0001 |    0.0000 |   -1.7106 | fixed             |
| 14 | near_east_building               |  -0.0000 |    0.0000 |   -0.9312 | fixed             |
| 15 | near_north_building              |  -0.0000 |    0.0000 |   -0.0492 | fixed             |
| 16 | near_south_building              |  -0.0001 |    0.0000 |   -2.4262 | fixed             |
| 17 | Central.Airtrue                  |   0.0883 |    0.0072 |   12.2601 | fixed             |
| 18 | sd_(Intercept).Elementary.School |   0.0484 |           |           | Elementary.School |
| 19 | sd_Observation.Residual          |   0.4476 |           |           | Residual          |
#+END_SRC

#+begin_src R :exports results :results graphics :file ../figs/tree_coefs.png :height 350
  a <- tidy(kwh.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_coefs.png]]


#+begin_src R :exports results :results graphics :file ../figs/kwh_avg_coef_circle.png
    out <- makeRegionsAroundPolygon(poly, buffer.widths = c(d1,d2,d3,dmax), theta = c(0,90))

      dt <- tidy(kwh.avg.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    ## dsig <- dt %>%
    ##     mutate(p.value = 1 - pt(abs(statistic),28013),
    ##            sig = ifelse(p.value < .1, ".", NA),
    ##            sig = ifelse(p.value < .05, "*", sig),
    ##            sig = ifelse(p.value < .01, "**", sig),
    ##            sig = ifelse(p.value < .001, "***", sig),
    ##            lat = c(31, 20, 31, 65, 31, -20, 31, 80),
    ##            long = c(105, 85, 65, 85, 135, 85, 75, 85),
    ##            group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

        o.df <- out@data %>%
             mutate(over.building = as.numeric(over.building)) %>%
             unite(dir.dist, direction,distance.from.building) %>%
             mutate(term = paste0("d",dir.dist,"_tree"),
                    id = as.character(1:nrow(out@data)))

        o.df <- left_join(o.df, dg)


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

  kwh.avg.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg kWh use") +
    #    geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/kwh_avg_coef_circle.png]]


see what was done before

kwh avg
kwh high
therm avg
therm high
kg C
cost dollars

**** therms avg
#+begin_src R
   to.remove <- c("kWh_High", "kWh_Mon_Avg_last12mo", "Cost_kWh_High", "Cost_kWh_Avg",
                  "Therms_High", "Therms_Mon_Avg_last12mo", "Cost_Therms_High",
                  "Cost_Therms_Avg", "kWh_High_C", "kWh_Avg_C", "Therms_High_C", "Therms_Avg_C",
                  "C_gas_and_elec_avg", "log_C_gas_and_elec_avg", "log_C_elec_high",
                  "log_C_gas_high", "log_C_elec_avg", "log_C_gas_avg", "log_kWh_High",
                  "log_Therms_High",  "log_kWh_Avg", "log_Cost_gas_and_elec_avg", "Electric_for_Heating")


   df.therms.avg <- dfc %>% filter(Electric_for_Heating == "No")

  therms.avg.lmer.log <- lmer(log_Therms_Avg ~ building.pca_1 +
                                building.pca_2 +
                                building.pca_3 +
                                building.pca_4 +
                                building.pca_5 +
  #                              building.pca_6 +
   #                             building.pca_7 +
                                near_west_tree +
                                near_east_tree +
                                near_north_tree +
                                near_south_tree +
                                far_west_tree +
                                far_east_tree +
                                far_north_tree +
                                far_south_tree +
                                near_west_building +
                                near_east_building +
                                near_north_building +
                                near_south_building +
                                far_west_building +
                                far_east_building +
                                far_north_building +
                                far_south_building +
                                Central.Air +
                                (1|Elementary.School), data = df.therms.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(therms.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.30 | -6740.50 | 13530.99 | 13738.94 | 13072.30 |    30253.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(therms.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     4.08 |      0.01 |    295.14 | fixed             |
|  2 | building.pca_1                   |     0.10 |      0.00 |     97.47 | fixed             |
|  3 | building.pca_2                   |     0.02 |      0.00 |     14.69 | fixed             |
|  4 | building.pca_3                   |    -0.04 |      0.00 |    -23.04 | fixed             |
|  5 | building.pca_4                   |    -0.03 |      0.00 |    -19.68 | fixed             |
|  6 | building.pca_5                   |    -0.04 |      0.00 |    -22.07 | fixed             |
|  7 | near_west_tree                   |     0.00 |      0.00 |      0.71 | fixed             |
|  8 | near_east_tree                   |     0.00 |      0.00 |      0.04 | fixed             |
|  9 | near_north_tree                  |     0.00 |      0.00 |      0.86 | fixed             |
| 10 | near_south_tree                  |    -0.00 |      0.00 |     -1.66 | fixed             |
| 11 | far_west_tree                    |    -0.00 |      0.00 |     -0.68 | fixed             |
| 12 | far_east_tree                    |     0.00 |      0.00 |      1.82 | fixed             |
| 13 | far_north_tree                   |    -0.00 |      0.00 |     -0.00 | fixed             |
| 14 | far_south_tree                   |    -0.00 |      0.00 |     -1.00 | fixed             |
| 15 | near_west_building               |    -0.00 |      0.00 |     -0.42 | fixed             |
| 16 | near_east_building               |    -0.00 |      0.00 |     -1.55 | fixed             |
| 17 | near_north_building              |    -0.00 |      0.00 |     -3.36 | fixed             |
| 18 | near_south_building              |    -0.00 |      0.00 |     -0.44 | fixed             |
| 19 | far_west_building                |     0.00 |      0.00 |      3.55 | fixed             |
| 20 | far_east_building                |    -0.00 |      0.00 |     -0.05 | fixed             |
| 21 | far_north_building               |     0.00 |      0.00 |      1.52 | fixed             |
| 22 | far_south_building               |     0.00 |      0.00 |      0.48 | fixed             |
| 23 | Central.Airtrue                  |    -0.09 |      0.00 |    -18.87 | fixed             |
| 24 | sd_(Intercept).Elementary.School |     0.06 |           |           | Elementary.School |
| 25 | sd_Observation.Residual          |     0.30 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/therms_avg_resid.png
  dt <- broomify(therms.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/therms_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/therms_avg_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(therms.avg.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

therms.avg.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg Therms use") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/therms_avg_coef_circle.png]]


#+begin_src R
  a <- tidy(therms.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/tree_coefs.png :height 350
library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_coefs.png]]


** Explore relationship between energy and covariates, locally.  [2018-03-16 Fri]
:PROPERTIES:
:header-args:R: :eval yes :session *R:energy* :results output :exports both
:END:
*** libraries
#+begin_src R :tangle yes
    library(plyr)
    library(ascii)
    library(broom)
    library(tidyr)
    library(stringr)
    library(raster)
    library(rgeos)
    library(rgdal)
    library(foreach)
    library(doParallel)
    library(ggplot2)
    library(dplyr)
    library(lme4)
  library(GGally)
#+end_src

#+RESULTS:

*** functions
**** Convert kWh to Carbon kg
https://www.epa.gov/sites/production/files/2015-10/documents/egrid2012_ghgoutputrates_0.pdf
https://www.epa.gov/energy/emissions-generation-resource-integrated-database-egrid
https://www.epa.gov/sites/production/files/2017-02/documents/egrid2014_technicalsupportdocument_v2.pdf

for electricity made in region MRO East
1267.5 lbs/MWh * 1kg /2.20462 lb * 1 MWh / 1000 kWh * 12 /44

#+begin_src R
1267.5 / 2.20462 / 1000 *12 /44
#+end_src

#+RESULTS:
: [1] 0.1567988

#+begin_src R
  kWh2kgC <- function(kWh) {
    kWh * .1567988
}
#+end_src

#+RESULTS:

**** Convert Therm to Carbon kg
see https://www.epa.gov/energy/greenhouse-gases-equivalencies-calculator-calculations-and-references
0.1 mmbtu/1 therm × 14.46 kg C/mmbtu

#+begin_src R
.1*14.46
#+end_src

#+RESULTS:
: [1] 1.446

#+begin_src R
  therm2kgC <- function(therms) {
    therms * 1.446
}
#+end_src

#+RESULTS:

#+RESULTS:

#+RESULTS:
**** other

#+begin_src R

  options(asciiType = "org")
  ascii.nowarn.print <- function(x,...) {
                                          #op <- options(warn = -1)
                                          #      on.exit(options(op))

      suppressWarnings(print(ascii(x,...)))

  }


#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(-67.5,-22.5,22.5,67.5)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)



      dist <- round(gDistance(poly, o, byid = T),-1)[,1]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
      })

      angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
      direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }
#+end_src

#+RESULTS:



#+begin_src R
  makeRegionsAroundPolygon_poolSandN <- function(poly, buffer.widths, theta = c(-22.5,22.5)) {
        bc <- gCentroid(poly)
        bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
        bcbd <- sapply(length(bcb):1, function(i) {
            if(i >1) {
                gDifference(bcb[[i]], bcb[[(i-1)]])
            } else {
                bcb[[i]]
            }
        })
        bcb <- do.call(bind, bcbd)

        theta.radians <- theta*pi/180
        r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

        y <- r*sin(theta.radians)
        x <- r*cos(theta.radians)

        x1 <- coordinates(bc)[,1 ] + x
        y1 <- coordinates(bc)[,2] + y

        x2 <- coordinates(bc)[,1 ] - x
        y2 <- coordinates(bc)[,2] - y

        line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

        line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
        proj4string(line) <- crs(poly)


        o <- lapply(1:length(bcb), function(i) {
            lpi <- gIntersection(bcb[i,], line)
            blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
            dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
            disaggregate(dpi)
        })

        o <- do.call(bind, o)


        dist <- round(gDistance(poly, o, byid = T),-1)[,1]
        over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

        direction <- sapply(1:length(o), function(i) {
            diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
            round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
        })

        angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
        closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
        direction <- angles[closest.angles]
        direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
        o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                           distance.from.building = dist,
                                                           over.building = over.building,
                                                           direction = direction))
        o
    }
#+end_src

#+RESULTS:

#+begin_src R
  makeNESWRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(45,-45)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)


      dist <- gDistance(poly, o, byid = T)[,1]
      closest.dist <- sapply(dist, function(d) which(abs(buffer.widths - d) == min(abs(buffer.widths - d))))
      dist <- buffer.widths[closest.dist]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          atan2(diff.coords[1], diff.coords[2]) * 180/pi
      })

      angles <- c(0, 90, 180, -180, -90)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
                                          #    direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
          direction <- mapvalues(direction, from = angles, to = c("s","w","n","n","e"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }

#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygonCentroid <- function(polygon, buffer.widths, theta) {

      bc <- gCentroid(polygon)
      bcb <- sapply(buffer.widths, function(w) gBuffer(bc, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(widths)

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(polygon)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.000001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)
      o
  }
#+end_src


#+RESULTS:
**** poly
#+begin_src R
poly <- readWKT("POLYGON ((300278.6608440399868414 4770541.7102104201912880, 300291.3229938599979505 4770541.7700617099180818, 300291.3943529999814928 4770526.6698510395362973, 300278.7322129899985157 4770526.6100080702453852, 300278.6608440399868414 4770541.7102104201912880))")
poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

  poly <- as(poly, "SpatialPolygonsDataFrame")
poly@data$BUILDINGFO = 0
#+end_src

#+RESULTS:

*** full df
#+begin_src R :session *R:energy*
  ## build.res.primary.parcels.tree.building <- shapefile("../DD/buildings.w.parcels.energy.propinfo.tree.building.shp")
  ## colnames(build.res.primary.parcels.tree.building@data) <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.colnames.rds")
  ## build.res.primary.parcels.tree.building@data <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.data.rds")
#+end_src

#+RESULTS:

#+begin_src R
df <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.data.rds")
#+end_src

#+RESULTS:

prepend "d" to the building cover column names
#+begin_src R
colnames(df)[345:616] <- paste0("d",colnames(df)[345:616])
#+end_src

#+RESULTS:


CHange "NA" Garage.1 to "none"
#+begin_src R
df$Garage.1 <- as.character(df$Garage.1)
df$Garage.1[is.na(df$Garage.1)] <- "none"
#+end_src

#+RESULTS:

#+begin_src R
    df <- mutate(df,
                 kWh_High_C = kWh2kgC(kWh_High),
                 kWh_Avg_C = kWh2kgC(kWh_Mon_Avg_last12mo),
                 Therms_High_C = therm2kgC(Therms_High),
                 Therms_Avg_C = therm2kgC(Therms_Mon_Avg_last12mo),
                 C_gas_and_elec_avg = kWh_Avg_C + Therms_Avg_C,
                 log_C_gas_and_elec_avg = log(C_gas_and_elec_avg),
                 log_C_elec_high = log(kWh_High_C),
                 log_C_gas_high = log(Therms_High_C),
                 log_C_elec_avg = log(kWh_Avg_C),
                 log_C_gas_avg = log(Therms_Avg_C),
                 log_kWh_High = log(kWh_High),
                 log_Therms_High = log(Therms_High),
                 log_kWh_Avg = log(kWh_Mon_Avg_last12mo),
                 log_Therms_Avg = log(Therms_Mon_Avg_last12mo),
                 log_Cost_gas_and_elec_avg = log(Cost_Therms_Avg + Cost_kWh_Avg))

  df <-  df %>% dplyr::filter(Therms_Mon_Avg_last12mo > 10, kWh_Mon_Avg_last12mo > 20, kWh_High > 20, Therms_High > 10)

#+end_src

#+RESULTS:

*** PCA of building covariates

#+begin_src R
  library(dplyr)

  pca.building.covariates <- c("Lot.Size.Sq.Ft",
                                 "Water.Frontage",  "Year.Built",
                               "Stories", "Bedrooms", "Full.Baths", "Half.Baths", "Fireplaces",
                                "First.Floor.Living.Area", "Second.Floor.Living.Area",
                               "Third.Floor.Living.Area", "Finished.Attic",
                               "Finished.Basement", "Total.Basement", "Crawl.Space",
                               "Roof.Replaced.Year",
                               "Garage.Stalls.1", "Garage.Stalls.2",
                                "Current.Year.Improvement.Value.th", "Current.Year.Land.Value.th")

    bc <- df[,pca.building.covariates]
    bc[is.na(bc)] <- "None"
    bc <- bc %>% mutate_if(is.character,as.factor)
    bc <- bc %>% mutate_if(is.factor,as.numeric)

    to.log.transform <- c("Lot.Size.Sq.Ft","First.Floor.Living.Area", "Second.Floor.Living.Area",
                          "Third.Floor.Living.Area", "Finished.Attic", "Finished.Basement",
                          "Total.Basement", "Crawl.Space",
                          "Current.Year.Improvement.Value.th", "Current.Year.Land.Value.th")

    df[to.log.transform] <- data.frame(lapply(df[to.log.transform], as.numeric))
    bc[to.log.transform] <- log(df[to.log.transform] + 1)

    outliers <- c(4283, 68, 73)

                                            # make NA's a level in factor
    bc.o <- bc[-outliers,]

    pca <- prcomp(bc.o, scale. = T)

    #plot(pca)
  #biplot(pca)
#+end_src

#+RESULTS:

#+begin_src R
  df <- df[-outliers,]
  df <- df[, -which(names(df) %in% pca.building.covariates)]
  building.pca <- data.frame(pca$x[,1:7])
  colnames(building.pca) <- paste0("building.pca_",1:7)
  df <- bind_cols(df, building.pca)
#+end_src

#+RESULTS:

*** remove useless variables
#+begin_src R
df <- df %>% select(-BUILDINGFO, -SOURCE, -FootprintT, -BuildingUs, -BuildingCl, -Name, -Shape_area, -Shape_len, -Parcel, -Address, -Dwelling.Units, -Above.Third.Floor.Living.Area, -Total.Living.Area)
#+end_src

#+RESULTS:
*** remove a few more not useful covariates
#+begin_src R

  covariates.to.remove <- c("Ward","State.Assembly.District","Home.Style","Above.Third.Floor.Living.Area",
                            "Exterior.Wall.1",  "Exterior.Wall.2",
                            "Foundation","Roof", "Garage.1",
                            "Garage2","Driveway", "Middle.School","High.School")
  df <- df[, -which(names(df) %in% covariates.to.remove)]

#+end_src

#+RESULTS:
*** Tree PCA
#+begin_src R
df.t <- df[,grep("_[0-9]+_tree", names(df))]
#+end_src

#+RESULTS:

#+begin_src R
library(data.table)
df.t <- as.data.table(df.t)
df.t <- df.t[,which(unlist(lapply(df.t, function(x)!all(is.na(x))))),with=F]
#+end_src

#+RESULTS:

remove three incomplete cases
#+begin_src R
df.t <- df.t[complete.cases(df.t),]
#+end_src

#+RESULTS:

#+begin_src R
pca <-  prcomp(df.t, scale. = T)
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/tree_pca_3m16angles.png
plot(pca)
#+end_src

#+RESULTS:
[[file:../figs/tree_pca_3m16angles.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_sum.png
    poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

      poly <- as(poly, "SpatialPolygonsDataFrame")
    poly@data$BUILDINGFO = 0

    buffer.widths <- seq(0,51,3)
    out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  df.t.sum <- apply(df.t, 2, sum)
  df.t.sum <- data.frame(term = names(df.t.sum), sum = df.t.sum)


  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, df.t.sum)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = sum, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("Sum of Tree Cover") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_distiller(palette = "Greens", direction = 1) +
        theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/tree_sum.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca1.png
  poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

    poly <- as(poly, "SpatialPolygonsDataFrame")
  poly@data$BUILDINGFO = 0

  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,1])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC1") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca1.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca2.png
  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,2])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)


      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC2") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca2.png]]
9m, 33m


#+begin_src R :exports results :results graphics :file ../figs/tree_pca3.png
  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,3])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC3") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca3.png]]
18m

#+begin_src R :exports results :results graphics :file ../figs/tree_pca4.png
  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,4])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC4") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca4.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca5.png
  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,5])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC5") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca5.png]]


#+begin_src R :exports results :results graphics :file ../figs/tree_pca6.png
  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,6])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC6") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca6.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_pca7.png
  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,7])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC7") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca7.png]]
Starting to look a bit noisy

#+begin_src R :exports results :results graphics :file ../figs/tree_pca8.png
  buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

  dt <- data.frame(term = dimnames(pca$rotation)[[1]], PC = pca$rotation[,8])

  #Unite and join the coefficients to the sp, then fortify
  out <- as(out, "SpatialPolygonsDataFrame")

  o.df <- out@data %>%
       mutate(over.building = as.numeric(over.building)) %>%
       unite(dir.dist, direction,distance.from.building,over.building) %>%
       mutate(term = paste0("d",dir.dist,"_tree"),
              id = 1:nrow(out@data))

  o.df <- left_join(o.df, dt)

  out@data <- o.df

  o.df <- ggplot2::fortify(out)

  o.df <- join(o.df,out@data)

      ggplot(o.df, aes(x = long, y = lat, fill = PC, group = group)) + geom_polygon() +
          coord_equal() +
          ggtitle("PC8") +
          theme(axis.text.y = element_blank(),
                axis.text.x = element_blank()) +
          scale_fill_gradient2(low = "#2166ac", high = "#68001f") +
        theme(legend.text = element_text(size = 14))
#+end_src

#+RESULTS:
[[file:../figs/tree_pca8.png]]
Starting to look a bit noisier

*** Building Cover
#+begin_src R
df.b <- df[,grep("_[0-9]+_building", names(df))]
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/building_sum.png :height 800 :width 800
      poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

        poly <- as(poly, "SpatialPolygonsDataFrame")
      poly@data$BUILDINGFO = 0

      buffer.widths <- seq(0,51,3)
      out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)

    df.b.sum <- apply(df.b, 2, sum)
    df.b.sum <- data.frame(term = names(df.b.sum), sum = df.b.sum)


    out <- as(out, "SpatialPolygonsDataFrame")

    o.df <- out@data %>%
         mutate(over.building = as.numeric(over.building)) %>%
         unite(dir.dist, direction,distance.from.building,over.building) %>%
         mutate(term = paste0("d",dir.dist,"_building"),
                id = 1:nrow(out@data))

    o.df <- left_join(o.df, df.b.sum)

    out@data <- o.df

    o.df <- ggplot2::fortify(out)

    o.df <- join(o.df,out@data)

        ggplot(o.df, aes(x = long, y = lat, fill = sum, group = group)) + geom_polygon() +
            coord_equal() +
            ggtitle("Sum of Building Cover") +
            theme(axis.text.y = element_blank(),
                  axis.text.x = element_blank()) +
  #          scale_fill_distiller("greens") +
          theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/building_sum.png]]

*** testing aggregations of regions
9 18 33
**** copy df
#+begin_src R
dfc <- df
#+end_src

#+RESULTS:

**** tree cover
#+begin_src R
      d0 <- 0
      d1 <- 9
      d2 <- 18
      d3 <- 33
      dmax <- 48

      df.t <- dfc[,grep("_[0-9]+_tree", names(dfc))] %>% mutate(id = row.names(.))

      dg <- gather(df.t, region, tree, -id)
      dg <- dg %>%
          mutate(dir = str_split(region, "_",simplify = T)[,1] %>% str_sub(., 2, -1) %>% as.numeric) %>%
          mutate(dist = str_split(region, "_",simplify = T)[,2] %>% as.numeric) %>%
          mutate(dist = ifelse(dist <= d1, d0,
                           ifelse(dist > d1 & dist <= d2, d1,
                           ifelse(dist >= d2 & dist <= d3, d2,
                           ifelse(dist >= d3 & dist <=dmax, d3, NA))))) %>%
          mutate(dir =  ifelse(dir > 0 & dir <=90, 45,
                           ifelse(dir > 90 & dir <=180, 135,
                           ifelse(dir > 180 & dir <=270, 225,
                           ifelse(dir > 270 & dir <=360, 315, NA))))) %>%
          mutate(region = paste0("d",dir,"_",dist,"_tree")) %>%
          group_by(id, region) %>%
          summarize(tree = sum(tree)) %>%
          ungroup()

    df.t.n <- spread(dg, region, tree) %>%
        arrange(as.numeric(id)) %>%
        select(-id)


    #rowSums(select(df.t, -id))
    #rowSums(select(df.t.n)

  #remove old tree
  dfc <- dfc[,!grepl("_[0-9]+_tree", names(dfc))]

                                          # add new tree
  dfc <- cbind(dfc, df.t.n)
#+end_src

#+RESULTS:

**** building cover
#+begin_src R
      d0 <- 0
      d1 <- 9
      d2 <- 18
      d3 <- 33
      dmax <- 48

      df.b <- dfc[,grep("_[0-9]+_building", names(dfc))] %>% mutate(id = row.names(.))

      dg <- gather(df.b, region, building, -id)
      dg <- dg %>%
          mutate(dir = str_split(region, "_",simplify = T)[,1] %>% str_sub(., 2, -1) %>% as.numeric) %>%
          mutate(dist = str_split(region, "_",simplify = T)[,2] %>% as.numeric) %>%
          mutate(dist = ifelse(dist <= d1, d0,
                           ifelse(dist > d1 & dist <= d2, d1,
                           ifelse(dist >= d2 & dist <= d3, d2,
                           ifelse(dist >= d3 & dist <=dmax, d3, NA))))) %>%
          mutate(dir =  ifelse(dir > 0 & dir <=90, 45,
                           ifelse(dir > 90 & dir <=180, 135,
                           ifelse(dir > 180 & dir <=270, 225,
                           ifelse(dir > 270 & dir <=360, 315, NA))))) %>%
          mutate(region = paste0("d",dir,"_",dist,"_building")) %>%
          group_by(id, region) %>%
          summarize(building = sum(building)) %>%
          ungroup()

    df.b.n <- spread(dg, region, building) %>%
        arrange(as.numeric(id)) %>%
        select(-id)


    #rowSums(select(df.b, -id))
    #rowSums(select(df.b.n)

  #remove old building
  dfc <- dfc[,!grepl("_[0-9]+_building", names(dfc))]

                                          # add new tree
  dfc <- cbind(dfc, df.b.n)
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/dira.png

          poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

            poly <- as(poly, "SpatialPolygonsDataFrame")
          poly@data$BUILDINGFO = 0

          buffer.widths <- seq(0,51,3)
  out <- makeRegionsAroundPolygon(poly, buffer.widths = c(d1,d2,d3,dmax), theta = c(0,90))

        out <- as(out, "SpatialPolygonsDataFrame")

        o.df <- out@data %>%
             mutate(over.building = as.numeric(over.building)) %>%
             unite(dir.dist, direction,distance.from.building) %>%
             mutate(term = paste0("d",dir.dist,"_tree"),
                    id = 1:nrow(out@data))

        o.df <- left_join(o.df, dg)

        out@data <- o.df

        o.df <- ggplot2::fortify(out)

        o.df <- join(o.df,out@data)

            ggplot(o.df, aes(x = long, y = lat, fill = tree, group = group)) + geom_polygon() +
                coord_equal() +
                theme(axis.text.y = element_blank(),
                      axis.text.x = element_blank()) +
    #            scale_fill_distiller(palette="greens") +
              theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/direction.png]]

**** kWh avg
#+begin_src R
  to.remove <- c("kWh_High", "kWh_Mon_Avg_last12mo", "Cost_kWh_High", "Cost_kWh_Avg",
                 "Therms_High", "Therms_Mon_Avg_last12mo", "Cost_Therms_High",
                 "Cost_Therms_Avg", "kWh_High_C", "kWh_Avg_C", "Therms_High_C", "Therms_Avg_C",
                 "C_gas_and_elec_avg", "log_C_gas_and_elec_avg", "log_C_elec_high",
                 "log_C_gas_high", "log_C_elec_avg", "log_C_gas_avg", "log_kWh_High",
                 "log_Therms_High",  "log_Therms_Avg", "log_Cost_gas_and_elec_avg", "Electric_for_Heating")


  df.kwh <- dfc %>% filter(Electric_for_Heating == "No")


  kwh.avg.lmer.log <- lmer(log_kWh_Avg ~ building.pca_1 +
                               building.pca_2 +
                               building.pca_3 +
                               building.pca_4 +
                               building.pca_5 +
                               building.pca_6 +
                               building.pca_7 +
                               d135_0_tree +
                               d135_18_tree +
                               d135_33_tree +
                               d135_9_tree +
                               d225_0_tree +
                               d225_18_tree +
                               d225_33_tree +
                               d225_9_tree +
                               d315_0_tree +
                               d315_18_tree +
                               d315_33_tree +
                               d315_9_tree +
                               d45_0_tree +
                               d45_18_tree +
                               d45_33_tree +
                               d45_9_tree +
                               d135_0_building +
                               d135_18_building +
                               d135_33_building +
                               d135_9_building +
                               d225_0_building +
                               d225_18_building +
                               d225_33_building +
                               d225_9_building +
                               d315_0_building +
                               d315_18_building +
                               d315_33_building +
                               d315_9_building +
                               d45_0_building +
                               d45_18_building +
                               d45_33_building +
                               d45_9_building +
                               (1|Elementary.School), data = df.kwh)

#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(kwh.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.45 | -19084.55 | 38253.11 | 38602.47 | 37483.18 |    30240.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     6.35 |      0.02 |    413.89 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     61.27 | fixed             |
|  3 | building.pca_2                   |    -0.01 |      0.00 |     -5.62 | fixed             |
|  4 | building.pca_3                   |     0.01 |      0.00 |      5.25 | fixed             |
|  5 | building.pca_4                   |    -0.02 |      0.00 |     -7.95 | fixed             |
|  6 | building.pca_5                   |    -0.01 |      0.00 |     -3.76 | fixed             |
|  7 | building.pca_6                   |    -0.00 |      0.00 |     -0.70 | fixed             |
|  8 | building.pca_7                   |    -0.00 |      0.00 |     -1.71 | fixed             |
|  9 | d135_0_tree                      |    -0.00 |      0.00 |     -3.38 | fixed             |
| 10 | d135_18_tree                     |    -0.00 |      0.00 |     -1.24 | fixed             |
| 11 | d135_33_tree                     |     0.00 |      0.00 |      1.11 | fixed             |
| 12 | d135_9_tree                      |     0.00 |      0.00 |      2.06 | fixed             |
| 13 | d225_0_tree                      |     0.00 |      0.00 |      2.37 | fixed             |
| 14 | d225_18_tree                     |    -0.00 |      0.00 |     -0.23 | fixed             |
| 15 | d225_33_tree                     |     0.00 |      0.00 |      0.17 | fixed             |
| 16 | d225_9_tree                      |    -0.00 |      0.00 |     -0.26 | fixed             |
| 17 | d315_0_tree                      |     0.00 |      0.00 |      0.81 | fixed             |
| 18 | d315_18_tree                     |     0.00 |      0.00 |      0.14 | fixed             |
| 19 | d315_33_tree                     |    -0.00 |      0.00 |     -1.09 | fixed             |
| 20 | d315_9_tree                      |    -0.00 |      0.00 |     -0.99 | fixed             |
| 21 | d45_0_tree                       |     0.00 |      0.00 |      1.51 | fixed             |
| 22 | d45_18_tree                      |    -0.00 |      0.00 |     -0.35 | fixed             |
| 23 | d45_33_tree                      |     0.00 |      0.00 |      0.17 | fixed             |
| 24 | d45_9_tree                       |     0.00 |      0.00 |      0.11 | fixed             |
| 25 | d135_0_building                  |    -0.00 |      0.00 |     -0.78 | fixed             |
| 26 | d135_18_building                 |    -0.00 |      0.00 |     -1.28 | fixed             |
| 27 | d135_33_building                 |    -0.00 |      0.00 |     -1.63 | fixed             |
| 28 | d135_9_building                  |     0.00 |      0.00 |      0.51 | fixed             |
| 29 | d225_0_building                  |    -0.00 |      0.00 |     -0.25 | fixed             |
| 30 | d225_18_building                 |    -0.00 |      0.00 |     -0.19 | fixed             |
| 31 | d225_33_building                 |    -0.00 |      0.00 |     -1.90 | fixed             |
| 32 | d225_9_building                  |    -0.00 |      0.00 |     -1.03 | fixed             |
| 33 | d315_0_building                  |     0.00 |      0.00 |      0.91 | fixed             |
| 34 | d315_18_building                 |     0.00 |      0.00 |      2.15 | fixed             |
| 35 | d315_33_building                 |    -0.00 |      0.00 |     -0.33 | fixed             |
| 36 | d315_9_building                  |    -0.00 |      0.00 |     -0.42 | fixed             |
| 37 | d45_0_building                   |    -0.00 |      0.00 |     -0.30 | fixed             |
| 38 | d45_18_building                  |    -0.00 |      0.00 |     -1.55 | fixed             |
| 39 | d45_33_building                  |    -0.00 |      0.00 |     -1.38 | fixed             |
| 40 | d45_9_building                   |     0.00 |      0.00 |      0.23 | fixed             |
| 41 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 42 | sd_Observation.Residual          |     0.45 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/kwh_avg_resid.png
  dt <- broomify(kwh.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/kwh_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/kwh_avg_coef_circle.png
    out <- makeRegionsAroundPolygon(poly, buffer.widths = c(d1,d2,d3,dmax), theta = c(0,90))

      dt <- tidy(kwh.avg.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    ## dsig <- dt %>%
    ##     mutate(p.value = 1 - pt(abs(statistic),28013),
    ##            sig = ifelse(p.value < .1, ".", NA),
    ##            sig = ifelse(p.value < .05, "*", sig),
    ##            sig = ifelse(p.value < .01, "**", sig),
    ##            sig = ifelse(p.value < .001, "***", sig),
    ##            lat = c(31, 20, 31, 65, 31, -20, 31, 80),
    ##            long = c(105, 85, 65, 85, 135, 85, 75, 85),
    ##            group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

        o.df <- out@data %>%
             mutate(over.building = as.numeric(over.building)) %>%
             unite(dir.dist, direction,distance.from.building) %>%
             mutate(term = paste0("d",dir.dist,"_tree"),
                    id = as.character(1:nrow(out@data)))

        o.df <- left_join(o.df, dg)


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

  kwh.avg.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg kWh use") +
    #    geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/kwh_avg_coef_circle.png]]

*** PLSR to predict kwh avg
#+begin_src R
library(pls)
#+end_src

#+RESULTS:
:
: Attaching package: ‘pls’
:
: The following object is masked from ‘package:stats’:
:
:     loadings

#+begin_src R
  vars.to.select <- c(
      #colnames(df)[grep(".*_tree",colnames(df))],
        #                           colnames(df)[grep(".*_building",colnames(df))],
                                   colnames(df)[grep("building.pca_[0-9]",colnames(df))],
        #                           "Central.Air",
         #                          "Electric_for_Heating",
                                   "log_kWh_Avg")

        #df.t comes from tree pca

    df.t <- as.data.table(df)
    df.t <- df.t[,which(unlist(lapply(df.t, function(x)!all(is.na(x))))),with=F]
    df.t <- df.t[complete.cases(df.t),]

  m.t <- as.matrix(df.t[,grep("_[0-9]+_tree", names(df.t)), with = F])

  df.kwh <- df.t[,which(names(df.t) %in% vars.to.select), with = F] %>%
      as.data.frame()


  df.kwh$tree <- m.t

  pm <- plsr(log_kWh_Avg ~ ., ncomp = 100, data = df.kwh)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/plsr_coef.png
  df.cf <- data.frame(row.names(coef(pm)), coef(pm))
  names(df.cf) <- c("term", "effect")
df.cf <- df.cf[8:271,]

      poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

        poly <- as(poly, "SpatialPolygonsDataFrame")
      poly@data$BUILDINGFO = 0

      buffer.widths <- seq(0,51,3)
      out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)


    out <- as(out, "SpatialPolygonsDataFrame")

    o.df <- out@data %>%
         mutate(over.building = as.numeric(over.building)) %>%
         unite(dir.dist, direction,distance.from.building,over.building) %>%
         mutate(term = paste0("treed",dir.dist,"_tree"),
                id = 1:nrow(out@data))

    o.df <- left_join(o.df, df.cf)

    out@data <- o.df

    o.df <- ggplot2::fortify(out)

    o.df <- join(o.df,out@data)

        ggplot(o.df, aes(x = long, y = lat, fill = effect, group = group)) + geom_polygon() +
            coord_equal() +
            ggtitle("PLSR coefficients") +
            theme(axis.text.y = element_blank(),
                  axis.text.x = element_blank()) +
            scale_fill_distiller("greens") +
          theme(legend.text = element_text(size = 14))


#+end_src

#+RESULTS:
[[file:../figs/plsr_coef.png]]

*** correlations, just trees with kwh avg
#+begin_src R
    vars.to.select <- c(colnames(df)[grep(".*_tree",colnames(df))],
                        "log_kWh_Avg")


      df.t <- as.data.table(df)
      df.t <- df.t[,which(unlist(lapply(df.t, function(x)!all(is.na(x))))),with=F]
      df.t <- df.t[complete.cases(df.t),]

    df.kwh <- df.t[,which(names(df.t) %in% vars.to.select), with = F] %>%
        as.data.frame()

  ct <- cor(df.kwh[,1:288],df.kwh[,289])

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/correlations.png
  df.cf <- data.frame(row.names(ct), ct)
  names(df.cf) <- c("term", "r")

      poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

        poly <- as(poly, "SpatialPolygonsDataFrame")
      poly@data$BUILDINGFO = 0

      buffer.widths <- seq(0,51,3)
      out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)


    out <- as(out, "SpatialPolygonsDataFrame")

    o.df <- out@data %>%
         mutate(over.building = as.numeric(over.building)) %>%
         unite(dir.dist, direction,distance.from.building,over.building) %>%
         mutate(term = paste0("d",dir.dist,"_tree"),
                id = 1:nrow(out@data))

    o.df <- left_join(o.df, df.cf)

    out@data <- o.df

    o.df <- ggplot2::fortify(out)

    o.df <- join(o.df,out@data)

        ggplot(o.df, aes(x = long, y = lat, fill = r, group = group)) + geom_polygon() +
            coord_equal() +
            ggtitle("correlation") +
            theme(axis.text.y = element_blank(),
                  axis.text.x = element_blank()) +
#            scale_fill_distiller(palette="greens") +
          theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/correlations.png]]

*** correlations, just trees with residuals of kwh avg model
#+begin_src R
    vars.to.select <- colnames(df)[!grepl(".*_tree",colnames(df))]

      df.n <- as.data.table(df)
      df.n <- df.t[,which(unlist(lapply(df.n, function(x)!all(is.na(x))))),with=F]
      df.n <- df.t[complete.cases(df.n),]

    df.nt <- df.n[,which(names(df.n) %in% vars.to.select), with = F] %>%
        as.data.frame()



  ct <- cor(df.kwh[,1:264],df.kwh[,265])

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/correlations.png
  df.cf <- data.frame(row.names(ct), ct)
  names(df.cf) <- c("term", "r")

      poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

        poly <- as(poly, "SpatialPolygonsDataFrame")
      poly@data$BUILDINGFO = 0

      buffer.widths <- seq(0,51,3)
      out <- makeRegionsAroundPolygonManyAngles(poly, buffer.widths)


    out <- as(out, "SpatialPolygonsDataFrame")

    o.df <- out@data %>%
         mutate(over.building = as.numeric(over.building)) %>%
         unite(dir.dist, direction,distance.from.building,over.building) %>%
         mutate(term = paste0("d",dir.dist,"_tree"),
                id = 1:nrow(out@data))

    o.df <- left_join(o.df, df.cf)

    out@data <- o.df

    o.df <- ggplot2::fortify(out)

    o.df <- join(o.df,out@data)

        ggplot(o.df, aes(x = long, y = lat, fill = r, group = group)) + geom_polygon() +
            coord_equal() +
            ggtitle("correlation") +
            theme(axis.text.y = element_blank(),
                  axis.text.x = element_blank()) +
            scale_fill_distiller(palette="Spectral") +
          theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/correlations.png]]

** Explore relationship between energy and covariates  DO this locally (copy from krusty back to local)
:PROPERTIES:
:header-args:R: :eval yes :session *R:energy* :results output :exports both
:END:
*** libraries
#+begin_src R :tangle yes
    library(plyr)
    library(ascii)
    library(broom)
    library(tidyr)
    library(stringr)
    library(raster)
    library(rgeos)
    library(rgdal)
    library(foreach)
    library(doParallel)
    library(ggplot2)
    library(dplyr)
    library(lme4)
  library(GGally)
#+end_src

#+RESULTS:
#+begin_example

Attaching package: ‘tidyr’

The following object is masked from ‘package:ascii’:

    expand
Loading required package: sp

Attaching package: ‘raster’

The following object is masked from ‘package:tidyr’:

    extract
rgeos version: 0.3-26, (SVN revision 560)
 GEOS runtime version: 3.6.1-CAPI-1.10.1 r0
 Linking to sp version: 1.2-5
 Polygon checking: TRUE
rgdal: version: 1.2-15, (SVN revision 691)
 Geospatial Data Abstraction Library extensions to R successfully loaded
 Loaded GDAL runtime: GDAL 2.1.3, released 2017/20/01
 Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgdal/gdal
 GDAL binary built with GEOS: FALSE
 Loaded PROJ.4 runtime: Rel. 4.9.3, 15 August 2016, [PJ_VERSION: 493]
 Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgdal/proj
 Linking to sp version: 1.2-5
foreach: simple, scalable parallel programming from Revolution Analytics
Use Revolution R for scalability, fault tolerance and more.
http://www.revolutionanalytics.com
Error in library(doParallel) : there is no package called ‘doParallel’

Attaching package: ‘ggplot2’

The following object is masked from ‘package:raster’:

    calc

Attaching package: ‘dplyr’

The following objects are masked from ‘package:rgeos’:

    intersect, setdiff, union

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:tidyr’:

    expand

The following object is masked from ‘package:ascii’:

    expand
#+end_example

*** functions
***** Convert kWh to Carbon kg
https://www.epa.gov/sites/production/files/2015-10/documents/egrid2012_ghgoutputrates_0.pdf
https://www.epa.gov/energy/emissions-generation-resource-integrated-database-egrid
https://www.epa.gov/sites/production/files/2017-02/documents/egrid2014_technicalsupportdocument_v2.pdf

for electricity made in region MRO East
1267.5 lbs/MWh * 1kg /2.20462 lb * 1 MWh / 1000 kWh * 12 /44

#+begin_src R
1267.5 / 2.20462 / 1000 *12 /44
#+end_src

#+RESULTS:
: [1] 0.1567988

#+begin_src R
  kWh2kgC <- function(kWh) {
    kWh * .1567988
}
#+end_src

#+RESULTS:

***** Convert Therm to Carbon kg
see https://www.epa.gov/energy/greenhouse-gases-equivalencies-calculator-calculations-and-references
0.1 mmbtu/1 therm × 14.46 kg C/mmbtu

#+begin_src R
.1*14.46
#+end_src

#+RESULTS:
: [1] 1.446

#+begin_src R
  therm2kgC <- function(therms) {
    therms * 1.446
}
#+end_src

#+RESULTS:

#+RESULTS:

#+RESULTS:
***** other

#+begin_src R

  options(asciiType = "org")
  ascii.nowarn.print <- function(x,...) {
                                          #op <- options(warn = -1)
                                          #      on.exit(options(op))

      suppressWarnings(print(ascii(x,...)))

  }


#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(-67.5,-22.5,22.5,67.5)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)



      dist <- round(gDistance(poly, o, byid = T),-1)[,1]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
      })

      angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
      direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }
#+end_src

#+RESULTS:



#+begin_src R
  makeRegionsAroundPolygon_poolSandN <- function(poly, buffer.widths, theta = c(-22.5,22.5)) {
        bc <- gCentroid(poly)
        bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
        bcbd <- sapply(length(bcb):1, function(i) {
            if(i >1) {
                gDifference(bcb[[i]], bcb[[(i-1)]])
            } else {
                bcb[[i]]
            }
        })
        bcb <- do.call(bind, bcbd)

        theta.radians <- theta*pi/180
        r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

        y <- r*sin(theta.radians)
        x <- r*cos(theta.radians)

        x1 <- coordinates(bc)[,1 ] + x
        y1 <- coordinates(bc)[,2] + y

        x2 <- coordinates(bc)[,1 ] - x
        y2 <- coordinates(bc)[,2] - y

        line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

        line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
        proj4string(line) <- crs(poly)


        o <- lapply(1:length(bcb), function(i) {
            lpi <- gIntersection(bcb[i,], line)
            blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
            dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
            disaggregate(dpi)
        })

        o <- do.call(bind, o)


        dist <- round(gDistance(poly, o, byid = T),-1)[,1]
        over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

        direction <- sapply(1:length(o), function(i) {
            diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
            round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
        })

        angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
        closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
        direction <- angles[closest.angles]
        direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
        o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                           distance.from.building = dist,
                                                           over.building = over.building,
                                                           direction = direction))
        o
    }
#+end_src

#+RESULTS:

#+begin_src R
  makeNESWRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(45,-45)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)


      dist <- gDistance(poly, o, byid = T)[,1]
      closest.dist <- sapply(dist, function(d) which(abs(buffer.widths - d) == min(abs(buffer.widths - d))))
      dist <- buffer.widths[closest.dist]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          atan2(diff.coords[1], diff.coords[2]) * 180/pi
      })

      angles <- c(0, 90, 180, -180, -90)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
                                          #    direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
          direction <- mapvalues(direction, from = angles, to = c("s","w","n","n","e"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }

#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygonCentroid <- function(polygon, buffer.widths, theta) {

      bc <- gCentroid(polygon)
      bcb <- sapply(buffer.widths, function(w) gBuffer(bc, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(widths)

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(polygon)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.000001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)
      o
  }
#+end_src


#+RESULTS:
***** poly
#+begin_src R
poly <- readWKT("POLYGON ((300278.6608440399868414 4770541.7102104201912880, 300291.3229938599979505 4770541.7700617099180818, 300291.3943529999814928 4770526.6698510395362973, 300278.7322129899985157 4770526.6100080702453852, 300278.6608440399868414 4770541.7102104201912880))")
poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

  poly <- as(poly, "SpatialPolygonsDataFrame")
poly@data$BUILDINGFO = 0
#+end_src

#+RESULTS:

*** Format Dataframes
**** full df
#+begin_src R :session *R:energy*
  build.res.primary.parcels.tree.building <- shapefile("../DD/buildings.w.parcels.energy.propinfo.tree.building.shp")
  colnames(build.res.primary.parcels.tree.building@data) <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.colnames.rds")
  build.res.primary.parcels.tree.building@data <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.data.rds")
#+end_src

#+RESULTS:

#+begin_src R
a <- readRDS("/Users/erker/g/projects/energy/DD/colnames.buildings.w.parcels.energy.propinfo.rds")
colnames(build.res.primary.parcels.tree.building@data)[1:56] <- a
#+end_src

#+RESULTS:

CHange "NA" Garage.1 to "none"
#+begin_src R
build.res.primary.parcels.tree.building@data$Garage.1[is.na(build.res.primary.parcels.tree.building@data$Garage.1)] <- "none"
#+end_src

#+RESULTS:
: Warning message:
: In `[<-.factor`(`*tmp*`, is.na(build.res.primary.parcels.tree.building@data$Garage.1),  :
:   invalid factor level, NA generated

#+begin_src R
  df <- build.res.primary.parcels.tree.building@data

#+end_src

#+RESULTS:

#+begin_src R
      df <- mutate(df,
                   kWh_High_C = kWh2kgC(kWh_High),
                   kWh_Avg_C = kWh2kgC(kWh_Mon_Avg_last12mo),
                   Therms_High_C = therm2kgC(Therms_High),
                   Therms_Avg_C = therm2kgC(Therms_Mon_Avg_last12mo),
                   C_gas_and_elec_avg = kWh_Avg_C + Therms_Avg_C,
                   log_C_gas_and_elec_avg = log(C_gas_and_elec_avg),
                   log_C_elec_high = log(kWh_High_C),
                   log_C_gas_high = log(Therms_High_C),
                   log_C_elec_avg = log(kWh_Avg_C),
                   log_C_gas_avg = log(Therms_Avg_C),
                   log_kWh_High = log(kWh_High),
                   log_Therms_High = log(Therms_High),
                   log_kWh_Avg = log(kWh_Mon_Avg_last12mo),
                   log_Therms_Avg = log(Therms_Mon_Avg_last12mo),
                   log_Cost_gas_and_elec_avg = log(Cost_Therms_Avg + Cost_kWh_Avg))

    build.res.primary.parcels.tree.building@data <- df

    df <-  build.res.primary.parcels.tree.building@data %>% dplyr::filter(Therms_Mon_Avg_last12mo > 10, kWh_Mon_Avg_last12mo > 20, kWh_High > 20, Therms_High > 10)

#+end_src

#+RESULTS:


**** scale area of trees and builings to be 100m^2 (a 10m x 10m area, say)

#+begin_src R
  df[,grepl(".*_building$",names(df))] <-   df[,grepl(".*_building$",names(df))] / 100
  df[,grepl(".*_tree$",names(df))] <-   df[,grepl(".*_tree$",names(df))] / 100
#+end_src

#+RESULTS:

**** Combine over the building with within 10m of building
#+begin_src R
    df <-  df %>% mutate(ne_0_tree = ne_0_0_tree + ne_0_1_tree,
                            e_0_tree = e_0_0_tree + e_0_1_tree,
                            se_0_tree = se_0_0_tree + se_0_1_tree,
                            s_0_tree = s_0_0_tree + s_0_1_tree,
                            sw_0_tree = sw_0_0_tree + sw_0_1_tree,
                            w_0_tree = w_0_0_tree + w_0_1_tree,
                            nw_0_tree = nw_0_0_tree + nw_0_1_tree,
                         n_0_tree = n_0_0_tree + n_0_1_tree)

    df <- df[, !grepl(".*_0_[01]_tree$",names(df))]
#+end_src

#+RESULTS:

**** rename covariates so I don't have the over building indicator anymore
#+begin_src R
names(df)[1:100] <- str_replace(names(df)[1:100], "(_0_)","_")
#+end_src

#+RESULTS:

**** COMMENT What is a resonable way to combine regions, and then select a single combination?  COME BACK TO THIS MAYBE

#+begin_src R
df.tb <- df[,grep("_[0-9]+_", names(df))]
#+end_src

#+RESULTS:

#+begin_src R
  df.tb<- df.tb %>%
    mutate(row = rownames(df.tb)) %>%
      gather(key, value, -row) %>%
      mutate(direction = str_match(key, "([a-z]+)_.*")[,2],
             distance =  str_match(key, "[a-z]+_([0-9]+)_.*")[,2],
             cover =   str_match(key, "[a-z]+_[0-9]+_([a-z]+)")[,2])
#+end_src

#+RESULTS:


**** How to aggregate.

What about a constraint that those out any models for which adjacent
regions have opposite and statistically significant results.
Basically those for which multicollinearity is messing up things and
which reasonable laws of nature (that things next to one another are
similar) are being broken.

**** create the aggregate of all south regions, all north regions, then east and west

ne, nw, and n get pooled into north.  se, sw, and s get pooled into south.

#+begin_src R

  df$e_near_tree <- rowSums(df[,grepl("^e_(0|10)_tree", names(df))])
  df$s_near_tree <- rowSums(df[,grepl("^s[ew]*_(0|10)_tree", names(df))])
  df$w_near_tree <- rowSums(df[,grepl("^w_(0|10)_tree", names(df))])
  df$n_near_tree <- rowSums(df[,grepl("^n[ew]*_(0|10)_tree", names(df))])

  df$e_near_building <- rowSums(df[,grepl("^e_(0|10)_building", names(df))])
  df$s_near_building <- rowSums(df[,grepl("^s[ew]*_(0|10)_building", names(df))])
  df$w_near_building <- rowSums(df[,grepl("^w_(0|10)_building", names(df))])
  df$n_near_building <- rowSums(df[,grepl("^n[ew]*_(0|10)_building", names(df))])

  df$e_far_tree <- rowSums(df[,grepl("^e_(20|30|40|50)_tree", names(df))])
  df$s_far_tree <- rowSums(df[,grepl("^s[ew]*_(20|30|40|50)_tree", names(df))])
  df$w_far_tree <- rowSums(df[,grepl("^w_(20|30|40|50)_tree", names(df))])
  df$n_far_tree <- rowSums(df[,grepl("^n[ew]*_(20|30|40|50)_tree", names(df))])

  df$e_far_building <- rowSums(df[,grepl("^e_(20|30|40|50)_building", names(df))])
  df$s_far_building <- rowSums(df[,grepl("^s[ew]*_(20|30|40|50)_building", names(df))])
  df$w_far_building <- rowSums(df[,grepl("^w_(20|30|40|50)_building", names(df))])
  df$n_far_building <- rowSums(df[,grepl("^n[ew]*_(20|30|40|50)_building", names(df))])

#+end_src

#+RESULTS:

**** Covariates
#+begin_src R

        covariates.30less <- c("Electric_for_Heating", "Elementary.School",
        "Central.Air", "e_0_tree","n_0_tree","ne_0_tree","nw_0_tree","s_0_tree",
        "se_0_tree", "sw_0_tree",  "w_0_tree", "e_10_tree", "n_10_tree", "ne_10_tree",
        "nw_10_tree", "s_10_tree", "se_10_tree", "sw_10_tree",
        "w_10_tree", "e_20_tree", "n_20_tree", "ne_20_tree",
        "nw_20_tree", "s_20_tree", "se_20_tree", "sw_20_tree",
        "w_20_tree", "e_0_building", "n_0_building", "ne_0_building", "nw_0_building",
        "s_0_building","se_0_building", "sw_0_building", "w_0_building",
        "e_10_building", "n_10_building", "ne_10_building",
        "nw_10_building", "s_10_building", "se_10_building", "sw_10_building",
        "w_10_building", "e_20_building", "n_20_building", "ne_20_building",
        "nw_20_building", "s_20_building", "se_20_building", "sw_20_building",
        "w_20_building","building.pca_1", "building.pca_2", "building.pca_3",
        "building.pca_4", "building.pca_5", "building.pca_6", "building.pca_7")

      covariates.less20 <- c("Electric_for_Heating", "Elementary.School",
        "Central.Air", "e_0_tree","n_0_tree","ne_0_tree","nw_0_tree","s_0_tree",
        "se_0_tree", "sw_0_tree",  "w_0_tree", "e_10_tree", "n_10_tree", "ne_10_tree",
        "nw_10_tree", "s_10_tree", "se_10_tree", "sw_10_tree",
        "w_10_tree", "e_0_building", "n_0_building", "ne_0_building", "nw_0_building",
        "s_0_building","se_0_building", "sw_0_building", "w_0_building",
        "e_10_building", "n_10_building", "ne_10_building",
        "nw_10_building", "s_10_building", "se_10_building", "sw_10_building",
        "w_10_building", "building.pca_1", "building.pca_2", "building.pca_3",
        "building.pca_4", "building.pca_5", "building.pca_6", "building.pca_7")

    covariates.20andmore <- c("Electric_for_Heating", "Elementary.School",
                              "Central.Air", "e_20_tree", "e_30_tree",
                              "e_40_tree", "e_50_tree","n_20_tree",
                              "n_30_tree", "n_40_tree", "n_50_tree",
                              "ne_20_tree", "ne_30_tree", "ne_40_tree",
                              "ne_50_tree",  "nw_20_tree", "nw_30_tree",
                              "nw_40_tree", "nw_50_tree", "s_20_tree",
                              "s_30_tree", "s_40_tree", "s_50_tree",
                              "se_20_tree", "se_30_tree", "se_40_tree",
                              "se_50_tree", "sw_20_tree", "sw_30_tree",
                              "sw_40_tree", "sw_50_tree", "w_20_tree",
                              "w_30_tree", "w_40_tree", "w_50_tree",
                              "e_20_building", "e_30_building",
                              "e_40_building", "e_50_building",
                              "n_20_building", "n_30_building",
                              "n_40_building", "n_50_building",
                              "ne_20_building", "ne_30_building",
                              "ne_40_building", "ne_50_building",
                              "nw_20_building", "nw_30_building",
                              "nw_40_building", "nw_50_building",
                              "s_20_building", "s_30_building",
                              "s_40_building", "s_50_building",
                              "se_20_building", "se_30_building",
                              "se_40_building", "se_50_building",
                              "sw_20_building", "sw_30_building",
                              "sw_40_building", "sw_50_building",
                              "w_20_building", "w_30_building",
                              "w_40_building", "w_50_building",
                              "building.pca_1", "building.pca_2",
                              "building.pca_3", "building.pca_4",
                              "building.pca_5", "building.pca_6",
                              "building.pca_7")

  aggregated.covariates <- c("Electric_for_Heating",
                      "Elementary.School", "Central.Air", "e_near_tree",
                      "s_near_tree", "w_near_tree", "n_near_tree",
                      "e_near_building", "s_near_building",
                      "w_near_building", "n_near_building",
                      "e_far_tree", "s_far_tree", "w_far_tree",
                      "n_far_tree", "e_far_building", "s_far_building",
                      "w_far_building", "n_far_building",
                      "building.pca_1", "building.pca_2",
                      "building.pca_3", "building.pca_4",
                      "building.pca_5", "building.pca_6",
                      "building.pca_7")

      covariates <- c("Electric_for_Heating", "Elementary.School",
                      "Central.Air", "e_10_tree", "e_20_tree", "e_30_tree",
                      "e_40_tree", "e_50_tree", "n_10_tree", "n_20_tree",
                      "n_30_tree", "n_40_tree", "n_50_tree", "ne_10_tree",
                      "ne_20_tree", "ne_30_tree", "ne_40_tree",
                      "ne_50_tree", "nw_10_tree", "nw_20_tree",
                      "nw_30_tree", "nw_40_tree", "nw_50_tree", "s_10_tree",
                      "s_20_tree", "s_30_tree", "s_40_tree", "s_50_tree",
                      "se_10_tree", "se_20_tree", "se_30_tree",
                      "se_40_tree", "se_50_tree", "sw_10_tree",
                      "sw_20_tree", "sw_30_tree", "sw_40_tree",
                      "sw_50_tree", "w_10_tree", "w_20_tree", "w_30_tree",
                      "w_40_tree", "w_50_tree", "e_0_building",
                      "e_10_building", "e_20_building", "e_30_building",
                      "e_40_building", "e_50_building", "n_0_building",
                      "n_10_building", "n_20_building", "n_30_building",
                      "n_40_building", "n_50_building", "ne_0_building",
                      "ne_10_building", "ne_20_building", "ne_30_building",
                      "ne_40_building", "ne_50_building", "nw_0_building",
                      "nw_10_building", "nw_20_building", "nw_30_building",
                      "nw_40_building", "nw_50_building", "s_0_building",
                      "s_10_building", "s_20_building", "s_30_building",
                      "s_40_building", "s_50_building", "se_0_building",
                      "se_10_building", "se_20_building", "se_30_building",
                      "se_40_building", "se_50_building", "sw_0_building",
                      "sw_10_building", "sw_20_building", "sw_30_building",
                      "sw_40_building", "sw_50_building", "w_0_building",
                      "w_10_building", "w_20_building", "w_30_building",
                      "w_40_building", "w_50_building", "building.pca_1",
                      "building.pca_2", "building.pca_3", "building.pca_4",
                      "building.pca_5", "building.pca_6", "building.pca_7",
                      "ne_0_tree", "e_0_tree", "se_0_tree", "s_0_tree",
                      "sw_0_tree", "w_0_tree", "nw_0_tree", "n_0_tree")
#+end_src

#+RESULTS:


**** kwh high
#+begin_src R
  to.select <- c("log_kWh_High", aggregated.covariates)

  df.f.kWh_High <-  dplyr::select(df, to.select) %>%
      filter(Electric_for_Heating == "No") %>%
      select(-Electric_for_Heating) %>%
      filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
      unclass %>%
      as.data.frame

#+end_src

#+RESULTS:

**** kwh avg
#+begin_src R
to.select <- c("log_kWh_Avg", aggregated.covariates)

  df.f.kWh_Avg <-  select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame
#+end_src

#+RESULTS:
**** therms high

#+begin_src R
to.select <- c("log_Therms_High", aggregated.covariates)

  df.f.Therms_High <-  select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:
**** therms avg

#+begin_src R
to.select <- c("log_Therms_Avg", aggregated.covariates)

  df.f.Therms_Avg <-  select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:

**** C Average Log
#+begin_src R
  to.select <- c("log_C_gas_and_elec_avg", aggregated.covariates)

  df.C.avg <- select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:

**** Gas Avg C Log
#+begin_src R
to.select <- c("log_C_gas_avg", aggregated.covariates)

  df.C.gas.avg <-  select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:

**** Elec Avg C Log
#+begin_src R

  to.select <- c("log_C_elec_avg", aggregated.covariates)

  df.C.elec.avg <- select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:

**** Cost Avg Log
#+begin_src R

  to.select <- c("log_Cost_gas_and_elec_avg", aggregated.covariates)

  df.cost.avg <- select(df, to.select) %>%
  filter(complete.cases(e_near_tree, Central.Air, Elementary.School)) %>%
  unclass %>%
  as.data.frame

#+end_src

#+RESULTS:



*** Plots
#+begin_src R
library(GGally)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/histograms.png
  log.resp <- select(df, log_C_gas_and_elec_avg, log_C_elec_high, log_C_gas_high, log_C_elec_avg, log_C_gas_avg)
  log.resp <- gather(log.resp)
  ggplot(log.resp, aes(x = value)) + geom_histogram(binwidth = .1) + facet_wrap(~key, scales = "free")
#+end_src

#+RESULTS:
[[file:../figs/histograms.png]]



#+begin_src R :exports results :results graphics :file ../figs/duo.png :width 8000 :height 600
  df.s <- sample_n(df, 28000)
  ggduo(df.s, 57:112, c(174,175,176),  types = list(
       continuous = wrap("smooth_lm", alpha = 0.05,colour = "blue"))) +
      ggplot2::theme(text = ggplot2::element_text(size = 14),
                     axis.text.x = ggplot2::element_blank())

#+end_src

#+RESULTS:
[[file:../figs/duo.png]]

#+begin_src R :exports results :results graphics :file ../figs/figure_problem_with_nw_0_1.png
ggplot(df.s, aes(x = nw_0_1_tree, y = log_C_elec_high)) + geom_point() + geom_smooth()
#+end_src

#+RESULTS:
[[file:../figs/figure_problem_with_nw_0_1.png]]

#+begin_src R :exports results :results graphics :file ../figs/duo2.png :width 8000 :height 600
  ggduo(df.s, 57:112, c(177,178),  types = list(
       continuous = wrap("smooth_lm", alpha = 0.1, colour = "blue"))) +
      ggplot2::theme(text = ggplot2::element_text(size = 14),
                     axis.text.x = ggplot2::element_blank())

#+end_src

#+RESULTS:
[[file:../figs/duo2.png]]


#+begin_src R :exports results :results graphics :file ../figs/canopy_pairs.png
    ggscatmat(df.s, columns = 54:65)
#+end_src

#+begin_src R :exports results :results graphics :file ../figs/canopy_pairs.png
#  ggpairs(df.s, columns = 54:65, lower = list(continuous = wrap("points",alpha = .1)))
#+end_src

#+RESULTS:
[[file:../figs/canopy_pairs.png]]

*** Fit Models
**** kwh high
#+begin_src R
  kwh.high.lmer.log <- lmer(log_kWh_High ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.f.kWh_High)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(kwh.high.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.46 | -18073.33 | 36198.65 | 36412.92 | 35896.62 |    28010.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.high.lmer.log), digits = 4)
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |   6.8030 |    0.0160 |  426.3432 | fixed             |
|  2 | building.pca_1                   |   0.0937 |    0.0016 |   57.1601 | fixed             |
|  3 | building.pca_2                   |  -0.0117 |    0.0023 |   -5.1603 | fixed             |
|  4 | building.pca_3                   |  -0.0056 |    0.0027 |   -2.1062 | fixed             |
|  5 | building.pca_4                   |  -0.0224 |    0.0030 |   -7.5064 | fixed             |
|  6 | building.pca_5                   |   0.0062 |    0.0028 |    2.2010 | fixed             |
|  7 | building.pca_6                   |  -0.0048 |    0.0028 |   -1.7431 | fixed             |
|  8 | building.pca_7                   |   0.0085 |    0.0028 |    3.0724 | fixed             |
|  9 | e_near_tree                      |  -0.0081 |    0.0039 |   -2.0766 | fixed             |
| 10 | s_near_tree                      |  -0.0046 |    0.0017 |   -2.6915 | fixed             |
| 11 | w_near_tree                      |  -0.0125 |    0.0040 |   -3.1618 | fixed             |
| 12 | n_near_tree                      |  -0.0002 |    0.0017 |   -0.1210 | fixed             |
| 13 | e_far_tree                       |   0.0013 |    0.0011 |    1.2050 | fixed             |
| 14 | s_far_tree                       |   0.0003 |    0.0005 |    0.6539 | fixed             |
| 15 | w_far_tree                       |   0.0002 |    0.0011 |    0.1491 | fixed             |
| 16 | n_far_tree                       |  -0.0005 |    0.0005 |   -1.0798 | fixed             |
| 17 | e_near_building                  |  -0.0055 |    0.0064 |   -0.8653 | fixed             |
| 18 | s_near_building                  |  -0.0076 |    0.0049 |   -1.5560 | fixed             |
| 19 | w_near_building                  |  -0.0037 |    0.0064 |   -0.5783 | fixed             |
| 20 | n_near_building                  |   0.0045 |    0.0049 |    0.9162 | fixed             |
| 21 | e_far_building                   |  -0.0005 |    0.0024 |   -0.2070 | fixed             |
| 22 | s_far_building                   |  -0.0026 |    0.0012 |   -2.1973 | fixed             |
| 23 | w_far_building                   |  -0.0026 |    0.0023 |   -1.1243 | fixed             |
| 24 | n_far_building                   |  -0.0025 |    0.0012 |   -2.1348 | fixed             |
| 25 | sd_(Intercept).Elementary.School |   0.0441 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |   0.4587 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/kwh_high_resid.png
  dt <- broomify(kwh.high.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/kwh_high_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/kwh_high_coef_circle.png
    widths <- c(0,20,60)

    out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

    dt <- tidy(kwh.high.lmer.log)

    dt <- filter(dt, grepl("_tree",term)) %>%
        select(-group)

  dsig <- dt %>%
      mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .05, "*", NA),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
             lat = c(31, 20, 31, 65, 31, -20, 31, 80),
             long = c(105, 85, 65, 85, 135, 85, 75, 85),
             group = NA)

            #Unite and join the coefficients to the sp, then fortify
    out <- as(out, "SpatialPolygonsDataFrame")

    ## o.df <- out@data %>%
    ##     unite(dir.dist, direction,distance.from.building) %>%
    ##     mutate(term = paste0(dir.dist,"_tree"),
    ##            id = 1:nrow(out@data))

    o.df <- out@data %>%
        mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
               id = 1:nrow(out@data))


    o.df <- left_join(o.df, dt)

    out@data <- o.df

    o.df <- ggplot2::fortify(out)

    o.df <- join(o.df,out@data)

kwh.high.df <- o.df

  ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
      geom_polygon() +
      geom_path() +
            coord_equal() +
      ggtitle("Coefficients for effect of canopy cover on log of high kWh use") +
      geom_text(data = dsig, aes(label = sig), size = 9) +
            theme(axis.text.y = element_blank(),
                  axis.text.x = element_blank(),
                  axis.ticks.y = element_blank(),
                  axis.ticks.x = element_blank(),
                  axis.title = element_blank()) +
            scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
          theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/kwh_high_coef_circle.png]]

**** kWh avg
#+begin_src R
  kwh.avg.lmer.log <- lmer(log_kWh_Avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.f.kWh_Avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(kwh.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.45 | -17554.89 | 35161.78 | 35376.12 | 34859.03 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     6.37 |      0.02 |    386.74 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     58.30 | fixed             |
|  3 | building.pca_2                   |    -0.02 |      0.00 |     -6.83 | fixed             |
|  4 | building.pca_3                   |    -0.01 |      0.00 |     -4.13 | fixed             |
|  5 | building.pca_4                   |    -0.02 |      0.00 |     -6.82 | fixed             |
|  6 | building.pca_5                   |     0.01 |      0.00 |      2.59 | fixed             |
|  7 | building.pca_6                   |    -0.01 |      0.00 |     -2.49 | fixed             |
|  8 | building.pca_7                   |     0.01 |      0.00 |      3.38 | fixed             |
|  9 | e_near_tree                      |    -0.00 |      0.00 |     -0.48 | fixed             |
| 10 | s_near_tree                      |    -0.00 |      0.00 |     -1.46 | fixed             |
| 11 | w_near_tree                      |    -0.01 |      0.00 |     -1.85 | fixed             |
| 12 | n_near_tree                      |    -0.00 |      0.00 |     -0.30 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      0.15 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      0.33 | fixed             |
| 15 | w_far_tree                       |    -0.00 |      0.00 |     -0.03 | fixed             |
| 16 | n_far_tree                       |    -0.00 |      0.00 |     -0.18 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.01 |     -0.55 | fixed             |
| 18 | s_near_building                  |    -0.01 |      0.00 |     -1.42 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.01 |     -0.56 | fixed             |
| 20 | n_near_building                  |     0.01 |      0.00 |      1.37 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -0.88 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -1.99 | fixed             |
| 23 | w_far_building                   |    -0.00 |      0.00 |     -0.83 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -1.68 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.45 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/kwh_avg_resid.png
  dt <- broomify(kwh.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/kwh_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/kwh_avg_coef_circle.png
    widths <- c(0,20,60)

    out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

    dt <- tidy(kwh.avg.lmer.log)

    dt <- filter(dt, grepl("_tree",term)) %>%
        select(-group)

  dsig <- dt %>%
      mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
             lat = c(31, 20, 31, 65, 31, -20, 31, 80),
             long = c(105, 85, 65, 85, 135, 85, 75, 85),
             group = NA)

            #Unite and join the coefficients to the sp, then fortify
    out <- as(out, "SpatialPolygonsDataFrame")

    ## o.df <- out@data %>%
    ##     unite(dir.dist, direction,distance.from.building) %>%
    ##     mutate(term = paste0(dir.dist,"_tree"),
    ##            id = 1:nrow(out@data))

    o.df <- out@data %>%
        mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
               id = 1:nrow(out@data))


    o.df <- left_join(o.df, dt)

    out@data <- o.df

    o.df <- ggplot2::fortify(out)

    o.df <- join(o.df,out@data)

kwh.avg.df <- o.df

  ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
      geom_polygon() +
      geom_path() +
            coord_equal() +
      ggtitle("Coefficients for effect of canopy cover on log of avg kWh use") +
      geom_text(data = dsig, aes(label = sig), size = 9) +
            theme(axis.text.y = element_blank(),
                  axis.text.x = element_blank(),
                  axis.ticks.y = element_blank(),
                  axis.ticks.x = element_blank(),
                  axis.title = element_blank()) +
            scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
          theme(legend.text = element_text(size = 14))

#+end_src

#+RESULTS:
[[file:../figs/kwh_avg_coef_circle.png]]
**** therms high
#+begin_src R
  therms.high.lmer.log <- lmer(log_Therms_High ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.f.Therms_High)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(therms.high.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.29 | -5064.06 | 10180.12 | 10394.47 |  9857.33 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(therms.high.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     4.81 |      0.01 |    324.88 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     85.04 | fixed             |
|  3 | building.pca_2                   |     0.04 |      0.00 |     24.91 | fixed             |
|  4 | building.pca_3                   |     0.04 |      0.00 |     25.86 | fixed             |
|  5 | building.pca_4                   |    -0.05 |      0.00 |    -28.13 | fixed             |
|  6 | building.pca_5                   |    -0.01 |      0.00 |     -7.35 | fixed             |
|  7 | building.pca_6                   |    -0.02 |      0.00 |    -11.20 | fixed             |
|  8 | building.pca_7                   |    -0.00 |      0.00 |     -0.02 | fixed             |
|  9 | e_near_tree                      |     0.01 |      0.00 |      2.29 | fixed             |
| 10 | s_near_tree                      |     0.01 |      0.00 |      6.70 | fixed             |
| 11 | w_near_tree                      |     0.00 |      0.00 |      1.35 | fixed             |
| 12 | n_near_tree                      |     0.01 |      0.00 |      6.07 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      2.99 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      4.64 | fixed             |
| 15 | w_far_tree                       |     0.00 |      0.00 |      0.56 | fixed             |
| 16 | n_far_tree                       |     0.00 |      0.00 |      2.01 | fixed             |
| 17 | e_near_building                  |    -0.01 |      0.00 |     -1.99 | fixed             |
| 18 | s_near_building                  |    -0.00 |      0.00 |     -0.10 | fixed             |
| 19 | w_near_building                  |    -0.01 |      0.00 |     -1.82 | fixed             |
| 20 | n_near_building                  |    -0.01 |      0.00 |     -4.29 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -1.53 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -0.90 | fixed             |
| 23 | w_far_building                   |     0.00 |      0.00 |      2.64 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -2.46 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.06 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.29 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/therms_high_resid.png
  dt <- broomify(therms.high.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/therms_high_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/therms_high_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(therms.high.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

therms.high.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of high Therms use") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/therms_high_coef_circle.png]]

**** therms avg
#+begin_src R
  therms.avg.lmer.log <- lmer(log_Therms_Avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.f.Therms_Avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(therms.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.30 | -6048.47 | 12148.94 | 12363.29 | 11827.53 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(therms.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     3.91 |      0.01 |    280.52 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     83.08 | fixed             |
|  3 | building.pca_2                   |     0.03 |      0.00 |     17.85 | fixed             |
|  4 | building.pca_3                   |     0.04 |      0.00 |     21.88 | fixed             |
|  5 | building.pca_4                   |    -0.05 |      0.00 |    -25.78 | fixed             |
|  6 | building.pca_5                   |    -0.01 |      0.00 |     -6.73 | fixed             |
|  7 | building.pca_6                   |    -0.02 |      0.00 |     -9.93 | fixed             |
|  8 | building.pca_7                   |    -0.00 |      0.00 |     -0.69 | fixed             |
|  9 | e_near_tree                      |     0.01 |      0.00 |      2.52 | fixed             |
| 10 | s_near_tree                      |     0.01 |      0.00 |      7.04 | fixed             |
| 11 | w_near_tree                      |     0.01 |      0.00 |      1.96 | fixed             |
| 12 | n_near_tree                      |     0.00 |      0.00 |      3.75 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      1.93 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      2.72 | fixed             |
| 15 | w_far_tree                       |     0.00 |      0.00 |      0.36 | fixed             |
| 16 | n_far_tree                       |     0.00 |      0.00 |      1.12 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.00 |     -0.78 | fixed             |
| 18 | s_near_building                  |     0.00 |      0.00 |      0.25 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.00 |     -0.90 | fixed             |
| 20 | n_near_building                  |    -0.01 |      0.00 |     -3.52 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -1.49 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -0.01 | fixed             |
| 23 | w_far_building                   |     0.00 |      0.00 |      2.78 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -0.90 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.30 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/therms_avg_resid.png
  dt <- broomify(therms.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/therms_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/therms_avg_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(therms.avg.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

therms.avg.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg Therms use") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/therms_avg_coef_circle.png]]

**** kg C
***** log avg kg C from gas and elec combined
#+begin_src R
  notree.C.avg.lmer.log <- lmer(log_C_gas_and_elec_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.C.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(notree.C.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.29 | -5138.16 | 10312.32 | 10460.71 | 10103.42 |    28098.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(notree.C.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     5.17 |      0.01 |    688.75 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     91.89 | fixed             |
|  3 | building.pca_2                   |     0.01 |      0.00 |      4.11 | fixed             |
|  4 | building.pca_3                   |     0.02 |      0.00 |     10.81 | fixed             |
|  5 | building.pca_4                   |    -0.04 |      0.00 |    -20.81 | fixed             |
|  6 | building.pca_5                   |    -0.00 |      0.00 |     -2.03 | fixed             |
|  7 | building.pca_6                   |    -0.01 |      0.00 |     -6.66 | fixed             |
|  8 | building.pca_7                   |     0.00 |      0.00 |      2.04 | fixed             |
|  9 | e_near_building                  |    -0.00 |      0.00 |     -0.98 | fixed             |
| 10 | s_near_building                  |    -0.00 |      0.00 |     -1.46 | fixed             |
| 11 | w_near_building                  |    -0.00 |      0.00 |     -0.99 | fixed             |
| 12 | n_near_building                  |    -0.00 |      0.00 |     -0.98 | fixed             |
| 13 | e_far_building                   |    -0.00 |      0.00 |     -1.50 | fixed             |
| 14 | s_far_building                   |    -0.00 |      0.00 |     -1.97 | fixed             |
| 15 | w_far_building                   |     0.00 |      0.00 |      0.50 | fixed             |
| 16 | n_far_building                   |    -0.00 |      0.00 |     -1.61 | fixed             |
| 17 | sd_(Intercept).Elementary.School |     0.03 |           |           | Elementary.School |
| 18 | sd_Observation.Residual          |     0.29 |           |           | Residual          |
#+END_SRC

#+begin_src R
  C.avg.lmer.log <- lmer(log_C_gas_and_elec_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.C.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.29 | -5169.30 | 10390.59 | 10604.94 | 10066.23 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.avg.lmer.log), digits = 6)
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             |  estimate | std.error |  statistic | group             |
|----+----------------------------------+-----------+-----------+------------+-------------------|
|  1 | (Intercept)                      |  5.135819 |  0.009866 | 520.569015 | fixed             |
|  2 | building.pca_1                   |  0.090132 |  0.001030 |  87.530057 | fixed             |
|  3 | building.pca_2                   |  0.006403 |  0.001415 |   4.525660 | fixed             |
|  4 | building.pca_3                   |  0.015362 |  0.001676 |   9.165896 | fixed             |
|  5 | building.pca_4                   | -0.036487 |  0.001877 | -19.434928 | fixed             |
|  6 | building.pca_5                   | -0.002291 |  0.001766 |  -1.297510 | fixed             |
|  7 | building.pca_6                   | -0.010718 |  0.001746 |  -6.139388 | fixed             |
|  8 | building.pca_7                   |  0.003912 |  0.001740 |   2.248161 | fixed             |
|  9 | e_near_tree                      |  0.001725 |  0.002463 |   0.700469 | fixed             |
| 10 | s_near_tree                      |  0.002494 |  0.001081 |   2.307301 | fixed             |
| 11 | w_near_tree                      | -0.000792 |  0.002497 |  -0.317044 | fixed             |
| 12 | n_near_tree                      |  0.001885 |  0.001092 |   1.725603 | fixed             |
| 13 | e_far_tree                       |  0.000778 |  0.000670 |   1.161266 | fixed             |
| 14 | s_far_tree                       |  0.000450 |  0.000293 |   1.535271 | fixed             |
| 15 | w_far_tree                       |  0.000111 |  0.000668 |   0.165876 | fixed             |
| 16 | n_far_tree                       | -0.000087 |  0.000300 |  -0.289242 | fixed             |
| 17 | e_near_building                  | -0.003562 |  0.004026 |  -0.884701 | fixed             |
| 18 | s_near_building                  | -0.003338 |  0.003078 |  -1.084541 | fixed             |
| 19 | w_near_building                  | -0.004145 |  0.004009 |  -1.033823 | fixed             |
| 20 | n_near_building                  | -0.001865 |  0.003073 |  -0.606894 | fixed             |
| 21 | e_far_building                   | -0.002256 |  0.001484 |  -1.519637 | fixed             |
| 22 | s_far_building                   | -0.001485 |  0.000732 |  -2.027760 | fixed             |
| 23 | w_far_building                   |  0.000580 |  0.001478 |   0.392357 | fixed             |
| 24 | n_far_building                   | -0.001328 |  0.000739 |  -1.797066 | fixed             |
| 25 | sd_(Intercept).Elementary.School |  0.026152 |           |            | Elementary.School |
| 26 | sd_Observation.Residual          |  0.289242 |           |            | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/C_avg_resid.png
  dt <- broomify(C.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/C_avg_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(C.avg.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

carbon.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg C from gas and elec") +
        geom_text(data = dsig, aes(label = sig), size = 14) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/C_avg_coef_circle.png]]

***** log avg kg C from gas
#+begin_src R
  C.gas.lmer.log <- lmer(log_C_gas_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.C.gas.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.gas.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.30 | -6048.47 | 12148.94 | 12363.29 | 11827.53 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.gas.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     4.28 |      0.01 |    306.99 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     83.08 | fixed             |
|  3 | building.pca_2                   |     0.03 |      0.00 |     17.85 | fixed             |
|  4 | building.pca_3                   |     0.04 |      0.00 |     21.88 | fixed             |
|  5 | building.pca_4                   |    -0.05 |      0.00 |    -25.78 | fixed             |
|  6 | building.pca_5                   |    -0.01 |      0.00 |     -6.73 | fixed             |
|  7 | building.pca_6                   |    -0.02 |      0.00 |     -9.93 | fixed             |
|  8 | building.pca_7                   |    -0.00 |      0.00 |     -0.69 | fixed             |
|  9 | e_near_tree                      |     0.01 |      0.00 |      2.52 | fixed             |
| 10 | s_near_tree                      |     0.01 |      0.00 |      7.04 | fixed             |
| 11 | w_near_tree                      |     0.01 |      0.00 |      1.96 | fixed             |
| 12 | n_near_tree                      |     0.00 |      0.00 |      3.75 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      1.93 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      2.72 | fixed             |
| 15 | w_far_tree                       |     0.00 |      0.00 |      0.36 | fixed             |
| 16 | n_far_tree                       |     0.00 |      0.00 |      1.12 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.00 |     -0.78 | fixed             |
| 18 | s_near_building                  |     0.00 |      0.00 |      0.25 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.00 |     -0.90 | fixed             |
| 20 | n_near_building                  |    -0.01 |      0.00 |     -3.52 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -1.49 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -0.01 | fixed             |
| 23 | w_far_building                   |     0.00 |      0.00 |      2.78 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -0.90 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.30 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/C_gas_resid.png
  dt <- broomify(C.gas.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_gas_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/C_gas_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(C.gas.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)


    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg C from gas") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/C_gas_coef_circle.png]]

***** log avg kg C from elec
#+begin_src R
  C.elec.lmer.log <- lmer(log_C_elec_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.C.elec.avg)
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.elec.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.45 | -17554.89 | 35161.78 | 35376.12 | 34859.03 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.elec.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     4.52 |      0.02 |    274.32 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     58.30 | fixed             |
|  3 | building.pca_2                   |    -0.02 |      0.00 |     -6.83 | fixed             |
|  4 | building.pca_3                   |    -0.01 |      0.00 |     -4.13 | fixed             |
|  5 | building.pca_4                   |    -0.02 |      0.00 |     -6.82 | fixed             |
|  6 | building.pca_5                   |     0.01 |      0.00 |      2.59 | fixed             |
|  7 | building.pca_6                   |    -0.01 |      0.00 |     -2.49 | fixed             |
|  8 | building.pca_7                   |     0.01 |      0.00 |      3.38 | fixed             |
|  9 | e_near_tree                      |    -0.00 |      0.00 |     -0.48 | fixed             |
| 10 | s_near_tree                      |    -0.00 |      0.00 |     -1.46 | fixed             |
| 11 | w_near_tree                      |    -0.01 |      0.00 |     -1.85 | fixed             |
| 12 | n_near_tree                      |    -0.00 |      0.00 |     -0.30 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      0.15 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      0.33 | fixed             |
| 15 | w_far_tree                       |    -0.00 |      0.00 |     -0.03 | fixed             |
| 16 | n_far_tree                       |    -0.00 |      0.00 |     -0.18 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.01 |     -0.55 | fixed             |
| 18 | s_near_building                  |    -0.01 |      0.00 |     -1.42 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.01 |     -0.56 | fixed             |
| 20 | n_near_building                  |     0.01 |      0.00 |      1.37 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -0.88 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -1.99 | fixed             |
| 23 | w_far_building                   |    -0.00 |      0.00 |     -0.83 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -1.68 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.45 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/C_elec_resid.png
  dt <- broomify(C.elec.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_elec_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/C_elec_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(C.elec.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)


    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on log of avg C from elec") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/C_elec_coef_circle.png]]

**** Cost dollars
#+begin_src R
  cost.lmer.log <- lmer(log_Cost_gas_and_elec_avg ~ building.pca_1 +
                           building.pca_2 +
                           building.pca_3 +
                           building.pca_4 +
                           building.pca_5 +
                           building.pca_6 +
                           building.pca_7 +
                           e_near_tree +
                           s_near_tree +
                           w_near_tree +
                           n_near_tree +
                           e_far_tree +
                           s_far_tree +
                           w_far_tree +
                           n_far_tree +
                           e_near_building +
                           s_near_building +
                           w_near_building +
                           n_near_building +
                           e_far_building +
                           s_far_building +
                           w_far_building +
                           n_far_building +
                           (1|Elementary.School)
                     , data = df.cost.avg)
#+end_src

#+RESULTS:
: Error: 'data' not found, and some variables missing from formula environment

#+begin_src R :results org
ascii.nowarn.print(glance(cost.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma | logLik |   AIC |    BIC | deviance | df.residual |
|---+-------+--------+-------+--------+----------+-------------|
| 1 |  0.24 |  10.81 | 30.38 | 244.72 |  -302.98 |    28090.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(cost.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     5.02 |      0.01 |    623.04 | fixed             |
|  2 | building.pca_1                   |     0.06 |      0.00 |     75.89 | fixed             |
|  3 | building.pca_2                   |    -0.00 |      0.00 |     -0.45 | fixed             |
|  4 | building.pca_3                   |     0.00 |      0.00 |      3.35 | fixed             |
|  5 | building.pca_4                   |    -0.02 |      0.00 |    -13.53 | fixed             |
|  6 | building.pca_5                   |     0.00 |      0.00 |      0.87 | fixed             |
|  7 | building.pca_6                   |    -0.01 |      0.00 |     -4.26 | fixed             |
|  8 | building.pca_7                   |     0.00 |      0.00 |      2.85 | fixed             |
|  9 | e_near_tree                      |     0.00 |      0.00 |      0.18 | fixed             |
| 10 | s_near_tree                      |    -0.00 |      0.00 |     -0.05 | fixed             |
| 11 | w_near_tree                      |    -0.00 |      0.00 |     -1.07 | fixed             |
| 12 | n_near_tree                      |     0.00 |      0.00 |      0.74 | fixed             |
| 13 | e_far_tree                       |     0.00 |      0.00 |      0.70 | fixed             |
| 14 | s_far_tree                       |     0.00 |      0.00 |      1.60 | fixed             |
| 15 | w_far_tree                       |     0.00 |      0.00 |      0.07 | fixed             |
| 16 | n_far_tree                       |    -0.00 |      0.00 |     -0.01 | fixed             |
| 17 | e_near_building                  |    -0.00 |      0.00 |     -1.06 | fixed             |
| 18 | s_near_building                  |    -0.00 |      0.00 |     -1.78 | fixed             |
| 19 | w_near_building                  |    -0.00 |      0.00 |     -0.97 | fixed             |
| 20 | n_near_building                  |     0.00 |      0.00 |      0.20 | fixed             |
| 21 | e_far_building                   |    -0.00 |      0.00 |     -1.44 | fixed             |
| 22 | s_far_building                   |    -0.00 |      0.00 |     -2.07 | fixed             |
| 23 | w_far_building                   |    -0.00 |      0.00 |     -0.38 | fixed             |
| 24 | n_far_building                   |    -0.00 |      0.00 |     -1.80 | fixed             |
| 25 | sd_(Intercept).Elementary.School |     0.02 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |     0.24 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/cost_avg_resid.png
  dt <- broomify(cost.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/cost_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/cost_avg_coef_circle.png
      widths <- c(0,20,60)

      out <- makeRegionsAroundPolygon_poolSandN(poly, widths)

      dt <- tidy(cost.lmer.log)

      dt <- filter(dt, grepl("_tree",term)) %>%
          select(-group)

    dsig <- dt %>%
        mutate(p.value = 1 - pt(abs(statistic),28013),
             sig = ifelse(p.value < .1, ".", NA),
             sig = ifelse(p.value < .05, "*", sig),
             sig = ifelse(p.value < .01, "**", sig),
             sig = ifelse(p.value < .001, "***", sig),
               lat = c(31, 15, 31, 48, 31, -20, 31, 80),
               long = c(105, 85, 65, 85, 135, 85, 75, 85),
               group = NA)

              #Unite and join the coefficients to the sp, then fortify
      out <- as(out, "SpatialPolygonsDataFrame")

      ## o.df <- out@data %>%
      ##     unite(dir.dist, direction,distance.from.building) %>%
      ##     mutate(term = paste0(dir.dist,"_tree"),
      ##            id = 1:nrow(out@data))

      o.df <- out@data %>%
          mutate(term = ifelse(distance.from.building == 0, paste0(direction,"_near_tree"), paste0(direction,"_far_tree")),
                 id = 1:nrow(out@data))


      o.df <- left_join(o.df, dt)

      out@data <- o.df

      o.df <- ggplot2::fortify(out)

      o.df <- join(o.df,out@data)

cost.df <- o.df

    ggplot(o.df, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
        ggtitle("Coefficients for effect of canopy cover on average cost") +
        geom_text(data = dsig, aes(label = sig), size = 9) +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank()) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.position = c(.935, .9),
                  legend.title = element_blank())

#+end_src

#+RESULTS:
[[file:../figs/cost_avg_coef_circle.png]]


*** Plot Coefficients from all models

because I don't want to have "significance" on my plots.

on y axis are the different tree coeffienets, grouped by near and far

on x axis is effect.

poits with the standard error for error bars

panels:
2x2
kwh high
kwh avg
gas high
gas avg

#+begin_src R
  a <- tidy(kwh.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")
  b <- tidy(kwh.high.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.high")
  c <- tidy(therms.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "therms.avg")
  d <- tidy(therms.high.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "therms.high")

  tree.coef <- bind_rows(a,b,c,d)

  tree.coef <- tree.coef %>% mutate(term = mapvalues(term, from = c("e_near_tree",
    "s_near_tree", "w_near_tree", "n_near_tree", "e_far_tree",
    "s_far_tree", "w_far_tree", "n_far_tree"), to = c("near_east",
    "near_south", "near_west", "near_north", "far_east", "far_south", "far_west", "far_north")))


tree.coef$facet = factor(tree.coef$response, levels = c("kwh.avg", "therms.avg", "kwh.high", "therms.high"))
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file ../figs/tree_coefs.png :height 350

  ggplot(tree.coef, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    facet_wrap(~facet) +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_coefs.png]]


I should make a similar 4 panel that shows the regions around a building.

#+begin_src R
kwh.high.df <- mutate(kwh.high.df, response = "kwh.high")
kwh.avg.df <- mutate(kwh.avg.df, response = "kwh.avg")
therms.high.df <- mutate(therms.high.df, response = "therms.high")
therms.avg.df <- mutate(therms.avg.df, response = "therms.avg")
cost.df <- mutate(cost.df, response = "Cost")
carbon.df <- mutate(carbon.df, response = "Carbon")

all.responses <- bind_rows(kwh.high.df, kwh.avg.df, therms.high.df, therms.avg.df, cost.df, carbon.df)
energy.responses <- bind_rows(kwh.high.df, kwh.avg.df, therms.high.df, therms.avg.df)

energy.responses$facet = factor(energy.responses$response, levels = c("kwh.avg", "therms.avg", "kwh.high", "therms.high"))

summary.responses <- bind_rows(cost.df, carbon.df)
#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/panel_energyresponses.png
    ggplot(energy.responses, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
              theme_base() +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank(),
                    text = element_text(size = 20)) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.title = element_blank()) +
                facet_wrap(~facet, ncol = 2)


#+end_src

#+RESULTS:
[[file:../figs/panel_energyresponses.png]]

#+begin_src R :exports results :results graphics :file ../figs/panel_summary_responses.png :height 200
    ggplot(summary.responses, aes(x = long, y = lat, fill = estimate, group = group)) +
        geom_polygon() +
        geom_path() +
              coord_equal() +
              theme_base() +
              theme(axis.text.y = element_blank(),
                    axis.text.x = element_blank(),
                    axis.ticks.y = element_blank(),
                    axis.ticks.x = element_blank(),
                    axis.title = element_blank(),
                    text = element_text(size = 20)) +
              scale_fill_gradient2(low = "#2166ac", high = "#67001f") +
            theme(legend.text = element_text(size = 14),
                  legend.title = element_blank()) +
                facet_wrap(~response, ncol = 2)


#+end_src

#+RESULTS:
[[file:../figs/panel_summary_responses.png]]




#+begin_src R
  a <- tidy(C.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "Carbon")
  b <- tidy(cost.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "Cost")
  cc.coef <- bind_rows(a,b)


  cc.coef <- cc.coef %>% mutate(term = mapvalues(term, from = c("e_near_tree",
      "s_near_tree", "w_near_tree", "n_near_tree", "e_far_tree",
      "s_far_tree", "w_far_tree", "n_far_tree"), to = c("near_east",
      "near_south", "near_west", "near_north", "far_east", "far_south", "far_west", "far_north")))

#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file ../figs/carbon_cost_coef.png :height 200
  ggplot(cc.coef, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    facet_wrap(~response) +
    theme_base()

#+end_src

#+RESULTS:
[[file:../figs/carbon_cost_coef.png]]

explain the coeffients can be interpreted roughtly like a percentage
(but calcualte it exactly).
Then give the median of each response. and what the coefficients mean
for a house like that.  For example, for the median house that uses:
XX kwh, XX therms, at coefficient of .01 means a change of

bigger houses have more effect, smaller houses less effect.


Consider a house that goes from no cover to complete canopy cover,
what would the change be?

*** Consider a green ash tree that grows at .61 cm per year.

that growth rate is from : http://www.sciencedirect.com/science/article/pii/S0269749101002147

equations are from https://www.fs.usda.gov/rds/archive/Product/RDS-2016-0005



The coefficients of models are for 100m^2 of tree canopy cover.


#+begin_src R
    eqn <- read.csv("../RD/RDS-2016-0005/Data/TS6_Growth_coefficients.csv", stringsAsFactors = F) %>%
        mutate(a = as.numeric(a))

#  uni <- eqn %>% select(Region, Scientific.Name) %>% unique

  # fix the coefficents in rows 143, 150, 213.  see email with natalie
  eqn[is.na(as.numeric(eqn$a)),9:11] <- eqn[is.na(as.numeric(eqn$a)),10:12]

    eqn <- eqn %>%
        filter(Region %in% c("MidWst"), Scientific.Name == "Fraxinus pennsylvanica", Independent.variable == "cdia")
eqn
#+end_src

#+RESULTS:
#+begin_example
Warning message:
In evalq(as.numeric(a), <environment>) : NAs introduced by coercion
  Region        Scientific.Name SpCode Independent.variable Predicts.component
1 MidWst Fraxinus pennsylvanica   FRPE                 cdia                dbh
  Units.of.predicted.components Model.weight EqName       a        b       c
1                        meters     1/cdia^2    cub 5.37282 -0.59669 0.69285
         d  e Apps.min Apps.max   Sigma  n adj.R2 Data.min..from.raw.data.
1 -0.02238 NA     1.99       88 0.99473 46  0.912                      5.8
  Data.max..from.raw.data. DF
1                    107.2 42
#+end_example

A tree that has a circular crown with an area of 100m^2 would have a
diameter of
#+begin_src R
cdia <- 2 * sqrt(100/pi)
cdia
#+end_src

#+RESULTS:
: [1] 11.28379

Estimate dbh of such a tree
#+begin_src R
  attach(eqn)
  dbh <- a + b * cdia + c * cdia^2 + d * cdia^3
  detach(eqn)
  dbh
#+end_src

#+RESULTS:
#+begin_example
The following objects are masked _by_ .GlobalEnv:

    a, b, c, d

The following objects are masked from eqn (pos = 3):

    a, adj.R2, Apps.max, Apps.min, b, c, d, Data.max..from.raw.data.,
    Data.min..from.raw.data., DF, e, EqName, Independent.variable,
    Model.weight, n, Predicts.component, Region, Scientific.Name,
    Sigma, SpCode, Units.of.predicted.components
Error in FUN(left, right) : non-numeric argument to binary operator
[1] 54.70302
#+end_example


Now to calculate Volume

Equation Species,DBH lower (cm),DBH upper (cm),Equation,Predicts,DW Density,Equation Source
Fraxinus pennsylvanica,15,123, = 0.0005885*dbhcm^2.206,Volume,530,McHale 2007

units are m^3
vol_y1 = volume this year
vol_y2 = volume after a year of growth.
#+begin_src R
vol_y1 <- 0.0005885*dbh^2.206
vol_y2 <- 0.0005885*(dbh+.61)^2.206

vol_y1
vol_y2
#+end_src

#+RESULTS:
: [1] 4.016052
: [1] 4.11551

Calculate above ground Dry Weight 530 kg / m^3
#+begin_src R
dw1 <- vol_y1 * 530
dw2 <- vol_y2 * 530
dw1
dw2
#+end_src

#+RESULTS:
: [1] 2128.508
: [1] 2181.22

pg 79 of
https://www.fs.fed.us/psw/publications/documents/psw_gtr253/psw_gtr_253.pdf,
shows the below ground correction to get total dry weight is to
multiply above ground by 1.28

Then divide by 2 to convert dry weight into carbon.

#+begin_src R
C1 <- dw1 * 1.28 / 2
C2 <- dw2 * 1.28 /2
C1
C2
Cseq <- C2-C1
Cseq
#+end_src

#+RESULTS:
: [1] 1362.245
: [1] 1395.981
: [1] 33.73587

so almost 34 kg carbon are sequestered in a year by a ash tree with a
canopy of 100m^2.

divide that by 12 and the value is 33.735/12 = 2.811 kg / mo

*** Determine effect on carbon of a median household

#+begin_src R
medC <- median(df$C_gas_and_elec_avg)
medC
#+end_src

#+RESULTS:
: [1] 172.5813

coefficient for S near building
| 10 | s_near_tree                      |  0.002494 |  0.001081 |   2.307301 | fixed             |

#+begin_src R
est <- .002494
se <- .001081

lb <-exp(est - se)
cb <- exp(est)
ub <- exp(est + se)


lb - 1
cb - 1
ub - 1
#+end_src

#+RESULTS:
: [1] 0.001413999
: [1] 0.002497113
: [1] 0.003581398

#+begin_src R
medC * (lb-1)
medC * (cb-1)
medC * (ub-1)
#+end_src

#+RESULTS:
: [1] 0.2440298
: [1] 0.430955
: [1] 0.6180823

about .43 kg C / mo emissions associated with 100m^2 canopy cover to
south of a building.

#+begin_src R
  max.df <- apply(df, 2, max) %>% t %>% as.data.frame() %>%
    select(s_near_tree)
max.df
#+end_src

#+RESULTS:
:
:  s_near_tree
: 1       12.26

about 12 100m^2 units of tree cover can fit in the near south region.
Therefore that region can increase carbon emissions by as much as:
#+begin_src R
exp(12.26*0.00249) - 1
#+end_src

#+RESULTS:
: [1] 0.03099814

about 3.1%

But let's say it is half filled with tree cover:
#+begin_src R
exp(6*0.00249) - 1
#+end_src

#+RESULTS:
: [1] 0.01505216


#+begin_src R
gArea(out, byid = T)
#+end_src

#+RESULTS:
:          1          2          3          4          5          6          7
: 1477.73645 4576.57312 1477.73836 4576.47235  268.81195  904.47937  268.80556
:          8          9         10         11         12
:  903.96030   78.97521   16.56968   78.89484   16.56980

*** Determine kwh reduction potential
#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.high.lmer.log), digits = 4)
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |   6.8030 |    0.0160 |  426.3432 | fixed             |
|  2 | building.pca_1                   |   0.0937 |    0.0016 |   57.1601 | fixed             |
|  3 | building.pca_2                   |  -0.0117 |    0.0023 |   -5.1603 | fixed             |
|  4 | building.pca_3                   |  -0.0056 |    0.0027 |   -2.1062 | fixed             |
|  5 | building.pca_4                   |  -0.0224 |    0.0030 |   -7.5064 | fixed             |
|  6 | building.pca_5                   |   0.0062 |    0.0028 |    2.2010 | fixed             |
|  7 | building.pca_6                   |  -0.0048 |    0.0028 |   -1.7431 | fixed             |
|  8 | building.pca_7                   |   0.0085 |    0.0028 |    3.0724 | fixed             |
|  9 | e_near_tree                      |  -0.0081 |    0.0039 |   -2.0766 | fixed             |
| 10 | s_near_tree                      |  -0.0046 |    0.0017 |   -2.6915 | fixed             |
| 11 | w_near_tree                      |  -0.0125 |    0.0040 |   -3.1618 | fixed             |
| 12 | n_near_tree                      |  -0.0002 |    0.0017 |   -0.1210 | fixed             |
| 13 | e_far_tree                       |   0.0013 |    0.0011 |    1.2050 | fixed             |
| 14 | s_far_tree                       |   0.0003 |    0.0005 |    0.6539 | fixed             |
| 15 | w_far_tree                       |   0.0002 |    0.0011 |    0.1491 | fixed             |
| 16 | n_far_tree                       |  -0.0005 |    0.0005 |   -1.0798 | fixed             |
| 17 | e_near_building                  |  -0.0055 |    0.0064 |   -0.8653 | fixed             |
| 18 | s_near_building                  |  -0.0076 |    0.0049 |   -1.5560 | fixed             |
| 19 | w_near_building                  |  -0.0037 |    0.0064 |   -0.5783 | fixed             |
| 20 | n_near_building                  |   0.0045 |    0.0049 |    0.9162 | fixed             |
| 21 | e_far_building                   |  -0.0005 |    0.0024 |   -0.2070 | fixed             |
| 22 | s_far_building                   |  -0.0026 |    0.0012 |   -2.1973 | fixed             |
| 23 | w_far_building                   |  -0.0026 |    0.0023 |   -1.1243 | fixed             |
| 24 | n_far_building                   |  -0.0025 |    0.0012 |   -2.1348 | fixed             |
| 25 | sd_(Intercept).Elementary.School |   0.0441 |           |           | Elementary.School |
| 26 | sd_Observation.Residual          |   0.4587 |           |           | Residual          |
#+END_SRC

|  9 | e_near_tree                      |  -0.0081 |    0.0039 |   -2.0766 | fixed             |
| 10 | s_near_tree                      |  -0.0046 |    0.0017 |   -2.6915 | fixed             |
| 11 | w_near_tree                      |  -0.0125 |    0.0040 |   -3.1618 | fixed             |


#+begin_src R
  median.df <- apply(df, 2, median)
  max.df <- apply(df, 2, max) %>% t %>% as.data.frame() %>%
    select(s_near_tree, e_near_tree, w_near_tree)
#+end_src

#+RESULTS:

#+begin_src R
max.df
#+end_src

#+RESULTS:
:   s_near_tree e_near_tree w_near_tree
: 1       12.26        5.41        5.20

#+begin_src R
  med.df <- as.data.frame(t(median.df)) %>%
    select(aggregated.covariates) %>%
      mutate_if(is.factor, as.character) %>%
      mutate_if(is.character, as.numeric) %>%
    mutate(Elementary.School = "Crestwood") %>%
      select(-Electric_for_Heating,
             -Central.Air)
#+end_src

#+RESULTS:
: Warning message:
: In evalq(as.numeric(Electric_for_Heating), <environment>) :
:   NAs introduced by coercion

#+begin_src R
    min.df <- med.df %>%
      mutate(s_near_tree = 0,
             e_near_tree = 0,
             w_near_tree = 0)

  max.df <- med.df %>%
      mutate(s_near_tree = 12.26,
             e_near_tree = 5.41,
             w_near_tree = 5.20)

#+end_src

#+RESULTS:

#+begin_src R
no.tree <- exp(predict(kwh.high.lmer.log, newdata = min.df))
high.tree <- exp(predict(kwh.high.lmer.log, newdata = max.df))
no.tree
high.tree
#+end_src

#+RESULTS:
:
:       1
: 777.9622
:
:      1
: 659.084

#+begin_src R
no.tree - high.tree
#+end_src

#+RESULTS:
:        1
: 118.8782

That aint small beans.  May not be possible for all houses because
other buildings, and roads prevent planting.  But it gives an idea.  A
thorough analysis would consider available planting area.

I did constrain it to the max observed tree cover, rather than
assuming a completely filled region.

#+begin_src R
1- 659/778
#+end_src

#+RESULTS:
: [1] 0.1529563

** Multicollinearity Problem
The rings of positive and negative coefficients.
[[/Users/erker/projects/energy/figs/therms_high_coef_circle.png]]




* kWh avg
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-18 Wed 09:13
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_OLPATH: Building Energy and Trees [2018-07-13 Fri]/Model/Fit Models
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:

#+begin_src R
    kwh.avg.lmer.log <- lmer(log_kWh_Annual_Avg ~ building.pca_1 +
                                 building.pca_2 +
                                 building.pca_3 +
                                 building.pca_4 +
                                 building.pca_5 +
  #                               building.pca_6 +
  #                               building.pca_7 +
  d0_0_tree        +
                                          d0_20_tree       +
                                 d180_0_tree      +
                                 d180_20_tree     +
                                 d270_0_tree      +
                                 d270_20_tree     +
                                 d90_0_tree       +
                                 d90_20_tree      +
                                 ## d0_0_building    +
                                 ## d0_20_building   +
                                 ## d180_0_building  +
                                 ## d180_20_building +
                                 ## d270_0_building  +
                                 ## d270_20_building +
                                 ## d90_0_building   +
                                 ## d90_20_building  +
                                  (1|Elementary.School)
                           , data = filter(df, Central.Air == "true"))

#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(kwh.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |    logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+-----------+----------+----------+----------+-------------|
| 1 |  0.43 | -14330.96 | 28693.93 | 28823.75 | 28509.74 |    24667.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(kwh.avg.lmer.log), digits = 4)
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |   8.8566 |    0.0156 |  568.7863 | fixed             |
|  2 | building.pca_1                   |   0.0943 |    0.0017 |   56.2031 | fixed             |
|  3 | building.pca_2                   |  -0.0050 |    0.0024 |   -2.0897 | fixed             |
|  4 | building.pca_3                   |   0.0010 |    0.0027 |    0.3558 | fixed             |
|  5 | building.pca_4                   |   0.0241 |    0.0033 |    7.4190 | fixed             |
|  6 | building.pca_5                   |  -0.0038 |    0.0029 |   -1.2804 | fixed             |
|  7 | d0_0_tree                        |  -0.0030 |    0.0018 |   -1.6394 | fixed             |
|  8 | d0_20_tree                       |  -0.0000 |    0.0005 |   -0.0670 | fixed             |
|  9 | d180_0_tree                      |  -0.0040 |    0.0018 |   -2.2181 | fixed             |
| 10 | d180_20_tree                     |  -0.0002 |    0.0005 |   -0.4766 | fixed             |
| 11 | d270_0_tree                      |  -0.0022 |    0.0027 |   -0.8039 | fixed             |
| 12 | d270_20_tree                     |   0.0002 |    0.0008 |    0.2723 | fixed             |
| 13 | d90_0_tree                       |   0.0027 |    0.0026 |    1.0374 | fixed             |
| 14 | d90_20_tree                      |   0.0002 |    0.0008 |    0.3010 | fixed             |
| 15 | sd_(Intercept).Elementary.School |   0.0583 |           |           | Elementary.School |
| 16 | sd_Observation.Residual          |   0.4306 |           |           | Residual          |
#+END_SRC

#+begin_src R :exports results :results graphics :file ../figs/tree_avg_kwh_coefs.png :height 350
  a <- tidy(kwh.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_avg_kwh_coefs.png]]


* therms avg
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-18 Wed 09:13
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_OLPATH: Building Energy and Trees [2018-07-13 Fri]/Model/Fit Models
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
#+begin_src R
  therms.avg.lmer.log <- lmer(log_Therms_Annual_Avg ~ building.pca_1 +
                               building.pca_2 +
                               building.pca_3 +
                               building.pca_4 +
                               building.pca_5 +
#                               building.pca_6 +
#                               building.pca_7 +
                               d0_0_tree        +
                               #d0_20_tree       +
                               d180_0_tree      +
                               #d180_20_tree     +
                               d270_0_tree      +
                               #d270_20_tree     +
                               d90_0_tree       +
                               #d90_20_tree      +
                               ## d0_0_building    +
                               ## d0_20_building   +
                               ## d180_0_building  +
                               ## d180_20_building +
                               ## d270_0_building  +
                               ## d270_20_building +
                               ## d90_0_building   +
                               ## d90_20_building  +
                                (1|Elementary.School)
                         , data = filter(df, Central.Air == "true"))

#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(therms.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |      AIC |      BIC | deviance | df.residual |
|---+-------+----------+----------+----------+----------+-------------|
| 1 |  0.30 | -6165.61 | 12357.22 | 12465.33 | 12212.55 |    30225.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(therms.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     6.48 |      0.01 |    570.87 | fixed             |
|  2 | building.pca_1                   |     0.10 |      0.00 |     94.21 | fixed             |
|  3 | building.pca_2                   |     0.03 |      0.00 |     17.91 | fixed             |
|  4 | building.pca_3                   |     0.04 |      0.00 |     24.99 | fixed             |
|  5 | building.pca_4                   |     0.04 |      0.00 |     21.82 | fixed             |
|  6 | building.pca_5                   |     0.01 |      0.00 |      8.37 | fixed             |
|  7 | d0_0_tree                        |     0.01 |      0.00 |      5.79 | fixed             |
|  8 | d180_0_tree                      |     0.01 |      0.00 |      9.49 | fixed             |
|  9 | d270_0_tree                      |     0.01 |      0.00 |      3.36 | fixed             |
| 10 | d90_0_tree                       |     0.01 |      0.00 |      4.92 | fixed             |
| 11 | Central.Airtrue                  |    -0.09 |      0.00 |    -17.90 | fixed             |
| 12 | sd_(Intercept).Elementary.School |     0.05 |           |           | Elementary.School |
| 13 | sd_Observation.Residual          |     0.30 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/therms_avg_resid.png
  dt <- broomify(therms.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/therms_avg_resid.png]]



#+begin_src R :exports results :results graphics :file ../figs/tree_avg_therm_coefs.png :height 350
  a <- tidy(therms.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_avg_therm_coefs.png]]


* DONE Give Bret Larget Report and data <2017-10-05 Thu>
CLOSED: [2017-10-09 Mon 16:21]
:PROPERTIES:
:header-args:R: :eval yea :results none :exports none
:OPTIONS: toc:nil  author:nil date:nil
:EXPORT_TITLE:
:ARCHIVE_TIME: 2018-07-19 Thu 16:30
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: work
:END:

#+begin_src R
library(raster)
  build.res.primary.parcels.tree.building <- shapefile("../DD/buildings.w.parcels.energy.propinfo.tree.building.shp")
  colnames(build.res.primary.parcels.tree.building@data) <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.colnames.rds")
  build.res.primary.parcels.tree.building@data <- readRDS("../DD/buildings.w.parcels.energy.propinfo.tree.building.data.rds")
#+end_src

#+begin_src R
library(stringr)
  colnames(build.res.primary.parcels.tree.building@data) <- str_replace(colnames(build.res.primary.parcels.tree.building@data),"X","")

  c.names <- colnames(build.res.primary.parcels.tree.building@data)[57:168]

  explosion <- str_match(c.names, "([0-9]+)_([a-z]+)_(.*)")

  juntado <- paste0(explosion[,3],"_",explosion[,2],"_",explosion[,4])

  colnames(build.res.primary.parcels.tree.building@data)[57:168] <- juntado
#+end_src

#+RESULTS:


#+begin_src R
#CHange "NA" Garage.1 to "none"
build.res.primary.parcels.tree.building@data$Garage.1[is.na(build.res.primary.parcels.tree.building@data$Garage.1)] <- "none"
#+end_src

#+RESULTS:

#+begin_src R
            df <- build.res.primary.parcels.tree.building@data
          df <- df %>% dplyr::select(-Parcel, -Address)
          df <- df %>% dplyr::select(-Name)
          df <- df %>% dplyr::select(-BUILDINGFO)
          df <- df %>% dplyr::select(-SOURCE,
                                     -FootprintT,
                                     -BuildingUs,
                                     -BuildingCl, -Shape_area, -Shape_len,
                                     -Dwelling.Units,
                                     -Total.Living.Area)
#+end_src

#+RESULTS:


#+begin_src R
#add a bit of noise
  library(dplyr)

    df_noise <- df %>%
      filter(Current.Year.Improvement.Value.th > 0) %>%
      mutate(Current.Year.Improvement.Value.th = Current.Year.Improvement.Value.th + round(rnorm(n = 1, mean = 0,sd = .2),1)) %>%
      mutate(Current.Year.Land.Value.th = Current.Year.Land.Value.th + round(rnorm(n = nrow(.), mean = 0,sd = .2),1)) %>%
      mutate(First.Floor.Living.Area = First.Floor.Living.Area + round(rnorm(n = nrow(.), mean = 0,sd = 3),0)) %>%
      mutate(Second.Floor.Living.Area = ifelse(Second.Floor.Living.Area > 0, Second.Floor.Living.Area + round(rnorm(n = nrow(.), mean = 0,sd = 3),0), Second.Floor.Living.Area)) %>%
      mutate(Third.Floor.Living.Area = ifelse(Third.Floor.Living.Area, Third.Floor.Living.Area + round(rnorm(n = nrow(.), mean = 0,sd = 3),0),Third.Floor.Living.Area)) %>%
      mutate(Lot.Size.Sq.Ft = ifelse(Lot.Size.Sq.Ft, Lot.Size.Sq.Ft + round(rnorm(n = nrow(.), mean = 0,sd = 3),0),Lot.Size.Sq.Ft)) %>%
      mutate(Finished.Basement = ifelse(Finished.Basement, Finished.Basement + round(rnorm(n = nrow(.), mean = 0,sd = 3),0),Finished.Basement)) %>%
      mutate(Total.Basement = ifelse(Total.Basement, Total.Basement + round(rnorm(n = nrow(.), mean = 0,sd = 3),0),Total.Basement)) %>%
      mutate(Crawl.Space = ifelse(Crawl.Space, Crawl.Space + round(rnorm(n = nrow(.), mean = 0,sd = 1),0),Crawl.Space)) %>%
      mutate(Roof.Replaced.Year = ifelse(Roof.Replaced.Year, Roof.Replaced.Year + round(rnorm(n = nrow(.), mean = 0,sd = .3),0),Roof.Replaced.Year))

#+end_src

#+RESULTS:


#+begin_src R
saveRDS(df_noise, "../DD/erker_energy_stat699.rds")
#+end_src

#+RESULTS:


#+begin_src R
library(ascii)
  options(asciiType = "org")
ascii(paste0(colnames(df_noise),"\n"))
#+end_src


| Variable Name                     | Description                                              |
|-----------------------------------+----------------------------------------------------------|
| kWh.High                          | Kilowatt hours used during month of greatest use         |
| kWh.Mon.Avg.last12mo              | Average kilowatt hours used per month                    |
| Cost.kWh.High                     | Cost of kilowatt Hours use during month of greatest use  |
| Cost.kWh.Avg                      | Average cost of kilowatt hours used per month            |
| Therms.High                       | Therms used during month of greatest use                 |
| Therms.Mon.Avg.last12mo           | Average therms used per month                            |
| Cost.Therms.High                  | Cost of therm use during month of greatest use           |
| Cost.Therms.Avg                   | Average cost of therms used per month                    |
| Electric.for.Heating              | Does house use electricity for heating?                  |
| Lot.Size.Sq.Ft                    | Area of property lot in square feet                      |
| Water.Frontage                    | Is the property on the lakeshore?                        |
| Elementary.School                 | The elementary school attended by children in this house |
| Middle.School                     | The middle school attended by children in this house     |
| High.School                       | The high school attended by children in this house       |
| Ward                              | Which ward the house is in.                              |
| State.Assembly.District           | Which state assembly district the house is in.           |
| Home.Style                        | Style of the house                                       |
| Year.Built                        | Year the house was built                                 |
| Stories                           | How many stories/levels the house has.                   |
| Bedrooms                          | Number of bedrooms in the house                          |
| Full.Baths                        | Number of full bathrooms                                 |
| Half.Baths                        | Number of half bathrooms                                 |
| Fireplaces                        | Number of fireplaces                                     |
| Central.Air                       | Whether or not the house has central air conditioning    |
| First.Floor.Living.Area           | Area of first floor in square feet                       |
| Second.Floor.Living.Area          | Area of second floor in square feet                      |
| Third.Floor.Living.Area           | Area of third floor in square feet                       |
| Above.Third.Floor.Living.Area     | Area above third floor in square feet                    |
| Finished.Attic                    | Area of finished attic in square feet                    |
| Finished.Basement                 | Area of finished basement in square feet                 |
| Total.Basement                    | Total Area of basement in square feet                    |
| Crawl.Space                       | Area of crawl space in square feet                       |
| Exterior.Wall.1                   | Material walls are made from                             |
| Exterior.Wall.2                   | Material walls are made from                             |
| Foundation                        | Material foundation is made from                         |
| Roof                              | Material roof is made from                               |
| Roof.Replaced.Year                | When roof was most recently replaced                     |
| Garage.1                          | Type of first garage                                     |
| Garage.Stalls.1                   | Number of stalls in first garage                         |
| Garage2                           | Type of second garage                                    |
| Garage.Stalls.2                   | Number of stalls in second garage                        |
| Driveway                          | Material driveway is made from                           |
| Current.Year.Improvement.Value.th | Value of house in thousands of dollars                   |
| Current.Year.Land.Value.th        | Value of land house is on in throusands of dollars       |

Tree or Building Cover in Region Variables:

pattern:
<direction>_<distance from house>_<over house>_<tree or building cover>

| direction |            |
|-----------+------------|
| n         | north      |
| ne        | north-east |
| e         | east       |
| se        | south-east |
| s         | south      |
| sw        | southwest  |
| w         | west       |
| nw        | northwest  |

| distance from house |                           |
|---------------------+---------------------------|
|                   0 | over the house or 0 - 10m |
|                  10 | 10 - 20m                  |
|                  20 | 20 - 30m                  |
|                  30 | 30-40m                    |
|                  40 | 40-50m                    |
|                  50 | 50-60m                    |

| over house |                                                                                     |
|------------+-------------------------------------------------------------------------------------|
|          1 | the region over the house (used in the case where tree canopy is above the building |
|          0 | not over the house                                                                  |

| tree or building |                                                     |
|------------------+-----------------------------------------------------|
| tree             | value is proportion of tree cover in the region     |
| building         | value is proportion of building cover in the region |


* Stat 699 meet to go over energy problem <2017-10-12 Thu 11:00>
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-19 Thu 16:30
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
1210 MSC

* meet with Stat 998 to go over the energy problem <2017-10-19 Thu 11:00>
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-19 Thu 16:30
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:

from 11-12:15


** DONE send code to make figure with the different regions.
CLOSED: [2017-10-19 Thu 15:07]

* DONE Assess 699 Students' work, determine next steps in analysis
CLOSED: [2017-12-21 Thu 11:03]
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-19 Thu 16:30
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: work
:END:

not really energy use, but the portion of energy use used for heating
and cooling.

how is thermostat set.


* DONE Energy Paper Due to Steve Carpenter
CLOSED: [2017-12-29 Fri 10:05] DEADLINE: <2017-11-15 Wed -5d>
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-19 Thu 16:30
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: work
:END:

* energy in warm versus cold climates
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-19 Thu 16:31
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
http://zeroenergyproject.org/warmer-climate-construction-design-considerations/

* DONE Send follow up email to MGE
CLOSED: [2017-12-29 Fri 10:05] SCHEDULED: <2017-12-28 Thu>
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-19 Thu 16:31
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: work
:END:

* COMMENT Is it human subject research?
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 13:39
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
human subject is a "living individual about whom an investigator
(whether professional or student) conducting research obtains (1) Data
through intervention or interaction with the individual, or (2)
Identifiable private information."

I'm not interacting or intervening with an individual.  It's the
  energy use of a building, which is the result of a number of
  individuals who can't be identified by the data.

  private information
- "Information about behavior that occurs in a context in which an
  individual can reasonably expect that no observation or recording is
  taking place"
- "Information which has been provided for specific purposes by an
  individual and which the individual can reasonably expect will not
  be made public (for example, a school record)"

The information is public, it's just not for research use.  My thought
is that since it's not private information, it is ok to do the
research (I'm exempt from irb review) as long as I get mge permission.

expectations of privacy?  maybe, but, again, the data are already
public.  According the mge website where the data are: "Provision of
this information is neither a breach of confidentiality nor a
guarantee or contract as to future energy use levels for this
address."

If the data held by an organization are identifiable private
information, they can be deidentified and given to researchers and the
researchers don't need irb approved plans

* Things to do to make the project better/correct
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 13:39
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
- when cropping building footprints to parcels, make sure there is
  only one building per parcel
- make the regions be the space directly over a building and then
  buffer from the building border (rather than just going out from centroid)
- include percent of regions filled with other buildings as predictor
  variables.
- include environmental variables (proximity to lake, elevation, etc)

* move project to krusty
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 13:39
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
#+BEGIN_SRC sh :session a :results verbatim
  rsync -avzu --exclude "code/*" --exclude ".git" ~/projects/energy erker@krusty:~/
#+END_SRC

krusty working directory /ssh:krusty:~/energy/code


* move project to local from krusty
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 13:39
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
#+BEGIN_SRC sh :session a :results verbatim
  rsync -avzu --exclude "code/*" --exclude ".git" erker@krusty:~/energy/ ~/projects/energy/
#+END_SRC

#+RESULTS:
#+begin_example
erker@krusty's password:
receiving file list ... done
DD/
DD/Parcel.buildings.w.parcels.energy.propinfo.tree.rds
DD/buildings.w.parcels.energy.propinfo.tree.dbf
DD/buildings.w.parcels.energy.propinfo.tree.prj
DD/buildings.w.parcels.energy.propinfo.tree.shp
DD/buildings.w.parcels.energy.propinfo.tree.shx
DD/colnames.buildings.w.parcels.energy.propinfo.tree.rds
DD/extracted_cover_eachRegionAroundBuilding.rds
code/

sent 204 bytes  received 27106976 bytes  3614290.67 bytes/sec
total size is 1541073930  speedup is 56.85
#+end_example


* revision [2018-07-13 Fri]
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 13:39
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_OLPATH: Building Energy and Trees [2018-07-13 Fri]
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:

redoing this because my results are not consistent.  I may have made
an error.  Going to simplify to fewer angles and fewer buffer
distances.  My work aggregating suggests that this doesn't change
things much.


* Central Air = "false"
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 14:05
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_OLPATH: Building Energy and Trees [2018-07-13 Fri]/Model/Fit Models
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
** kg C
*** log avg kg C from gas and elec combined
#+begin_src R

    C.avg.lmer.log <- lmer(log_C_gas_and_elec_Annual_avg ~ building.pca_1 +
                               building.pca_2 +
                               building.pca_3 +
                               building.pca_4 +
                               building.pca_5 +
#                               building.pca_6 +
#                               building.pca_7 +
                               d0_0_tree        +
                               d0_20_tree       +
                               d180_0_tree      +
                               d180_20_tree     +
                               d270_0_tree      +
                               d270_20_tree     +
                               d90_0_tree       +
                               d90_20_tree      +
                               ## d0_0_building    +
                               ## d0_20_building   +
                               ## d180_0_building  +
                               ## d180_20_building +
                               ## d270_0_building  +
                               ## d270_20_building +
                               ## d90_0_building   +
                               ## d90_20_building  +
                                (1|Elementary.School)
                         , data = filter(df, Central.Air == "false"))

#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |     AIC |     BIC | deviance | df.residual |
|---+-------+----------+---------+---------+----------+-------------|
| 1 |  0.32 | -1561.81 | 3155.62 | 3261.58 |  2981.16 |     5539.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.avg.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     7.64 |      0.02 |    398.30 | fixed             |
|  2 | building.pca_1                   |     0.09 |      0.00 |     37.55 | fixed             |
|  3 | building.pca_2                   |     0.00 |      0.00 |      0.65 | fixed             |
|  4 | building.pca_3                   |     0.01 |      0.00 |      2.41 | fixed             |
|  5 | building.pca_4                   |     0.03 |      0.00 |      7.84 | fixed             |
|  6 | building.pca_5                   |     0.01 |      0.00 |      2.57 | fixed             |
|  7 | d0_0_tree                        |     0.00 |      0.00 |      0.37 | fixed             |
|  8 | d0_20_tree                       |    -0.00 |      0.00 |     -0.14 | fixed             |
|  9 | d180_0_tree                      |     0.01 |      0.00 |      2.02 | fixed             |
| 10 | d180_20_tree                     |    -0.00 |      0.00 |     -0.34 | fixed             |
| 11 | d270_0_tree                      |     0.00 |      0.00 |      0.37 | fixed             |
| 12 | d270_20_tree                     |     0.00 |      0.00 |      0.10 | fixed             |
| 13 | d90_0_tree                       |    -0.00 |      0.00 |     -0.33 | fixed             |
| 14 | d90_20_tree                      |    -0.00 |      0.00 |     -0.15 | fixed             |
| 15 | sd_(Intercept).Elementary.School |     0.03 |           |           | Elementary.School |
| 16 | sd_Observation.Residual          |     0.32 |           |           | Residual          |
#+END_SRC

#+begin_src R :exports results :results graphics :file ../figs/C_avg_resid.png
  dt <- broomify(C.avg.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_avg_C_coefs_CentralAirFalse.png :height 350
  a <- tidy(C.avg.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_avg_C_coefs_CentralAirFalse.png]]

*** log avg kg C from gas
#+begin_src R
  C.gas.lmer.log <- lmer(log_C_gas_Annual_avg ~ building.pca_1 +
                               building.pca_2 +
                               building.pca_3 +
                               building.pca_4 +
                               building.pca_5 +
#                               building.pca_6 +
#                               building.pca_7 +
                               d0_0_tree        +
                               d0_20_tree       +
                               d180_0_tree      +
                               d180_20_tree     +
                               d270_0_tree      +
                               d270_20_tree     +
                               d90_0_tree       +
                               d90_20_tree      +
                               ## d0_0_building    +
                               ## d0_20_building   +
                               ## d180_0_building  +
                               ## d180_20_building +
                               ## d270_0_building  +
                               ## d270_20_building +
                               ## d90_0_building   +
                               ## d90_20_building  +
                                (1|Elementary.School)
                         , data = filter(df, Central.Air == "false"))
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.gas.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |     AIC |     BIC | deviance | df.residual |
|---+-------+----------+---------+---------+----------+-------------|
| 1 |  0.34 | -2052.62 | 4137.23 | 4243.19 |  3966.19 |     5539.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.gas.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     6.85 |      0.02 |    295.33 | fixed             |
|  2 | building.pca_1                   |     0.11 |      0.00 |     39.22 | fixed             |
|  3 | building.pca_2                   |     0.03 |      0.00 |      7.99 | fixed             |
|  4 | building.pca_3                   |     0.02 |      0.00 |      5.56 | fixed             |
|  5 | building.pca_4                   |     0.03 |      0.00 |      8.06 | fixed             |
|  6 | building.pca_5                   |     0.02 |      0.00 |      4.16 | fixed             |
|  7 | d0_0_tree                        |     0.01 |      0.00 |      1.77 | fixed             |
|  8 | d0_20_tree                       |     0.00 |      0.00 |      0.55 | fixed             |
|  9 | d180_0_tree                      |     0.01 |      0.00 |      2.25 | fixed             |
| 10 | d180_20_tree                     |     0.00 |      0.00 |      1.73 | fixed             |
| 11 | d270_0_tree                      |     0.01 |      0.00 |      1.10 | fixed             |
| 12 | d270_20_tree                     |    -0.00 |      0.00 |     -0.50 | fixed             |
| 13 | d90_0_tree                       |     0.00 |      0.00 |      0.31 | fixed             |
| 14 | d90_20_tree                      |     0.00 |      0.00 |      0.38 | fixed             |
| 15 | sd_(Intercept).Elementary.School |     0.06 |           |           | Elementary.School |
| 16 | sd_Observation.Residual          |     0.34 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/C_gas_resid.png
  dt <- broomify(C.gas.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_gas_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_avg_C_gas_coefs_CentralAirFalse.png :height 350
  a <- tidy(C.gas.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_avg_C_gas_coefs_CentralAirFalse.png]]

*** log avg kg C from elec
#+begin_src R
    C.elec.lmer.log <- lmer(log_C_elec_Annual_avg ~ building.pca_1 +
                                 building.pca_2 +
                                 building.pca_3 +
                                 building.pca_4 +
                                 building.pca_5 +
  #                               building.pca_6 +
  #                               building.pca_7 +
                                 d0_0_tree        +
                                 d0_20_tree       +
                                 d180_0_tree      +
                                 d180_20_tree     +
                                 d270_0_tree      +
                                 d270_20_tree     +
                                 d90_0_tree       +
                                 d90_20_tree      +
                                 ## d0_0_building    +
                                 ## d0_20_building   +
                                 ## d180_0_building  +
                                 ## d180_20_building +
                                 ## d270_0_building  +
                                 ## d270_20_building +
                                 ## d90_0_building   +
                                 ## d90_20_building  +
                                  (1|Elementary.School)
                         , data = filter(df, Central.Air == "false"))
#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(C.elec.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |   logLik |     AIC |     BIC | deviance | df.residual |
|---+-------+----------+---------+---------+----------+-------------|
| 1 |  0.51 | -4218.77 | 8469.55 | 8575.51 |  8308.72 |     5539.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(C.elec.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     6.93 |      0.03 |    220.01 | fixed             |
|  2 | building.pca_1                   |     0.08 |      0.00 |     19.39 | fixed             |
|  3 | building.pca_2                   |    -0.03 |      0.01 |     -6.28 | fixed             |
|  4 | building.pca_3                   |    -0.01 |      0.01 |     -1.79 | fixed             |
|  5 | building.pca_4                   |     0.02 |      0.01 |      3.72 | fixed             |
|  6 | building.pca_5                   |    -0.00 |      0.01 |     -0.34 | fixed             |
|  7 | d0_0_tree                        |    -0.00 |      0.00 |     -0.66 | fixed             |
|  8 | d0_20_tree                       |     0.00 |      0.00 |      0.42 | fixed             |
|  9 | d180_0_tree                      |     0.00 |      0.00 |      1.06 | fixed             |
| 10 | d180_20_tree                     |    -0.00 |      0.00 |     -1.47 | fixed             |
| 11 | d270_0_tree                      |    -0.01 |      0.01 |     -0.87 | fixed             |
| 12 | d270_20_tree                     |     0.00 |      0.00 |      0.76 | fixed             |
| 13 | d90_0_tree                       |    -0.00 |      0.01 |     -0.36 | fixed             |
| 14 | d90_20_tree                      |    -0.00 |      0.00 |     -1.03 | fixed             |
| 15 | sd_(Intercept).Elementary.School |     0.06 |           |           | Elementary.School |
| 16 | sd_Observation.Residual          |     0.51 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/C_elec_resid.png
  dt <- broomify(C.elec.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/C_elec_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_avg_C_elec_coefs_CentralAirFalse.png :height 350
  a <- tidy(C.elec.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_avg_C_elec_coefs_CentralAirFalse.png]]

** Cost dollars
#+begin_src R
  cost.lmer.log <- lmer(log_Cost_gas_and_elec_Annual_avg ~ building.pca_1 +
                               building.pca_2 +
                               building.pca_3 +
                               building.pca_4 +
                               building.pca_5 +
#                               building.pca_6 +
#                               building.pca_7 +
                                 d0_0_tree        +
                                 d0_20_tree       +
                                 d180_0_tree      +
                                 d180_20_tree     +
                                 d270_0_tree      +
                                 d270_20_tree     +
                                 d90_0_tree       +
                                 d90_20_tree      +
                               ## d0_0_building    +
                               ## d0_20_building   +
                               ## d180_0_building  +
                               ## d180_20_building +
                               ## d270_0_building  +
                               ## d270_20_building +
                               ## d90_0_building   +
                               ## d90_20_building  +
                                (1|Elementary.School)
                         , data = filter(df, Central.Air == "false"))

#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(cost.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma |  logLik |    AIC |    BIC | deviance | df.residual |
|---+-------+---------+--------+--------+----------+-------------|
| 1 |  0.25 | -280.24 | 592.48 | 698.44 |   411.53 |     5539.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(cost.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     7.49 |      0.02 |    493.15 | fixed             |
|  2 | building.pca_1                   |     0.06 |      0.00 |     30.84 | fixed             |
|  3 | building.pca_2                   |    -0.01 |      0.00 |     -2.58 | fixed             |
|  4 | building.pca_3                   |     0.00 |      0.00 |      0.92 | fixed             |
|  5 | building.pca_4                   |     0.02 |      0.00 |      5.89 | fixed             |
|  6 | building.pca_5                   |     0.00 |      0.00 |      1.35 | fixed             |
|  7 | d0_0_tree                        |    -0.00 |      0.00 |     -0.38 | fixed             |
|  8 | d0_20_tree                       |     0.00 |      0.00 |      0.27 | fixed             |
|  9 | d180_0_tree                      |     0.00 |      0.00 |      1.53 | fixed             |
| 10 | d180_20_tree                     |    -0.00 |      0.00 |     -0.91 | fixed             |
| 11 | d270_0_tree                      |    -0.00 |      0.00 |     -0.18 | fixed             |
| 12 | d270_20_tree                     |     0.00 |      0.00 |      0.49 | fixed             |
| 13 | d90_0_tree                       |    -0.00 |      0.00 |     -0.58 | fixed             |
| 14 | d90_20_tree                      |    -0.00 |      0.00 |     -0.44 | fixed             |
| 15 | sd_(Intercept).Elementary.School |     0.03 |           |           | Elementary.School |
| 16 | sd_Observation.Residual          |     0.25 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/cost_avg_resid.png
  dt <- broomify(cost.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/cost_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_avg_cost_coefs_CentralAirFalse.png :height 350
  a <- tidy(cost.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_avg_cost_coefs_CentralAirFalse.png]]



* Cost dollars
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 14:07
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_OLPATH: Building Energy and Trees [2018-07-13 Fri]/Model/Fit Models/Central Air = "true"
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
#+begin_src R
  cost.lmer.log <- lmer(log_Cost_gas_and_elec_Annual_avg ~ building.pca_1 +
                               building.pca_2 +
                               building.pca_3 +
                               building.pca_4 +
                               building.pca_5 +
#                               building.pca_6 +
#                               building.pca_7 +
                                 d0_0_tree        +
                                 d0_20_tree       +
                                 d180_0_tree      +
                                 d180_20_tree     +
                                 d270_0_tree      +
                                 d270_20_tree     +
                                 d90_0_tree       +
                                 d90_20_tree      +
                               ## d0_0_building    +
                               ## d0_20_building   +
                               ## d180_0_building  +
                               ## d180_20_building +
                               ## d270_0_building  +
                               ## d270_20_building +
                               ## d90_0_building   +
                               ## d90_20_building  +
                                (1|Elementary.School)
                         , data = filter(df, Central.Air == "true"))

#+end_src

#+RESULTS:

#+begin_src R :results org
ascii.nowarn.print(glance(cost.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|   | sigma | logLik |     AIC |     BIC | deviance | df.residual |
|---+-------+--------+---------+---------+----------+-------------|
| 1 |  0.24 | 326.42 | -620.84 | -491.02 |  -821.99 |    24667.00 |
#+END_SRC

#+begin_src R :results org
ascii.nowarn.print(tidy(cost.lmer.log))
#+end_src

#+RESULTS:
#+BEGIN_SRC org
|    | term                             | estimate | std.error | statistic | group             |
|----+----------------------------------+----------+-----------+-----------+-------------------|
|  1 | (Intercept)                      |     7.50 |      0.01 |    945.92 | fixed             |
|  2 | building.pca_1                   |     0.07 |      0.00 |     72.93 | fixed             |
|  3 | building.pca_2                   |     0.00 |      0.00 |      2.95 | fixed             |
|  4 | building.pca_3                   |     0.01 |      0.00 |      7.63 | fixed             |
|  5 | building.pca_4                   |     0.02 |      0.00 |     11.77 | fixed             |
|  6 | building.pca_5                   |     0.00 |      0.00 |      0.33 | fixed             |
|  7 | d0_0_tree                        |    -0.00 |      0.00 |     -0.63 | fixed             |
|  8 | d0_20_tree                       |     0.00 |      0.00 |      0.49 | fixed             |
|  9 | d180_0_tree                      |    -0.00 |      0.00 |     -0.64 | fixed             |
| 10 | d180_20_tree                     |     0.00 |      0.00 |      0.60 | fixed             |
| 11 | d270_0_tree                      |    -0.00 |      0.00 |     -0.18 | fixed             |
| 12 | d270_20_tree                     |     0.00 |      0.00 |      0.78 | fixed             |
| 13 | d90_0_tree                       |     0.00 |      0.00 |      1.81 | fixed             |
| 14 | d90_20_tree                      |     0.00 |      0.00 |      0.53 | fixed             |
| 15 | sd_(Intercept).Elementary.School |     0.03 |           |           | Elementary.School |
| 16 | sd_Observation.Residual          |     0.24 |           |           | Residual          |
#+END_SRC


#+begin_src R :exports results :results graphics :file ../figs/cost_avg_resid.png
  dt <- broomify(cost.lmer.log)
  ggally_nostic_resid(dt, ggplot2::aes(.fitted, .resid), alpha = .1)
#+end_src

#+RESULTS:
[[file:../figs/cost_avg_resid.png]]

#+begin_src R :exports results :results graphics :file ../figs/tree_avg_cost_coefs.png :height 350
  a <- tidy(cost.lmer.log) %>% filter(grepl(".*tree",term)) %>% mutate(response = "kwh.avg")

library(ggthemes)
  ggplot(a, aes(x = estimate, y = term)) + geom_point() +
    geom_errorbarh(aes(xmin = estimate - std.error, xmax = estimate + std.error), height = .4) +
    geom_vline(xintercept = 0, color = "red") +
    theme_base()
#+end_src

#+RESULTS:
[[file:../figs/tree_avg_cost_coefs.png]]


* functions
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 15:11
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_OLPATH: Building Energy and Trees [2018-07-13 Fri]/Model
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
** other

#+begin_src R

  options(asciiType = "org")
  ascii.nowarn.print <- function(x,...) {
                                          #op <- options(warn = -1)
                                          #      on.exit(options(op))

      suppressWarnings(print(ascii(x,...)))

  }


#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(-67.5,-22.5,22.5,67.5)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)



      dist <- round(gDistance(poly, o, byid = T),-1)[,1]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
      })

      angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
      direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }
#+end_src

#+RESULTS:



#+begin_src R
  makeRegionsAroundPolygon_poolSandN <- function(poly, buffer.widths, theta = c(-22.5,22.5)) {
        bc <- gCentroid(poly)
        bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
        bcbd <- sapply(length(bcb):1, function(i) {
            if(i >1) {
                gDifference(bcb[[i]], bcb[[(i-1)]])
            } else {
                bcb[[i]]
            }
        })
        bcb <- do.call(bind, bcbd)

        theta.radians <- theta*pi/180
        r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

        y <- r*sin(theta.radians)
        x <- r*cos(theta.radians)

        x1 <- coordinates(bc)[,1 ] + x
        y1 <- coordinates(bc)[,2] + y

        x2 <- coordinates(bc)[,1 ] - x
        y2 <- coordinates(bc)[,2] - y

        line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

        line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
        proj4string(line) <- crs(poly)


        o <- lapply(1:length(bcb), function(i) {
            lpi <- gIntersection(bcb[i,], line)
            blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
            dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
            disaggregate(dpi)
        })

        o <- do.call(bind, o)


        dist <- round(gDistance(poly, o, byid = T),-1)[,1]
        over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

        direction <- sapply(1:length(o), function(i) {
            diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
            round(atan2(diff.coords[1], diff.coords[2]) * 180/pi, 0)
        })

        angles <- c(0, 45, 90, 135, 180, -180, -135, -90, -45)
        closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
        direction <- angles[closest.angles]
        direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
        o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                           distance.from.building = dist,
                                                           over.building = over.building,
                                                           direction = direction))
        o
    }
#+end_src

#+RESULTS:

#+begin_src R
  makeNESWRegionsAroundPolygon <- function(poly, buffer.widths, theta = c(45,-45)) {
      bc <- gCentroid(poly)
      bcb <- sapply(buffer.widths, function(w) gBuffer(poly, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(buffer.widths) + sqrt(gArea(poly)/pi) * 3

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(poly)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.0001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)


      dist <- gDistance(poly, o, byid = T)[,1]
      closest.dist <- sapply(dist, function(d) which(abs(buffer.widths - d) == min(abs(buffer.widths - d))))
      dist <- buffer.widths[closest.dist]
      over.building <- 0 == round(gDistance(bc, o, byid = T),0)[,1]

      direction <- sapply(1:length(o), function(i) {
          diff.coords <- coordinates(bc) - coordinates(gCentroid(o[i,]))
          atan2(diff.coords[1], diff.coords[2]) * 180/pi
      })

      angles <- c(0, 90, 180, -180, -90)
      closest.angles <- sapply(direction, function(dir) which(abs(angles - dir) == min(abs(angles - dir))))
      direction <- angles[closest.angles]
                                          #    direction <- mapvalues(direction, from = angles, to = c("s","sw","w","nw","n","n","ne","e","se"))
          direction <- mapvalues(direction, from = angles, to = c("s","w","n","n","e"))
      o <- SpatialPolygonsDataFrame(o, data = data.frame(BUILDINGFO = poly@data$BUILDINGFO,
                                                         distance.from.building = dist,
                                                         over.building = over.building,
                                                         direction = direction))
      o
  }

#+end_src

#+RESULTS:

#+begin_src R
  makeRegionsAroundPolygonCentroid <- function(polygon, buffer.widths, theta) {

      bc <- gCentroid(polygon)
      bcb <- sapply(buffer.widths, function(w) gBuffer(bc, width = w, byid = T))
      bcbd <- sapply(length(bcb):1, function(i) {
          if(i >1) {
              gDifference(bcb[[i]], bcb[[(i-1)]])
          } else {
              bcb[[i]]
          }
      })
      bcb <- do.call(bind, bcbd)

      theta.radians <- theta*pi/180
      r <- max(widths)

      y <- r*sin(theta.radians)
      x <- r*cos(theta.radians)

      x1 <- coordinates(bc)[,1 ] + x
      y1 <- coordinates(bc)[,2] + y

      x2 <- coordinates(bc)[,1 ] - x
      y2 <- coordinates(bc)[,2] - y

      line = SpatialLines(list(Lines(list(Line(cbind(c(x1,x2),c(y1,y2)))), ID="line")))

      line = SpatialLines(sapply(1:length(x1), function(i) list(Lines(Line(cbind(c(x1[i],x2[i]),c(y1[i],y2[i]))), ID=i))))
      proj4string(line) <- crs(polygon)


      o <- lapply(1:length(bcb), function(i) {
          lpi <- gIntersection(bcb[i,], line)
          blpi <- gBuffer(lpi, width = 0.000001)  # create a very thin polygon buffer of the intersected line
          dpi <- gDifference(bcb[i,], blpi)              # split using gDifference
          disaggregate(dpi)
      })

      o <- do.call(bind, o)
      o
  }
#+end_src


#+RESULTS:
** poly
#+begin_src R
poly <- readWKT("POLYGON ((300278.6608440399868414 4770541.7102104201912880, 300291.3229938599979505 4770541.7700617099180818, 300291.3943529999814928 4770526.6698510395362973, 300278.7322129899985157 4770526.6100080702453852, 300278.6608440399868414 4770541.7102104201912880))")
poly <- readWKT("POLYGON ((78.6 41.7, 91.3 41.7, 91.3 26.6, 78.7 26.6, 78.6 41.7))")

  poly <- as(poly, "SpatialPolygonsDataFrame")
poly@data$BUILDINGFO = 0
#+end_src

#+RESULTS:


* cost
:PROPERTIES:
:ARCHIVE_TIME: 2018-07-20 Fri 15:22
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_OLPATH: Building Energy and Trees [2018-07-13 Fri]/effect on median house
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
#+begin_src R
          med <- median(exp(df$log_Cost_gas_and_elec_Annual_avg))
          w100tree <- exp(sum(b$estimate)) * med

    #      (exp() - 1) * 100
  pt <-   exp(sum(b$estimate))
  lower <- exp(sum(b$estimate) - 1.96 * sqrt(sum((b$std.error)^2)/8))
  upper <- exp(sum(b$estimate) + 1.96 * sqrt(sum((b$std.error)^2)/8))

lower
pt
upper

lower * med - med
upper * med - med

          w500tree <- exp(sum(5*b$estimate)) * med
        med
        w100tree - med
        w500tree - med
#+end_src

#+RESULTS:
: [1] 0.9905387
: [1] 0.9938001
: [1] 0.9970722
: [1] -17.03027
: [1] -5.270074
: [1] 1800
: [1] -11.15984
: [1] -55.11156


* Contact with people
:PROPERTIES:
:ARCHIVE_TIME: 2018-09-24 Mon 13:18
:ARCHIVE_FILE: ~/git/energy/code/energy.org
:ARCHIVE_CATEGORY: energy
:ARCHIVE_ITAGS: work
:END:
** Jonathan Beers
https://mail.google.com/mail/u/0/#inbox/1609451739d67c58

608 252 4743

Points of conversation

- partner with mge to make this work public
- I want to make sure what I'm saying makes sense from the energy standpoint.
- I want to make sure my work is relevant and helpful to them,
  residents and the city.

Kathy manages the treeline application with DNR part of national arbor
day foundation.


.15

comparison tools, with decade of contruction. 1978 when energy codes
required better insulation.

lawrence berkeley labs - has a heating penalty and cool roof.
oak ridge also has a calculator.

similar with power attic insulation.

peak loads -
- complex with residnetal because we have a long flat peak in our part
  of the world.
- this is a program to shut off a/c
- peak load management association
- again trees probably not the most cost effective way of managing that.
- utilities like "push of a button" to control load.
- commericial is far more important than residential in driving peak load
  - reverse on the gas side.

seventh wave, formerly energy center of wisconsin.

public data. so it's public.

Built that for renters.  Stay away from electric resistance heating

green building advisor .com and a discussion

Forest carbon partners.  division of new forests, an australian
company.  one of worlds largest forest managers.  develop carbon
offset markets.  Jon's nephew works for them.

jbeers@mge.com
cc Joann and Cathy


jpn says a healthy skepticism for energy building modelling is good to
have.  Doesn't account for human behavior.

overall when people move in and out of houses, buildings tend to
perform roughly the same.





*** [2018-01-04 Thu]

UW has a Public Utility Institute; that might be worth going to.

MGE is a distribution company.  Mid continent independent system
operator.  locational marginal pricing.

there are:
generation companies
distribution companies
transmission companies

independent system operators - place bids to run generators the next
day.

If a generator skips out, then a bunch of other stuff has to happen to
allo wthe whole system not to fail.

demand side measures and supply side measures.  All has to work in
near real time.

MGE is a tiny utility company.  kind of like air traffic control.

changing from hub and spoke model to distribition model
- duck curve

reliable and fast is the type of intervention providers are interested
in
- direct load control.

GM closed down in Janesville which created surplus.

October course.


trees

heating penalty

cool roof research
- oak ridge national labs has a model
-

consumer protection for radiant barriers - out of town companies over
charging and improperly installing radiant barriers, which don't even
make sense for our climate.

solar powered attic fan - like putting vitamin C in cigarrettes.

insulation is usually better, but not sexy.

The high low average is a public record in Wisconsin, but any detailed
information is private.  Other places don't have this.  The website
tool saves money on call center.  Because we have some many renters
the website is easier than the call center.

customers can block it if they chose too.

Compare energy use chart in "my energy"

seventh wave.  They have done residential characteristic studies.

maybe nelson institude

"energy hub" student group

audubon.

find who did the research from the email.

swedes know how to build houses that are more efficient.


4) I can use the comparison chart
   1) after 1980 3.5 btu/sq/dd
   2) prior to 1930 7 btu
   3) 1930-1945 6.5 btu
   4) 50's 5.5
   5) 60s 5.0
   6) 70s 4.0
   7)


*** E Source Email that he forwarded to me
https://mail.google.com/mail/u/0/#inbox/1609451739d67c58
*** NEXT contact seventh wave
they have a librarian who can help too.

they have researchers too.
*** Important points from Jon to include in Paper
1) Utilities don't really care about energy use is month of highest
   use.  To control peak loads, they want a switch to use on those
   days to have immediate control.
2) Some places in the country have different energy sources.  For
   example some use electricity for heating.  This means the results
   are only generalizable to places with similar climates _and_ fuel mixes.
3) energy code of 1978, improved building performance  (consider an
   interaction between year)
